  #
  system(OverloadedEquals, javaFacts("ProxyJavaFacts","ua.kiev.gradsoft.JavaChecker.ProxyJavaFacts"),
    ruleset(
      import(general,apply),
      import(general,logical_and),

      java_compilation_unit($x,$y,$z) -> checkType($z),

   
      checkType([$x,$y]) -> checkType($x) && checkType($y),

      checkType([$x]) -> checkType($x),

      checkType(java_empty_type_declaration)   -> true,


      checkType(java_interface_declaration($x,$y,$z,$w))  -> true,

      checkType(java_class_declaration($name,$properties,$extend_classes,$implements_classes,$body)) -> checkClassBody($body,$name),
   
      checkClassBody([$x1,$x2] ,$classname) -> checkClassBody($x1,$classname) && checkClassBody($x2,$classname),

      checkClassBody([$x1], $classname) -> checkClassBody($x1,$classname),

      checkClassBody(empty_list, $classname) -> true,

      checkClassBody(
             java_method_declaration(
                    $name, 
                    $attributes, 
                    $result_type,         
                    $formal_parameters,
                    $exceptions,
                    $method_body),
             $classname) [| $name != java_identifier("equals") && $name != java_identifier("hashCode") |]  -> true,

      checkClassBody(
             java_method_declaration(
                    java_identifier("equals"), 
                    $attributes, 
                    $result_type,         
                    $formal_parameters,
                    $exceptions,
                    $method_body),
             $classname)                         ->   CHECK_EQUALS($classname, checkEqualsParams($formal_parameters)),

      checkEqualsParams([java_formal_parameter($identifier, $type, $isfinal)]) -> CheckTypeIsObject.$type ,

      checkEqualsParams([$x,$y]) -> false,

      CHECK_EQUALS($classname,false) -> true,

      CHECK_EQUALS($classname,true) -> FOUND_EQUALS($classname),

      checkClassBody(
             java_method_declaration(
                    java_identifier("hashCode"), 
                    $attributes, 
                    $result_type,         
                    $formal_parameters,
                    $exceptions,
                    $method_body),
             $classname)                         ->   FOUND_HASHCODE($classname),

      FOUND_EQUALS($classname) && FOUND_HASHCODE($classname) -> true,

      FOUND_HASHCODE($classname) && FOUND_EQUALS($classname) -> true,

      checkClassBody(java_initializer($x), $classname) -> true,

      checkClassBody(java_constructor_declaration($name,$protection,$parameters,$exceptions,$body), $classname) -> true,

      checkClassBody(java_static_initializer($x), $classname) -> true,

      checkClassBody(java_field_declaration($properties_list, $type, $variable_declarator_list),$classname) -> true,

      checkClassBody(java_semicolon, $classname) -> true,


      checkClassBody(
          java_class_declaration($name,$properties,$extend_classes,$implements_classes,$body),
                                 java_identifier($classname) 
                    )     ->  checkClassBody($body,java_identifier(string.concat($classname,".",$name))) ,

      checkClassBody(java_interface_declaration($x,$y,$z,$w),$classname) -> true,
          

      true -> END // setCurrentStopFlag(true) ,

      OTHERWISE($x) -> OverloadedEquals1.$x 


    ),
    FirstTop
);

