  #                         
  system(SynchronizeViolation, javaFacts("ProxyJavaFacts","ua.kiev.gradsoft.JavaChecker.ProxyJavaFacts"),
    ruleset(
      import(general,apply),
      import(general,logical_and),

      C([$x:$y],$var,$synchronizer) -> C($x,$var,$synchronizer) && C($y,$var,$synchronizer),
      C([],$var,$synchronizer) -> true,

      
      C($v,$v,$s) -> false // synchronizeViolationDiscovered($v,$s),

      C(java_primary_expression($prefix,$suffix),$var,$synchronizer) -> C($prefix,$var,$synchronizer) && C($suffix,$var,$synchronizer),

      C(java_empty_block,$var,$synchronizer) -> true,


      # TODO: in principle we must check this, that variable can hide our field.
      C(java_local_variable_declaration($access,$vd),$v,$s) -> true, 

      C(java_empty_statement,$v,$s) -> true, 

      C(java_switch($expr,$statements),$v,$s) -> C($expr,$v,$s) && C($statements,$v,$s),

      C(java_switch_label($label,$statement),$v,$s) -> C($statement,$v,$s),

      C(java_if($t1,$t2,$t3),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s) && C($t3,$v,$s),

      C(java_if($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_while($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_do($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_for($t1,$t2,$t3,$t4),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s) && C($t3,$v,$s) && C($t4,$v,$s),

      C(java_break,$v,$s) -> true,

      C(java_break($x),$v,$s) -> true,

      C(java_continue,$v,$s) -> true,
      
      C(java_continue($x),$v,$s) -> true,

      C(java_return,$v,$s) -> true,

      C(java_return($x),$v,$s) -> C($x,$v,$s),

      # TODO: rethink, may be we need check throw expression ?
      C(java_throw($x),$v,$s) -> true,

      C(java_synchronized($s,$x),$v,$s) -> true,
      
      C(java_synchronized($s1,$x),$v,$s) [| $s1 != $s |] -> C($x,$v,$s),

      C(java_try($x,$catches,$finally),$v,$s) -> C($x,$v,$s) && C($catches,$v,$s) && C($finally,$v,$s),

      C(java_nothing, $v, $s) -> true,

      C(java_catch($ex,$t),$v,$s) -> C($t,$v,$s),

      # ignore asserts for now
      C(java_assert($x),$v,$s) -> true,
      C(java_assert($x,$y),$v,$s) -> true,
      
      C(java_this,$v,$s) -> true,

      # TODO: rethink
      C(java_super_call($x),$v,$s) -> true,

      C(java_assign($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_multiply_assign($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_divide_assign($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_module_assign($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),
 
      C(java_plus_assign($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),
   
      C(java_minus_assign($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),
 
      C(java_left_shift_assign($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_right_shift_assign($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),
 
      C(java_right_right_shift_assign($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),
  
      C(java_and_assign($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),
 
      C(java_xor_assign($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_or_assign($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_conditional_expression($t1,$t2,$t3),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s) && C($t3,$v,$s),

      C(java_logical_or($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_logical_and($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_or($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_and($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_xor($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_eq($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_neq($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_instance_of($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_less($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),
      C(java_greater($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),
      C(java_less_eq($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),
      C(java_greater_eq($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_left_shift($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),
      C(java_right_shift($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),
      C(java_right_right_shift($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_plus($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),
      C(java_minus($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_multiply($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),
      C(java_divide($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),
      C(java_module($t1,$t2),$v,$s) -> C($t1,$v,$s) && C($t2,$v,$s),

      C(java_plus($t1),$v,$s) -> C($t1,$v,$s),
      C(java_minus($t1),$v,$s) -> C($t1,$v,$s),
      C(java_increment($t1),$v,$s) -> C($t1,$v,$s),
      C(java_decrement($t1),$v,$s) -> C($t1,$v,$s),
      C(java_postfix_increment($t1),$v,$s) -> C($t1,$v,$s),
      C(java_postfix_decrement($t1),$v,$s) -> C($t1,$v,$s),

      C(java_negate($t1),$v,$s) -> C($t1,$v,$s),
      C(java_not($t1),$v,$s) -> C($t1,$v,$s),


      C(java_class_field_primary_prefix($t1),$v,$s) -> true,

      C(java_cast($t1,$t2),$v,$s) -> C($t2,$v,$s),
     
      C(java_dot(java_this),$v,$s) -> true,

      C(java_dot(java_new_array($t1,$t2)),$v,$s) -> C($t2,$v,$s),

      C(java_dot(java_new($t1,$t2,$t3)),$v,$s) -> C($t2,$v,$s) && CB(t3,$v,$s),

      C(java_dot(java_new($t1,$t2)),$v,$s) -> C($t2,$v,$s),

      C(java_dot($t1),$v,$s) -> C($t1,$v,$s),

      C(java_new($t1,$t2),$v,$s) -> C($t2,$v,$s),

      C(java_new($t1,$t2,t3),$v,$s) -> C($t2,$v,$s) && CB(t3,$v,$s),

      C(java_array_dim($t1,$t2),$v,$s) -> C($t1,$v,$s),

      C(java_array_initializer($t1,$t2),$v,$s) -> C($t1,$v,$s),

      C(empty_list,$v,$s) -> true,

      #
      # !!1 - this is the main rule.
      C(java_name([$x]),$v,$s) -> C1(java_name([$x]),$v,$s,$x),

      C1(java_name([$v]),$v,$s,$x) ->  false // synchronizeViolationDiscovered($v,$x),

      C1(java_name([$a,$b]),$v,$s,$x) -> true,

      C1(java_name([$a]),$v,$s,$x) [| $a!=$v |] -> true,

      #
      # complex names are not detected.
      #
      C(java_name([$x,$y]),$v,$s) -> true,

      C(java_identifier($x),$v,$s) [| java_identifier($x) != $v |] -> true,

      C(java_labeled_statement($label,$t),$v,$s) -> C($t,$v,$s),

      C(java_integer_literal($x),$v,$s) -> true,

      C(java_floating_point_literal($x),$v,$s) -> true,

      C(java_character_literal($x),$v,$s) -> true,

      C(java_string_literal($x),$v,$s) -> true,

      C(true,$v,$s) -> true,

      C(false,$v,$s) -> true,

      C(java_null, $v, $s) -> true,

      CB([$x:$y],$v,$s) -> CB1($x,$v,$s) && CB($y,$v,$s),

      CB([],$v,$s) -> true,

      CB1(java_initializer($x),$v,$s) -> C($x,$v,FromSuperClass.$s),

      CB1(java_static_initializer($x),$v,$s) -> C($x,$v,FromSuperClass.$s),


      CB1(
             java_method_declaration(
                    $name, 
                    $attributes, 
                    $result_type,         
                    $formal_parameters,
                    $exceptions,
                    $method_body),
             $v, $s) -> C($x,$v,FromSuperClass.$s),


      CB1(java_constructor_declaration($name,$protection,$parameters,$exceptions,$body), $v, $s) -> C($body,$v,FromSuperClass.$s),


      CB1(java_field_declaration($properties_list, $type, $variable_declarator_list),$v,$s) -> true,

      CB1(java_semicolon, $v, $s) -> true,


      CB1(
          java_class_declaration($name,$properties,$extend_classes,$implements_classes,$body),
          $v,$s
                    )     ->  CB2($body,$v,FromSuperClass.$s),

      CB2($x,$v,$s) -> CB1($x,$v,FromSuperClass.$s)


    ),
    FirstTop
);

