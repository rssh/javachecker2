/**
 * TODO:
 *  recheck <left/right> in exceptions
 *
 * C# parser TermWare framework.
 * last modified by Ruslan Shevchenko <Ruslan@Shevchenko.Kiev.UA>
 *
 *
 *
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  static = false;
}

PARSER_BEGIN(CSharpParser)

package ua.gradsoft.parsers.cs;

import java.util.*;

import ua.kiev.gradsoft.TermWare.*;
import ua.kiev.gradsoft.TermWare.exceptions.*;
import ua.kiev.gradsoft.TermWare.parsers.utils.*;


/**
 *Parser for Java-1.4 
 *<pre>
 *!@checker:disable(All)!@
 *</pre>
 **/
public class CSharpParser implements IParser
{

    public static void main (String [] args) {
        CSharpParser parser;
        String filename = null;
        long initTime = 0;
        long parseTime = 0;
        long startTime = 0;
        long stopTime = 0;
        if (args.length == 0)
        {
            System.out.println("C# Parser Version 1.0:  Reading from standard input . . .");
            parser = new CSharpParser(System.in);
        } else if (args.length == 1)
        {
            filename = args[0];
            System.out.println("C# Parser Version 1.0:  Reading from file " + filename + " . . .");
            try
            {
                startTime = System.currentTimeMillis();
                parser = new CSharpParser(new java.io.FileInputStream(filename));
                stopTime = System.currentTimeMillis();
                initTime = stopTime - startTime;
            } catch (java.io.FileNotFoundException e)
            {
                System.out.println("C# Parser Version 1.0:  File " + filename + " not found.");
                return;
            }
        } else
        {
            System.out.println("TermWare C# Parser ");
            return;
        }
        try
        {
            startTime = System.currentTimeMillis();
            ITerm t = parser.compilation_unit();
            stopTime = System.currentTimeMillis();
            parseTime = stopTime - startTime;
            System.out.println("C# Parser Version 1.0: ");
            System.out.println("   C# program parsed " + filename + " successfully in " + (initTime + parseTime) + " ms.");
            System.out.println("      parser initialization time was " + initTime + " ms.");
            System.out.println("      parser parse time was " + parseTime + " ms.");
            System.out.println("result term is:");
            t.print(System.out); 
        } catch (ParseException e)
        {
            System.out.println(e.getMessage());
            System.out.println("C# Parser Version 1.0:  Encountered errors during parse.");
        } catch (TermWareException ex) {
            System.out.println(ex.getMessage());
        }
       
    }

    public ITerm readTerm() throws TermWareException
    {
     try {
      ITerm t=compilation_unit();
      eof_=true;
      return t;
     }catch(ParseException ex){
      throw new TermWareParseException(ex.getMessage());
     }
    }

    public boolean eof() { return eof_; }

    public static final ITerm createAtom(String name)
     { return ITermFactory.createAtom(name); }

    public static final ITerm cons(ITerm t1, ITerm t2)
                                        throws TermWareException
     { 
       if (t2==null) return t1;
       return ITermFactory.createComplexTerm2("cons",t1,t2); 
     }

    
    public static final ITerm createTerm(String name, ITerm value)
                                        throws TermWareException
     { return ITermFactory.createComplexTerm1(name,value); }

    public static final ITerm createTerm(String name, String value)
                                        throws TermWareException
     { return createTerm(name,ITermFactory.createString(value)); }

    public static final ITerm createTerm(String name, ITerm v1, ITerm v2)
                                        throws TermWareException
     { return ITermFactory.createComplexTerm2(name,v1,v2); }

    public static final ITerm createTerm(String name, ITerm v1, int v2)
                                        throws TermWareException
     { return ITermFactory.createComplexTerm2(name,v1,ITermFactory.createInt(v2)); }

 
    public static final ITerm createTerm(String name, ITerm v1, ITerm v2, ITerm v3)
                                        throws TermWareException
     { return ITermFactory.createComplexTerm3(name,v1,v2,v3); }

    public static final ITerm createTerm(String name, ITerm v1, ITerm v2, 
                                                      ITerm v3, ITerm v4)
                                        throws TermWareException
     { return ITermFactory.createComplexTerm4(name,v1,v2,v3,v4); }


    public static final ITerm createTerm(boolean v) 
     { return ITermFactory.createBoolean(v); }


    public static final ITerm createTerm(String name, ITerm v1, ITerm v2, 
                                                      ITerm v3, ITerm v4, 
                                                      ITerm v5)
                                                        throws TermWareException
     { return ITermFactory.createComplexTerm5(name,v1,v2,v3,v4,v5); }


    public static final ITerm createTerm(String name, ITerm v1, ITerm v2, 
                                                      ITerm v3, ITerm v4, 
                                                      ITerm v5, ITerm v6)
                                                        throws TermWareException
     { return ITermFactory.createComplexTerm6(name,v1,v2,v3,v4,v5,v6); }


    public static final ITerm createList(List l) throws TermWareException
    {
     if (l==null || l.size()==0) {
       return createAtom("empty_list");
     }
     return TermHelper.createList(l);
    }

    public static final ITerm createList(ITerm t) throws TermWareException
    {
     return createTerm("cons",t,ITermFactory.createNIL());
    }


    public static final ITerm createBinaryTree(List lop, List lt)
                                                 throws TermWareException
    {
     Iterator opIt=lop.iterator();
     Iterator tIt=lt.iterator();
     ITerm current = (ITerm)tIt.next();
     return createBinaryTree(current,opIt,tIt);
    }

    private static final ITerm createBinaryTree(ITerm t, Iterator opIt,  Iterator tIt)
                                                 throws TermWareException
    {
     if (opIt.hasNext() && tIt.hasNext()) {
       String op=(String) opIt.next();
       ITerm t1=(ITerm)tIt.next();
       return createTerm(op,t,createBinaryTree(t1,opIt,tIt));
     }else{
       return t;
     }
    }

    public static final ITerm createBinaryTree(String op, List lt)
                                                 throws TermWareException
    {
     Iterator tIt=lt.iterator();
     ITerm current = (ITerm)tIt.next();
     return createBinaryTree(current,op,tIt);
    }

    private static final ITerm createBinaryTree(ITerm t, String op,  Iterator tIt)
                                                 throws TermWareException
    {
     if (tIt.hasNext()) {
       ITerm t1=(ITerm)tIt.next();
       return createTerm(op,t,createBinaryTree(t1,op,tIt));
     }else{
       return t;
     }
    }


    public static final ITerm createJavaName(List l)
                                  throws TermWareException
    {
     return createTerm("java_name",createList(l));
    }

    public static final ITerm createJavaName(ITerm t1, ITerm t2, ITerm t3)
                                                 throws TermWareException
    {
     return createTerm("java_name",
                      createTerm("cons",t1,createTerm("cons",t2,t3)));
    }

    public static final ITerm createJavaName(String s1, String s2, String s3)
                                                          throws TermWareException
    {
     return createJavaName(createTerm("java_identifier",s1),
                           createTerm("java_identifier",s2),
                           createTerm("java_identifier",s3));
    }
  
    public static final ITerm createBoolean(boolean v)
    {
     return ITermFactory.createBoolean(v);
    }  

    

    public final ITerm createIntegerLiteral(String v, int line) throws TermWareException
    {
    // TODO: transform from string ?
     ITerm retval = createTerm("java_integer_literal",v);
     retval=TermHelper.setAttribute(retval,"line",line);
     retval=TermHelper.setAttribute(retval,"file",getInFname());
     return retval;
    }  


    public final ITerm createFloatingPointLiteral(String v, int line) throws TermWareException
    {
    // TODO: transform from string ?
     ITerm retval=createTerm("java_floating_point_literal",v);
     retval=TermHelper.setAttribute(retval,"line",line);
     retval=TermHelper.setAttribute(retval,"file",getInFname());
     return retval;
    }  


    public final ITerm createCharacterLiteral(String v, int line) throws TermWareException
    {
    // TODO: transform to 'real string' ?
     ITerm retval=createTerm("java_character_literal",v);
     retval=TermHelper.setAttribute(retval,"line",line);
     retval=TermHelper.setAttribute(retval,"file",getInFname());
     return retval;
    }  


    public final ITerm createStringLiteral(String v, int line) throws TermWareException
    {
    // TODO: transform to 'real string' ?
     ITerm retval=createTerm("java_string_literal",v);
     retval=TermHelper.setAttribute(retval,"line",line);
     retval=TermHelper.setAttribute(retval,"file",getInFname());
     return retval;
    }  

    public static final ITerm nil()
     { return ITermFactory.createNil(); }

    public  String  getInFname()
     { return inFname_; }

    public  void    setInFname(String inFname)
     { inFname_=inFname; }

    public  IEnv    getEnv()
     { return env_; }

    public  void    setEnv(IEnv env)
     { env_=env; }

    public  ITerm   getArgs()
     { return args_; }

    void    setArgs(ITerm args)
     { args_=args; }

    private ITerm   args_ = null;
    private IEnv    env_ = null;
    private String  inFname_ = null;
    private boolean eof_=false;
}

PARSER_END(CSharpParser)


/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ADD: "add" >
| < ASSEMBLY: "assembly" >
| < BASE: "base" >
| < BOOL: "bool" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CHECKED: "checked" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DECIMAL: "decimal" >
| < DELEGATE: "delegate" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EVENT: "event" >
| < EXPLICIT: "explicit" >
| < EXTERN: "extern" >
| < FALSE: "false" >
| < FIELD: "field" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < FOREACH: "foreach" >
| < GET: "get" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLICIT: "implicit" >
| < IN: "in" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < INTERNAL: "internal" >
| < LOCK: "lock" >
| < LONG: "long" >
| < MODULE: "module" >
| < METHOD: "method" >
| < NEW: "new" >
| < NAMESPACE: "namespace" >
| < NULL: "null" >
| < OBJECT: "object" >
| < OPERATOR: "operator" >
| < OVERRIDE: "override" >
| < OUT: "out" >
| < PACKAGE: "package">
| < PARAM: "param">
| < PARAMS: "params">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PROPERTY: "property" >
| < PUBLIC: "public" >
| < READONLY: "readonly" >
| < REF: "ref" >
| < RETURN: "return" >
| < REMOVE: "remove" >
| < SBYTE: "sbyte" >
| < SEALED: "sealed" >
| < SET: "set" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRING: "string" >
| < STRUCT: "struct" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < TYPE: "type" >
| < TYPEOF: "typeof" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < VIRTUAL: "virtual" >
| < WHILE: "while" >
| < UNCHECKED: "unchecked" >
| < UINT: "uint" >
| < USHORT: "ushort" >
| < ULONG: "ulong" >
| < USING: "using" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
}


/*****************************************
 * THE CSHARP GRAMMAR STARTS HERE *
 *****************************************/

/**
 *
 * CompilationUnit - translated to "csharp_compilation_unit(using,attrs,name_declarations)"
 * where
 * <ul>
 *  <li> tp - using directive or nil </li>
 *  <li> li - list of attributes or nil </li>
 *  <li> td - list of type declarations or nil </li>
 * </ul>
 */

ITerm compilation_unit() throws TermWareException :
{
 ITerm tusing=nil();
 ITerm tattributes=nil();
 ITerm tnmd=nil();
}
{
 
  [ tusing=using_directives() ] 
  [  tattributes=attributes() ]
  [ tnmd=namespace_member_declarations() ]

  { return createTerm("csharp_compilation_unit",tusing,tattributes,tnmd); }

}

ITerm using_directives() throws TermWareException :
{
ITerm t=nil();
ITerm tc=nil();
LinkedList l=new LinkedList();
}
{
   (tc=using_directive() { l.add(tc); } )+
  { 
   return createList(l);
  }
}

ITerm using_directive() throws TermWareException :
{
 ITerm t1=nil();
 ITerm t2=nil();
}
{
  "using" (
        LOOKAHEAD(2) 
        (
         t1=identifier() "=" t2=namespace_or_type_name()
        )
            { return createTerm("csharp_namespace_assign",t1,t2); }
         |
        ( t1=namespace_or_type_name() ";" )
            { return createTerm("csharp_using_directive",t1); }            
  )

}




ITerm namespace_or_type_name() throws TermWareException :
{
 LinkedList l=new LinkedList();
 ITerm t=null;
}
{
 t=identifier() {l.add(t); } (LOOKAHEAD(2) "." t=identifier() { l.add(t); } )*
  { return createTerm("csharp_name",createList(t)); }
}


/**
 *<pre>
 * TypeDeclaration :
 *</pre>
 */
ITerm type_declaration() throws TermWareException :
{
 ITerm t=null;
 ITerm ta=nil();
 ITerm tm=nil();
 ITerm retval=null;
}
{
 [ ta=attributes() ] [ tm=modifiers() ]
 t=unmodified_type_declaration()
  {
   String termName=null;
   if (t.getName().equals("unmodified_class_declaration")) {
                   // TODO: get subterms(t) instead t
     retval=createTerm("class_declaration",ta,tm,t); 
   }else if(t.getName().equals("unmodified_struct_declaration")) {
     retval=createTerm("struct_declaration",ta,tm,t);
   }else if(t.getName().equals("unmodified_interface_declaration")) {
     retval=createTerm("interface_declaration",ta,tm,t);
   }else if(t.getName().equals("unmodified_enum_declaration")) {
     retval=createTerm("enum_declaration",ta,tm,t);
   }else if(t.getName().equals("unmodified_delegate_declaration")) {
     retval=createTerm("delegate_declaration",ta,tm,t);
   }else{
     throw new AssertException("impossible unmodified_type_declaration");
   }
  }
}

ITerm unmodified_type_declaration() throws TermWareException :
{
 ITerm t;
}
{
  t=unmodified_class_declaration()
    { return t; }
  |
  t=unmodified_struct_declaration()
    { return t; }
  |
  t=unmodified_interface_declaration()
    { return t; }
  |
  t=unmodified_enum_declaration()
    { return t; }
  |
  t=unmodified_delegate_declaration()
    { return t; }
}


ITerm unmodified_class_declaration() throws TermWareException :
{
 ITerm ti=nil();
 ITerm tbs=nil();
 ITerm tbd=nil();
 Token commentToken=null;
}
{
   "class" ti=identifier() [ tbs=class_base() ] 
                             tbd=class_body() 
                           [ ";" ]
   { return createTerm("unmodified_class_declaration",ti,tbs,tbd); }
  
}


ITerm modifiers() throws TermWareException :
{
 LinkedList l = new LinkedList();
 ITerm t=null;
}
{
 (LOOKAHEAD(2) modifier() { l.add(t); } )+
 { return createList(l); }
}

ITerm modifier() throws TermWareException :
{
}
{
 "new"
   { return createAtom("csharp_new"); }
 |
 "public"
    { return createAtom("csharp_public"); }
  |
 "protected"
    { return createAtom("csharp_protected"); }
  |
 "internal"
    { return createAtom("csharp_internal"); }
  |
 "private"
    { return createAtom("csharp_private"); }
  |
 "abstract"
    { return createAtom("csharp_abstract"); }
  |
 "sealed" 
    { return createAtom("csharp_sealed"); }
  |
 "static"
    { return createAtom("csharp_static"); }
  |
 "readonly"
    { return createAtom("csharp_readonly"); }
  |
 "volatile"
    { return createAtom("csharp_volatile"); }
  |
 "virtual"
    { return createAtom("csharp_virtual"); }
  |
 "override"
    { return createAtom("csharp_override"); }
  |
 "extern" 
    { return createAtom("csharp_extern"); }
}

ITerm class_base() throws TermWareException :
{
 Token tko=null;
 Token tks=null;
 ITerm t1=null;
 ITerm t2=null;
}
{
 ":" ( ( ( tko="object" | tks="string") ["," t1=interface_type_list()] ) | t2=interface_type_list() )
 {
  if (tko!=null) {
    return cons(createAtom("csharp_object"),t1);
  }else if (tks!=null) {
    return cons(createAtom("csharp_string"),t1);
  }else{
    return t2;
  }
 }
}

ITerm class_type() throws TermWareException :
{
 ITerm t;
}
{
  t=type_name()
   { return t; }
 |
  "object"
   { return createAtom("csharp_object"); }
 |
  "string"
   { return createAtom("csharp_string"); }
}

ITerm class_body() throws TermWareException :
{
 LinkedList l = new LinkedList();
 ITerm t=null;
}
{
  "{" ( t=class_member_declaration() {l.add(t);} )* "}"
  { return createList(l); }
}





ITerm class_member_declaration() throws TermWareException:
{
 ITerm t=null;
 ITerm ta=nil();
 ITerm tm=nil();
 ITerm retval=nil();
}
{
[LOOKAHEAD(2) ta=attributes() ] [LOOKAHEAD(2) tm=modifiers() ]
(
  t=unmodified_constant_declaration()
      { retval=createTerm("constant_declaration",ta,tm,t); }
| 
  LOOKAHEAD(3)
  t=unmodified_field_declaration()
      { retval=createTerm("field_declaration",ta,tm,t); }
|
  LOOKAHEAD(3)
  t=unmodified_method_declaration()
      { retval=createTerm("method_declaration",ta,tm,t); }
|
  LOOKAHEAD(3)
  t=unmodified_property_declaration()
      { retval=createTerm("property_declaration",ta,tm,t); }
|
  t=unmodified_event_declaration()
      { retval=createTerm("event_declaration",ta,tm,t); }
|
  LOOKAHEAD(3)
  t=unmodified_indexer_declaration()
      { retval=createTerm("indexer_declaration",ta,tm,t); }
|
  LOOKAHEAD(2)
  t=unmodified_operator_declaration()
      { retval=createTerm("operator_declaration",ta,tm,t); }
|
  LOOKAHEAD(2)
  t=unmodified_constructor_declaration()
      { retval=createTerm("constructor_declaration",ta,tm,t); }
//  - we put this inside constructor_declaration
//|
// t=static_constructor_declaration()
//   { return t; }
|
 t=destructor_declaration()
      { retval=createTerm("destructor_declaration",ta,tm,t); }
|
 t=unmodified_type_declaration()
      { retval=createTerm("type_declaration",ta,tm,t); }
)
 {return retval;}
}

ITerm attributes() throws TermWareException :
{
 ITerm t1=nil();
 ITerm t2=null;
 LinkedList l=new LinkedList();
}
{
  (LOOKAHEAD(2) "[" [ t1=attribute_target() ] t2=attribute_list() "]" 
     { l.add(createTerm("csharp_attribute_section",t1,t2)); t1=nil(); }
  )+
  { return createList(l); }
}

ITerm attribute_list() throws TermWareException :
{
 ITerm t;
 LinkedList l=new LinkedList();
}
{
 t=attribute() { l.add(t); } ( "," t=attribute() {l.add(t);} )*
 { return createList(l); }
}

ITerm attribute() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=nil();
}
{
  t1=type_name() [ t2=attribute_arguments() ]
  { return createTerm("csharp_attribute",t1,t2); }
}

ITerm attribute_target() throws TermWareException :
{
Token tk;
ITerm t;
}
{
 (
  tk="assembly" { t=createAtom("csharp_assemply"); }
 |
  tk="field"   { t=createAtom("csharp_field"); }
 |
  tk="event"  {  t=createAtom("csharp_event"); }
 |
  tk="method"  { t=createAtom("csharp_method"); }
 |
  tk="module"  { t=createAtom("csharp_module"); }
 |
  tk="param"    { t=createAtom("csharp_param"); }
 |
  tk="property" { t=createAtom("csharp_property"); }
 |
  tk="return"   { t=createAtom("csharp_return"); }
 |
  tk="type"      { t=createAtom("csharp_type"); }
 )
 { return t; }
}


ITerm attribute_arguments() throws TermWareException :
{
 ITerm t=nil();
}
{
  "(" [ t=attribute_argument_list() ] ")"
 { return t; }
}

ITerm attribute_argument_list() throws TermWareException :
{
 ITerm t1=nil();
 ITerm t2=nil();
}
{
  [ t1=positional_argument_list() "," ] t2=named_argument_list()
  { return createTerm("csharp_attribute_argument_list",t1,t2); }
}


ITerm positional_argument_list() throws TermWareException :
{
 ITerm t=null;
 LinkedList l=new LinkedList();
}
{
  t=positional_argument() { l.add(t); } (LOOKAHEAD(2) "," t=positional_argument() { l.add(t); } )*
  { return createList(l); }
}

ITerm positional_argument() throws TermWareException :
{
 ITerm t;
}
{
 t=attribute_argument_expression()
  { return t; }
}

ITerm attribute_argument_expression() throws TermWareException :
{
 ITerm t;
}
{
 t=expression()
  { return t; }
}


ITerm namespace_member_declaration() throws TermWareException :
{
 ITerm t;
}
{
 (
  t=namespace_declaration()
  |
  t=type_declaration()
 )
  { return t; }
}


ITerm namespace_member_declarations() throws TermWareException :
{
 ITerm t;
 LinkedList l=new LinkedList();
}
{
 ( t=namespace_declaration() { l.add(t); } )+
  { return createList(t); }
}


ITerm namespace_declaration() throws TermWareException :
{
 ITerm t1;
 ITerm t2;
}
{
  "namespace" t1=qualified_identifier() t2=namespace_body() [ ";" ]
  { return createTerm("csharp_namespace_declaration",t1,t2); }
}

ITerm qualified_identifier() throws TermWareException :
{
 ITerm t1=nil();
 ITerm t2=nil();
 LinkedList l=null;
}
{
 (
  t1=identifier() ( "." t2=identifier() {if (l==null) { l= new LinkedList();} l.add(t2);} )*
 )
 {
  if (l==null) return cons(t1,nil()); else return cons(t1,createList(l)); 
 }
}


ITerm namespace_body() throws TermWareException :
{
 ITerm t1=nil();
 ITerm t2=nil();
}
{
  "{" [t1=using_directives()] [t2=namespace_member_declarations()] "}"
 {  return createTerm("csharp_namespace_body",t1,t2); }
}


ITerm unmodified_interface_declaration() throws TermWareException :
{
 ITerm t1;
 ITerm t2;
 ITerm t3;
}
{
   "interface" t1=identifier() t2=interface_base() t3=interface_body()
  { return createTerm("unmodified_interface_declaration",t1,t2,t3); }
}


ITerm interface_base() throws TermWareException :
{
 ITerm t;
}
{
 ":" t=interface_type_list()
  { return t; }
}

ITerm interface_type_list() throws TermWareException :
{
 ITerm t;
 LinkedList l=new LinkedList();
}
{
 t=interface_type() { l.add(t); } ( "," t=interface_type() { l.add(t); } )*
 { return createList(l); }
}

ITerm interface_type() throws TermWareException :
{
 ITerm t;
}
{
 t=type_name() { return t; }
}


ITerm type_name() throws TermWareException :
{
 ITerm t;
}
{
 t=namespace_or_type_name() { return t; }
}

ITerm interface_body() throws TermWareException :
{
 ITerm t=nil();
}
{
 "{" [ t=interface_member_declarations() ] "}"
 { return t; }
}

ITerm interface_member_declarations() throws TermWareException :
{
 ITerm t;
 LinkedList l=new LinkedList();
}
{
 ( t=interface_member_declaration() {l.add(t);} )+
 { return createList(l); }
}


ITerm interface_member_declaration() throws TermWareException :
{
 ITerm t=null;
}
{
  LOOKAHEAD( [attributes()] ["new"] return_type() identifier() "(" )
  t=interface_method_declaration()
   { return t; }
|
  LOOKAHEAD( [attributes()] ["new"] type() identifier() "{" )
  t=interface_property_declaration()
   { return t; }
|
  LOOKAHEAD( [attributes()] ["new"] "event" )
  t=interface_event_declaration()
   { return t; }
|
  LOOKAHEAD( [attributes()] ["new"] type() "this" )
   t=interface_indexer_declaration()
   { return t; }
}

ITerm interface_method_declaration() throws TermWareException :
{
 ITerm ta=nil();
 Token tkb=null;
 ITerm tb=nil();
 ITerm trt=nil();
 ITerm ti=nil();
 ITerm tf=nil();
}
{
 [ta=attributes()] [tkb="new"] trt=return_type() ti=identifier() "(" [tf=formal_parameter_list() ] ")"
 {
  if (tkb!=null) {
   tb=createAtom("csharp_new");
  } 
  return createTerm("csharp_interface_method_declaration",ta,tb,ti,trt,tf);
 }  
}

ITerm interface_property_declaration() throws TermWareException :
{
 ITerm ta=nil();
 Token tkb=null;
 ITerm tb=nil();
 ITerm trt=nil();
 ITerm ti=nil();
 ITerm tf=nil();
}
{
 [ta=attributes()] [tkb="new"] trt=return_type() ti=identifier() "{" tf=interface_accessors() "}" 
 {
  if (tkb!=null) {
   tb=createAtom("csharp_new");
  } 
  return createTerm("csharp_interface_property_declaration",ta,tb,ti,trt,tf);
 }  
}

ITerm interface_event_declaration() throws TermWareException :
{
 ITerm ta=nil();
 Token tkb=null;
 ITerm tb=nil();
 ITerm tt=nil();
 ITerm ti=nil();
}
{
 [ta=attributes()] [tkb="new"] "event" tt=type() ti=identifier() ";"
 {
  if (tkb!=null) {
   tb=createAtom("csharp_new");
  } 
  return createTerm("csharp_interface_event_declaration",ta,tb,ti,tt);
 }  
}

ITerm interface_indexer_declaration() throws TermWareException :
{
 ITerm ta=nil();
 Token tkb=null;
 ITerm tb=nil();
 ITerm tt=nil();
 ITerm tf=nil();
 ITerm tia=nil();
}
{
 [ta=attributes()] [tkb="new"] tt=type() "this" "[" tf=formal_parameter_list() "]" "{" tia=interface_accessors() "}" 
 {
  if (tkb!=null) {
   tb=createAtom("csharp_new");
  } 
  return createTerm("csharp_interface_indexer_declaration",ta,tb,tt,tf,tia);
 }  
}

ITerm interface_accessors() throws TermWareException :
{
 ITerm ta=nil();
 Token tkget=null;
 Token tkset=null;
}
{
 [ta=attributes()] ( ( tkget="get" ";" [ tkset="set" ";" ] ) | ( tkset="set" ";"  [ tkget="get" ";" ] ) )
 {
  return createTerm("csharp_interface_accessors",ta,ITermFactory.createBoolean(tkget!=null),ITermFactory.createBoolean(tkset!=null));
 }
}

ITerm unmodified_struct_declaration() throws TermWareException :
{
 ITerm ti=null;
 ITerm tsi=nil();
 ITerm tsb=nil();
}
{
 "struct" ti=identifier() [ tsi=struct_interfaces() ] tsb=struct_body() [ ";" ]
 { return createTerm("csharp_unmodified_struct_declaration",ti,tsi,tsb); }
}



ITerm struct_interfaces() throws TermWareException :
{
ITerm t;
}
{
 ":" t=interface_type_list()
 { return t; }
}


ITerm struct_body() throws TermWareException :
{
 ITerm t=nil();
}
{
 "{" [ t=struct_member_declarations() ] "}"
 { return t; }
}

ITerm struct_member_declarations() throws TermWareException :
{
 LinkedList l=new LinkedList();
 ITerm t;
}
{
 ( t=struct_member_declaration() {l.add(t);} )+
 { return createList(l); }
}

ITerm struct_member_declaration() throws TermWareException :
{
 ITerm ta=nil();
 ITerm tm=nil();
 ITerm t;
}
{
 [ ta=attributes() ] [ tm=modifiers() ]
(
 t=unmodified_constant_declaration()
   { t=createTerm("csharp_constant_declaration",ta,tm,t); }
 |
 LOOKAHEAD(3)
 t=unmodified_field_declaration()
   { t=createTerm("csharp_field_declaration",ta,tm,t); }
 |
 LOOKAHEAD(3)
 t=unmodified_method_declaration()
   { t=createTerm("csharp_method_declaration",ta,tm,t); }
 |
 LOOKAHEAD(3)
 t=unmodified_property_declaration()
   { t=createTerm("csharp_property_declaration",ta,tm,t); }
 |
 t=unmodified_event_declaration()
   { t=createTerm("csharp_event_declaration",ta,tm,t); }
 |
 LOOKAHEAD(3)
 t=unmodified_indexer_declaration()
   { t=createTerm("csharp_indexer_declaration",ta,tm,t); }
 |
 LOOKAHEAD(2)
 t=unmodified_operator_declaration()
   { t=createTerm("csharp_operator_declaration",ta,tm,t); }
 |
 t=unmodified_constructor_declaration()
   { t=createTerm("csharp_constructor_declaration",ta,tm,t); }
 //|
 // static_constructor_declaration()
 |
 t=unmodified_type_declaration()
   { t=createTerm("csharp_type_declaration",ta,tm,t); }
)
 { return t; }
}

ITerm unmodified_enum_declaration() throws TermWareException :
{
 ITerm ti;
 ITerm tebs=nil();
 ITerm tebd=nil();
}
{
 "enum" ti=identifier() [tebs=enum_base()] tebd=enum_body() [";"]
  { return createTerm("unmodified_enum_declaration",ti,tebs,tebd); }
}

ITerm enum_modifiers() throws TermWareException :
{
 ITerm t=null;
 LinkedList l=new LinkedList();
}
{
 ( t=enum_modifier() {l.add(t);} )+
 { return createList(l); }
}


ITerm enum_modifier() throws TermWareException :
{
}
{
 "new"   { return createAtom("csharp_new"); }
 |
 "public"  { return createAtom("csharp_public"); }
 |
 "protected" { return createAtom("csharp_protected"); }
 |
 "internal" { return createAtom("csharp_internal"); }
 |
 "private" { return createAtom("csharp_private"); }
}


ITerm enum_base() throws TermWareException :
{
 ITerm t;
}
{
 ":" t=integral_type()
 { return t; }
}


ITerm enum_body() throws TermWareException :
{
 ITerm t=nil();
}
{
 "{" ( "}" | t=enum_member_declarations() [ "," ] "}" )
 { return t; }
}


ITerm enum_member_declarations() throws TermWareException :
{
 ITerm t;
 LinkedList l=new LinkedList();
}
{
 t=enum_member_declaration() {l.add(t);} (LOOKAHEAD(2) "," t=enum_member_declaration() {l.add(t);} )+
 { return createList(t); }
}

ITerm enum_member_declaration() throws TermWareException :
{
 ITerm ta=nil();
 ITerm ti;
 ITerm tce=nil();
}
{
 [ ta=attributes() ] ti=identifier() [ "=" tce=constant_expression() ]
 { return createTerm("csharp_enum_member_declaration",ta,ti,tce); }
}


ITerm unmodified_delegate_declaration() throws TermWareException :
{
 ITerm trt;
 ITerm ti;
 ITerm tf=nil();
}
{
  "delegate" trt=return_type() ti=identifier() "(" [ tf=formal_parameter_list() ] ")" ";"
  { return createTerm("csharp_unmodified_delegate_declararion",ti,trt,tf); }
}


ITerm unmodified_constant_declaration() throws TermWareException :
{
 ITerm tt;
 ITerm tc;
}
{
  "const" tt=type() tc=constant_declarators() ";"
  { return createTerm("csharp_unmodified_constant_declaration",tt,tc); }
}

ITerm constant_declarators() throws TermWareException :
{
 ITerm t;
 LinkedList l=new LinkedList();
}
{
 t=constant_declarator() {l.add(l);} ( "," t=constant_declarator() {l.add(l);} )*
  { return createList(l); }
}

ITerm constant_declarator() throws TermWareException :
{
 ITerm ti;
 ITerm tc;
}
{
 ti=identifier() "=" tc=constant_expression()
  { return createTerm("csharp_constant_declarator",ti,tc); }
}



ITerm unmodified_field_declaration() throws TermWareException :
{
 ITerm tt;
 ITerm tv;
}
{
  tt=type() tv=variable_declarators() ";"
  { return createTerm("csharp_unmodified_field_declaration",tt,tv); }
}

ITerm variable_declarators() throws TermWareException :
{
 ITerm t=null;
 LinkedList l = new LinkedList();
}
{
  t=variable_declarator() {l.add(t);} ( "," t=variable_declarator() {l.add(t);} )*
  { return createList(l); }
}



ITerm variable_declarator() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
}
{
  t1=identifier() [ "=" t2=variable_initializer() ]
  {
   if (t2==null) t2=nil();
   return createTerm("csharp_variable_declarator",t1,t2);
  }
}


ITerm variable_initializer() throws TermWareException :
{
 ITerm t;
}
{
  t=array_initializer()
   { return t; }
|
  t=expression()
   { return t; }
}

ITerm array_initializer() throws TermWareException :
{
 ITerm t1=nil();
 ITerm t2=nil();
 LinkedList l=new LinkedList();
}
{
  "{" (LOOKAHEAD(2) ("}") | ([LOOKAHEAD(2) t1=variable_initializer() {l.add(t1);} ( LOOKAHEAD(2) "," t2=variable_initializer() {l.add(t2);} )* ] [ "," ] "}"))
      { return createTerm("csharp_array_initializer",createList(l)); }
}

ITerm unmodified_method_declaration() throws TermWareException:
{
 ITerm t1;
 ITerm t2;
}
{
 t1=unmodified_method_header() t2=method_body()
  { return createTerm("csharp_unmodified_method_declaration",
                       t1.getSubtermAt(1),
                       t1.getSubtermAt(0),
                       t1.getSubtermAt(2),
                       t2);
  }
}

ITerm unmodified_method_header() throws TermWareException :
{
 ITerm tr;
 ITerm ti;
 ITerm tf=nil(); 
}
{
 tr=return_type() ti=member_name() "(" [tf=formal_parameter_list()] ")"
  { return createTerm("csharp_unmodified_method_header",tr,ti,tf); }
}

ITerm formal_parameter_list() throws TermWareException :
{
 LinkedList l=new LinkedList();
 ITerm t=null;                                     
}
{
 t=formal_parameter() {l.add(t);} ( "," t=formal_parameter() {l.add(t);} )*
 { return createList(l); }
}

ITerm formal_parameter() throws TermWareException :
{
 ITerm ta=nil();
 ITerm tpm=nil();
 ITerm tt=nil();
 ITerm ti=nil();
 ITerm tat=nil();
}
{
 [ ta=attributes() ] ( ( [tpm=parameter_modifier()] tt=type() ti=identifier() ) | ("params" tat=array_type() ti=identifier()) )
 {
  if (!tt.isNil()) {
    return createTerm("csharp_fixed_parameter",ta,tpm,ti,tt);
  }else{
    return createTerm("csharp_parameter_array",ta,ti,tat);
  }
 }
}

ITerm parameter_modifier() throws TermWareException :
{
}
{
 "ref" { return createAtom("csharp_ref"); }
 |
 "out" { return createAtom("csharp_out"); }
}


ITerm member_name() throws TermWareException :
{
 ITerm t1;
 ITerm t2;
}
{
 LOOKAHEAD(2)
 t1=identifier()  { return createTerm("csharp_member_name",t1); }
 |
 t1=interface_type() "." t2=identifier()
                  { return createTerm("csharp_member_name",t1,t2); }
 
}


ITerm method_body() throws TermWareException :
{
 ITerm t;
}
{
 t=block() ";"
  { return t; }
}


ITerm array_type() throws TermWareException :
{
 ITerm t1;
 ITerm t2;
}
{
  t1=type() t2=rank_specifiers()
 { return createTerm("csharp_array_type",t1,t2); }
}

ITerm rank_specifiers() throws TermWareException :
{
 ITerm t;
 LinkedList l=new LinkedList();
}
{
  ( t=rank_specifier() {l.add(t);} )+
 { return createList(l); }
}

ITerm rank_specifier() throws TermWareException :
{
 ITerm t=ITermFactory.createInt(0);
}
{
  "[" [ t=dim_separators() ] "]"
  { return t; }
}

ITerm dim_separators() throws TermWareException :
{
 int n=0;
}
{
  ( "," {++n;} )+
  { return ITermFactory.createInt(n); }
}



ITerm unmodified_property_declaration() throws TermWareException :
{
 ITerm t1;
 ITerm t2;
 ITerm t3;
}
{
 t1=type() t2=member_name() "{" t3=accessor_declarations() "}"
 { return createTerm("csharp_unmodified_property_declaration",t1,t2,t3); }
}

ITerm accessor_declarations() throws TermWareException :
{
 ITerm ta=nil();
 ITerm tget=nil();
 ITerm tset=nil();
}
{
 [ ta=attributes() ] ( ("get" tget=accessor_body() [ "set" tset=accessor_body() ] ) 
                   |
                    ("set" tset=accessor_body() [ "get" tget=accessor_body() ] )
                  )
  { return createTerm("csharp_accessor_declarations",ta,tget,tset); }
}


ITerm accessor_body() throws TermWareException :
{
 ITerm t;
}
{
 t=block() ";"
  { return t; } 
}



ITerm unmodified_event_declaration() throws TermWareException :
{
 ITerm tt=nil();
 ITerm tvd=nil();
 ITerm tmn=nil();
 ITerm tead=nil();
}
{
 "event" tt=type() (LOOKAHEAD(2) tvd=variable_declarators() | ( tmn=member_name() "{" tead=event_accessor_declarations() "}" ) )
 {
  if (!tvd.isNil()) {
    return createTerm("csharp_event_variable_declarators",tt,tvd);
  }else{
    return createTerm("csharp_event_member_declarators",tt,tmn,tead);
  }
 }
}

ITerm event_accessor_declarations() throws TermWareException :
{
 ITerm ta=nil();
 ITerm tadd=nil();
 ITerm trmv=nil();                    
}
{
 [ ta=attributes() ] ( ("add" tadd=accessor_body() [ "remove" trmv=accessor_body() ] ) 
                   |
                    ("remove" trmv=accessor_body() [ "add" tadd=accessor_body() ] )
                  )
 {
  return createTerm("csharp_event_accessor_declarations",ta,tadd,trmv);
 }
}




ITerm unmodified_constructor_declaration() throws TermWareException :
{
 ITerm t1=nil();
 ITerm t2=nil();
}
{
 t1=constructor_declarator() t2=constructor_body() 
 { return createTerm("csharp_unmodified_constructor_declarator",t1,t2); }
}

ITerm constructor_declarator() throws TermWareException :
{
 ITerm ti;
 ITerm tf=nil();
 ITerm tci=nil();
}
{
 ti=identifier() "(" [ tf=formal_parameter_list() ] ")" [ tci=constructor_initializer() ]
 { return createTerm("csharp_constructor_declarator",ti,tf,tci); }
}




/**
 *get constructor initializer
 */
ITerm constructor_initializer() throws TermWareException :
{
 Token tkbase=null;
 Token tkthis=null;
 ITerm tal=nil();
}
{
 ":" ( tkbase="base" | tkthis="this" ) "(" [ tal=argument_list() ] ")"
 {
   if (tkbase!=null) {
     return createTerm("csharp_base_constructor_initializer",tal);
   }else{
     return createTerm("csharp_this_constructor_initializer",tal);
   }
 }
}

ITerm constructor_body() throws TermWareException :
{
 ITerm t;
}
{
 t=block() ";"
  { return t; }
}



ITerm destructor_declaration() throws TermWareException :
{
 ITerm ta=nil();
 ITerm tm=nil();
 ITerm ti;
 ITerm tb;
}
{
 [ta=attributes()] [tm=modifiers()] "~" ti=identifier() tb=destructor_body() 
  { return createTerm("csharp_desctructor_declaration",ta,tm,ti,tb); }
}


ITerm destructor_body() throws TermWareException :
{
 ITerm t;
}
{
 t=block() ";"
  { return t; }
}


ITerm argument_list() throws TermWareException :
{
 ITerm t;
 LinkedList l=new LinkedList();
}
{
  t=argument() {l.add(t);} ( "," t=argument() {l.add(l);} )+
  { return createList(l); }
}

ITerm argument() throws TermWareException :
{
 ITerm t;
}
{
  t=expression()
    {return t;}
 |
  "ref" t=variable_reference()
    { return createTerm("csharp_ref",t); }
 |
  "out" t=variable_reference()
    { return createTerm("csharp_out",t); }
}





/*
 * Type, name and expression syntax follows.
 */

ITerm type() throws TermWareException :
{
 ITerm t1=null;
 Token tko=null;
 Token tks=null;
 ITerm t2=null;
}
{                                     
 ( t1=type_name()
  |
   t1=simple_type()
  |
   tko="object"
  |
   tks="string"
                  ) [LOOKAHEAD(2) "[" [ t2=dim_separators() ] "]" ]
  {
   if (tko!=null) {
     t1=createAtom("csharp_object");
   }else if(tks!=null) {
     t1=createAtom("csharp_string");
   }
   if (t2==null) {
     return t1;
   }else{
     return createTerm("csharp_array_type",t1,t2);
   }
  }
}

ITerm simple_type()  throws TermWareException :
{
 ITerm t;
}
{
  "bool"
    { return createAtom("csharp_bool"); }
|
  t=numeric_type() { return t; }
}

ITerm numeric_type()  throws TermWareException :
{
 ITerm t;
}
{
  t=integral_type()
    { return t; }
  |
  t=floating_point_type()
    { return t; }
  |
  "decimal"
    { return createAtom("csharp_decimal"); }
}

ITerm integral_type()  throws TermWareException :
{
}
{
  "sbyte"
    { return createAtom("csharp_sbyte"); }
|
  "byte"
    { return createAtom("csharp_byte"); }
|
  "short"
    { return createAtom("csharp_short"); }
|
  "ushort"
    { return createAtom("csharp_ushort"); }
|
  "int"
    { return createAtom("csharp_int"); }
|
  "uint"
    { return createAtom("csharp_uint"); }
|
  "long"
    { return createAtom("csharp_long"); }
|
  "ulong"
    { return createAtom("csharp_ulong"); }
|
  "char"
    { return createAtom("csharp_char"); }
}

ITerm floating_point_type()  throws TermWareException :
{}
{
  "float"
    { return createAtom("csharp_float"); }
|
  "double"
    { return createAtom("csharp_double"); }
}

ITerm return_type() throws TermWareException :
{
ITerm t;
}
{
  "void"
  { return createAtom("csharp_void"); }
|
  t=type()
  { return t; }
}


ITerm named_argument_list() throws TermWareException :
{
 ITerm t;
 LinkedList l=new LinkedList();
}
{
  t=named_argument() {l.add(t);} ( "," t=named_argument() {l.add(t);} )*
  { return createList(l); }
}

ITerm named_argument() throws TermWareException :
{
 ITerm t1;
 ITerm t2;
}
{
  t1=identifier() "=" t2=expression()
  { return createTerm("csharp_named_argument",t1,t2); }
}


ITerm unmodified_indexer_declaration() throws TermWareException :
{
 ITerm tt;
 ITerm tit=nil();
 ITerm tfp=nil();
}
{
  tt=type() [ tit=interface_type() "." ] "this" "[" tfp=formal_parameter_list() "]"
  { return createTerm("csharp_unmodified_indexer_declaration",tt,tit,tfp); }
}


ITerm unmodified_operator_declaration() throws TermWareException :
{
 ITerm tt=nil();
 Token tke=null;
 Token tki=null;
 ITerm tcast=nil();
 ITerm top=nil();
 ITerm arg1t=nil();
 ITerm arg1i=nil();
 ITerm arg2t=nil();
 ITerm arg2i=nil(); 
 ITerm operator_mode=nil();
}
{
  tt=type() [ tke="explicit" | tki="implicit" ] "operator" ( tcast=type() | top=operator_name() ) "(" arg1t=type() arg1i=identifier() [ "," arg2t=type() arg2i=identifier() ] ")"
  {
   if (!tcast.isNil()) {
      if (tke!=null) {
        operator_mode=createAtom("csharp_explicit");
      }else if(tki!=null) {                                                     
        operator_mode=createAtom("csharp_implicit");
      }
      return createTerm("csharp_unmodified_conversion_operator_declaration",tcast,tt,operator_mode,arg1t,arg1i);
   }else if (!arg2t.isNil()) {
      return createTerm("csharp_unmodified_binary_operator_declaration",top,tt,arg1t,arg1i,arg2t,arg2i);
   }else {
      return createTerm("csharp_unmodified_unary_operator_declaration",top,tt,arg1t,arg1i);
   }
  }
}


ITerm operator_name() throws TermWareException :
{
}
{
 "+"  { return createAtom("csharp_plus"); }
 |
 "-"   { return createAtom("csharp_minus"); }
 |
 "!"    { return createAtom("csharp_logical_not"); }
 |
 "~"    { return createAtom("csharp_bit_not"); }
 |
 "++"    { return createAtom("csharp_increment"); }
 |
 "--"    { return createAtom("csharp_decrement"); }
 |
 "true"  { return createAtom("csharp_true"); }
 |
 "false"  { return createAtom("csharp_false"); }
 |
  "*"     { return createAtom("csharp_multiply"); }
 |
  "/"     { return createAtom("csharp_divide"); }
 |
  "%"      { return createAtom("csharp_module"); }
 |
  "&"      { return createAtom("csharp_bit_and"); }
 |
  "|"      { return createAtom("csharp_bit_or"); }
 |
  "^"      { return createAtom("csharp_bit_negate"); }
 |
  "<<"     { return createAtom("csharp_left_shift"); }
 |
  ">>"     { return createAtom("csharp_right_shift"); }
 |
  "=="     { return createAtom("csharp_equal"); }
 |
  "!="     { return createAtom("csharp_not_equal"); }
 |
  ">"      { return createAtom("csharp_greater"); }
 | 
  "<"       { return createAtom("csharp_less"); }
 |
  "<="      { return createAtom("csharp_less_or_equal"); }
 |
  ">="      { return createAtom("csharp_greater_or_equal"); }
}






/*
 * Expression syntax follows.
 */

ITerm expression() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 ITerm t3=null;
}
{
  t1=conditional_expression()
  [
    t2=assignment_operator() t3=expression()
  ]
  {
   if (t2!=null) return createTerm(t2.getName(),t1,t3);
   else return t1;
  }
}

ITerm assignment_operator() :
{
}
{
  "=" 
    { return createAtom("csharp_assign"); }
  | "*=" 
    { return createAtom("csharp_multiply_assign"); }
  | "/=" 
    { return createAtom("csharp_divide_assign"); }
  | "%=" 
    { return createAtom("csharp_module_assign"); }
  | "+=" 
    { return createAtom("csharp_plus_assign"); }
  | "-=" 
    { return createAtom("csharp_minus_assign"); }
  | "<<=" 
    { return createAtom("csharp_left_shift_assign"); }
  | ">>=" 
    { return createAtom("csharp_right_shift_assign"); }
  | "&=" 
    { return createAtom("csharp_and_assign"); }
  | "^=" 
    { return createAtom("csharp_xor_assign"); }
  |  "|="
    { return createAtom("csharp_or_assign"); }
}

ITerm conditional_expression() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 ITerm t3=null;
}
{
  t1=conditional_or_expression() [ "?" t2=expression() ":" t3=conditional_expression() ]
  {
   if (t2!=null) {
    return createTerm("csharp_conditional_expression",t1,t2,t3);
   }else{
    return t1;
   }
  }
}

ITerm conditional_or_expression() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 LinkedList l=null;
}
{
  t1=conditional_and_expression() ( "||" t2=conditional_and_expression() 
                                   { if (l==null) l=new LinkedList();
                                     l.add(t2);
                                   }
                                )*
  {
   if (t2==null) return t1;
   return createTerm("csharp_logical_or",t1,createBinaryTree("csharp_logical_or",l));
  }
}    

ITerm conditional_and_expression() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 LinkedList l=null;
}
{
  t1=inclusive_or_expression() ( "&&" t2=inclusive_or_expression() 
                              {
                               if (l==null) l=new LinkedList();
                               l.add(t2);
                              }
                             )*
  {
   if (t2==null) return t1;
   return createTerm("java_logical_and",t1,createBinaryTree("csharp_logical_and",l));
  }
}

ITerm inclusive_or_expression() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 LinkedList l=null;
}
{
  t1=exclusive_or_expression() ( "|" t2=exclusive_or_expression() 
                              {
                               if (l==null) l=new LinkedList();
                               l.add(t2);
                              }
                             )*
  {
   if (t2==null) return t1;
   return createTerm("java_or",t1,createBinaryTree("csharp_or",l));
  }
}

ITerm exclusive_or_expression() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 LinkedList l=null;
}
{
  t1=and_expression() ( "^" t2=and_expression() 
                              {
                               if (l==null) l=new LinkedList();
                               l.add(t2);
                              }
                     )*
  {
   if (t2==null) return t1;
   return createTerm("csharp_xor",t1,createBinaryTree("csharp_xor",l));
  }
}


ITerm and_expression() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 LinkedList l=null;
}
{
  t1=equality_expression() ( "&" t2=equality_expression() 
                              {
                               if (l==null) l=new LinkedList();
                               l.add(t2);
                              }
                          )*
  {
   if (t2==null) return t1;
   return createTerm("csharp_and",t1,createBinaryTree("csharp_and",l));
  }
}

ITerm equality_expression() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 LinkedList lt=null;
 LinkedList lo=null;
 String op=null;
}
{
  t1=relational_expression() ( ( "==" { op="csharp_eq"; }  | "!=" { op="csharp_neq"; } ) t2=relational_expression() 
                              {
                               if (lt==null) {
                                  lt=new LinkedList();
                                  lo=new LinkedList();
                               }
                               lt.add(t2);
                               lo.add(op);
                              }
                            )*
  {
   if (t2==null) return t1;
   lt.addFirst(t1);
   return createBinaryTree(lo,lt);
  }
}


ITerm relational_expression() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 String op;                   
 LinkedList lt=null;
 LinkedList lo=null;               
}
{
  t1=shift_expression() ( ( "<" { op="csharp_less"; } 
                          | ">" { op="csharp_greater"; }
                          | "<=" { op="csharp_less_eq"; }
                          | ">=" { op="csharp_greater_eq"; }
                         ) t2=shift_expression() 
                          {
                               if (lt==null) {
                                  lt=new LinkedList();
                                  lo=new LinkedList();
                               }
                               lt.add(t2);
                               lo.add(op);
                          }
                         )*
  {
   if (t2==null) return t1;
   lt.addFirst(t1);
   return createBinaryTree(lo,lt);
  }
}

ITerm shift_expression() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 String op;
 LinkedList lt=null;
 LinkedList lo=null;
}
{
  t1=additive_expression() ( ( "<<" { op="csharp_left_shift"; } 
                             | ">>" { op="csharp_right_shift"; }
                            ) 
                            t2=additive_expression() 
                          {
                               if (lt==null) {
                                  lt=new LinkedList();
                                  lo=new LinkedList();
                               }
                               lt.add(t2);
                               lo.add(op);
                          }
                           )*
  {
   if (t2==null) return t1;
   lt.addFirst(t1);
   return createBinaryTree(lo,lt);
  }
}

ITerm additive_expression() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 String op;
 LinkedList lt=null;
 LinkedList lo=null;
}
{
  t1=multiplicative_expression() ( ( "+" { op="csharp_plus"; } 
                                   | "-" { op="csharp_minus"; }
                                  ) t2=multiplicative_expression() 
                          {
                               if (lt==null) {
                                  lt=new LinkedList();
                                  lo=new LinkedList();
                               }
                               lt.add(t2);
                               lo.add(op);
                          }
                                )*
 {
   if (t2==null) return t1;
   lt.addFirst(t1);
   return createBinaryTree(lo,lt);
 }
}

ITerm multiplicative_expression() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 String op=null;
 LinkedList lt=null;
 LinkedList lo=null;
}
{
  t1=unary_expression() ( ( "*" { op="csharp_multiply"; }
                          | "/" { op="csharp_divide"; }
                          | "%" { op="csharp_module"; }
                         ) t2=unary_expression() 
                          {
                               if (lt==null) {
                                  lt=new LinkedList();
                                  lo=new LinkedList();
                               }
                               lt.add(t2);
                               lo.add(op);
                          }
                       )*
 {
   if (t2==null) return t1;
   lt.addFirst(t1);
   return createBinaryTree(lo,lt);
 }
}

ITerm unary_expression() throws TermWareException :
{
 String op=null;
 ITerm t=null;
}
{
  ( "+" { op="csharp_plus";} 
   | "-" { op="csharp_minus"; } 
   | "*" { op="csharp_multiply"; }
                                  ) t=unary_expression()
   { return createTerm(op,t); }
|
  t=pre_increment_expression()
   { return t; }
|
  t=pre_decrement_expression()
   { return t; }
|
  t=unary_expression_not_plus_minus()
   { return t; }
}

ITerm pre_increment_expression() throws TermWareException :
{
 ITerm t=null;
}
{
  "++" t=primary_expression()
   { return createTerm("csharp_increment",t); }
}

ITerm pre_decrement_expression() throws TermWareException :
{
 ITerm t=null;
}
{
  "--" t=primary_expression()
  { return createTerm("csharp_decrement",t); }
}

ITerm unary_expression_not_plus_minus() throws TermWareException :
{
 String op=null;
 ITerm t=null;
}
{
  ( "~" { op="csharp_negate"; } | "!" { op="csharp_not"; } ) t=unary_expression()
  { return createTerm(op,t); }
|
  LOOKAHEAD(2)
  t=cast_expression()
  { return t; }
|
  t=postfix_expression()
  { return t; }
}


ITerm postfix_expression() throws TermWareException :
{
 String op=null;
 ITerm t;
}
{
  t=primary_expression() [ "++" { op="csharp_postfix_increment";} 
                        | "--" { op="csharp_postfix_decrement";}
                        ]
  {
   if (op==null) return t;
   return createTerm(op,t);
  }
}

ITerm cast_expression() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
}
{
(
  "(" t1=type() ")" t2=unary_expression()
)
 {
  return createTerm("csharp_cast",t1,t2); 
 }
}

ITerm primary_expression() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 LinkedList l=null;
}
{
  t1=primary_prefix() ( LOOKAHEAD(2) t2=primary_suffix() 
                       {
                         if (l==null) l=new LinkedList();
                         l.add(t2);
                       }
                     )*
  {
   if (t2==null) return t1;
   else return createTerm("csharp_primary_expression",t1,createList(l));
  }
}

ITerm primary_prefix() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 Token tk=null;
}
{
  t1=literal()
   { return t1; }
|
  "this"         
   { return createAtom("java_this"); }                         
|
  LOOKAHEAD(2)
  "base" "." tk=<IDENTIFIER>
   { 
    ITerm identifierTerm=createTerm("csharp_identifier",tk.image);
    identifierTerm=TermHelper.setAttribute(identifierTerm,"line",tk.beginLine);
    identifierTerm=TermHelper.setAttribute(identifierTerm,"file",getInFname());
    return createTerm("csharp_base_call",identifierTerm); 
   }
|
  "base" "["  t1=expression_list() "]"
   { 
    return createTerm("csharp_base_indexer",t1); 
   }

|
  "(" t1=expression() ")"
   { return t1; }
|
  t1=allocation_expression()
   { return t1; }
|
  "typeof" t1=return_type()
   { return createTerm("csharp_typeof",t1); }
|
  "checked" "(" t1=expression() ")"
   { return createTerm("csharp_checked",t1); }
|
  "unchecked" "(" t1=expression() ")"
   { return createTerm("csharp_unchecked",t1); }
}

ITerm primary_suffix() throws TermWareException :
{
 ITerm t=null;
 Token tk=null;
}
{
  LOOKAHEAD(2)
  "." "this"
  { return createTerm("csharp_this_access",createAtom("java_this")); }
|
  LOOKAHEAD(2)
  "." "base" 
  { return createTerm("csharp_base_access",createAtom("java_super")); } 

|
  LOOKAHEAD(2)
  "." t=allocation_expression()
  { return createTerm("java_dot",t); }
|
  "[" t=expression_list() "]"
  { return createTerm("csharp_element_access",t); }
|
  "." tk=<IDENTIFIER>
  { 
    ITerm identifierTerm=createTerm("csharp_identifier",tk.image);
    identifierTerm=TermHelper.setAttribute(identifierTerm,"line",tk.beginLine);
    identifierTerm=TermHelper.setAttribute(identifierTerm,"file",getInFname());
    return createTerm("element_access",identifierTerm); 
  }
|
  "(" [ t=argument_list() ] ")"
  { return createTerm("invocation",t); }
}

ITerm literal() throws TermWareException  :
{
 Token tk=null;
 ITerm t=null;
}
{
  tk=<INTEGER_LITERAL>
   { return createIntegerLiteral(tk.image,tk.beginLine); }
|
  tk=<FLOATING_POINT_LITERAL>
   { return createFloatingPointLiteral(tk.image,tk.beginLine); }
|
  tk=<CHARACTER_LITERAL>
   { return createCharacterLiteral(tk.image,tk.beginLine); }
|
  tk=<STRING_LITERAL>
   { return createStringLiteral(tk.image,tk.beginLine); }
|
  t=BooleanLiteral()
   { return t; }
|
  t=NullLiteral()
   { return t; }
}

ITerm BooleanLiteral() :
{}
{
  "true"
  { return createBoolean(true); }
|
  "false"
  { return createBoolean(false); }
}

ITerm NullLiteral() :
{}
{                                   
  "null"
  { return createAtom("csharp_null"); }
}


ITerm expression_list() throws TermWareException :
{
 LinkedList l=null;
 ITerm t1=null;
 ITerm t2=null;
}
{
  t1=expression() ( "," t2=expression() 
                   {
                    if (l==null) l=new LinkedList();
                    l.add(t2);
                   }
                  )*
  {
   if (t2==null) return createList(t1);
   else {
    l.addFirst(t1);
    return createList(l);
   } 
  }
}

ITerm allocation_expression() throws TermWareException:
{           
 ITerm t1=null;
 ITerm t2=nil();
 ITerm t3=nil();
 ITerm t4=nil();
 boolean isArrayAllocation=false;
 boolean isArrayInitializer=false;
}
{
  "new" t1=type() (LOOKAHEAD(2)( "[" t2=expression_list() "]" [LOOKAHEAD(2) t3=rank_specifier() ] [ t4=array_initializer() ] { isArrayAllocation=true; } ) 
                   | ( "(" [t2=argument_list()] ")" )
                   | ( t2=rank_specifier() "{" [t3=variable_initializer_list()] "}" {isArrayInitializer=true;} )
                  )
  {
   if (!isArrayAllocation &&  !isArrayInitializer) {
      return createTerm("csharp_new",t1,t2);
   }else if(isArrayAllocation) {
      return createTerm("csharp_new_array",t1,t2,t3,t4);
   }else if(isArrayInitializer) {
      return createTerm("csharp_new_array_initializer",t1,t2,t3);
   }
  }
}


ITerm constant_expression() throws TermWareException:
{           
 ITerm t=null;
}
{
 t=expression()
  { return t; }
}



ITerm variable_initializer_list() throws TermWareException :
{
 ITerm t;
 LinkedList l=new LinkedList();
}
{
 t=variable_initializer() {l.add(t);} ( ","  t=variable_initializer() {l.add(t);} )*
 { return createList(l); }
}


ITerm variable_reference() throws TermWareException :
{
 ITerm t;
}
{
 t=expression()
  { return t; }
}




/*
 * Statement syntax follows.
 */

ITerm statement() throws TermWareException :
{
 ITerm t=null;
}
{
  LOOKAHEAD(2)
  t=labeled_statement()
  { return t; }
|
  t=block()
  { return t; }
|
  t=empty_statement()
   { return t; }
|
  LOOKAHEAD(2)
  t=expression_statement() 
   { return t; }
|
  t=selection_statement()
   { return t; }
|
  t=iteration_statement()
   { return t; }
|
  t=jump_statement()
   { return t; }
|
  t=try_statement()
   { return t; }
|
  t=checked_statement()
   { return t; }
|
  t=unchecked_statement()
   { return t; }
|
  t=lock_statement()
   { return t; }
|
  t=using_statement()
   { return t; }
|
 t=declaration_statement()
}

ITerm labeled_statement() throws TermWareException :
{
 Token tk;
 ITerm t;
}
{
  tk=<IDENTIFIER> ":" t=statement()
  {
   ITerm identifierTerm=createTerm("csharp_identifier",tk.image);
   identifierTerm=TermHelper.setAttribute(identifierTerm,"line",tk.beginLine);
   identifierTerm=TermHelper.setAttribute(identifierTerm,"file",getInFname());
   return createTerm("csharp_labeled_statement",identifierTerm,t);
  }
}

ITerm block() throws TermWareException : 
{
 LinkedList l=new LinkedList();
 ITerm t=null;
}
{
  "{" ( t=statement() { l.add(t); } )* "}"
  {
   if (t==null) {
    return createAtom("csharp_empty_block");
   }else{
    return createList(l);
   }
  }
}


ITerm local_variable_declaration() throws TermWareException :
{
 ITerm t1;
 ITerm t2;
 ITerm t3=null;
 LinkedList lt=null;
}
{
  t1=type() t2=variable_declarator() 
        ( "," t3=variable_declarator() 
         {
          if (lt==null) lt=new LinkedList();
          lt.add(t3); 
         }
        )*
  {
    ITerm vd;
    if (t3==null) vd=createList(t2);
    else{
      lt.addFirst(t2);
      vd=createList(lt);
    }
    return createTerm("csharp_local_variable_declaration",t1,vd); 
  }
}


ITerm local_constant_declaration() throws TermWareException :
{
 ITerm t1;
 ITerm t2;
 ITerm t3=null;
 LinkedList lt=null;
}
{
  "const" t1=type() t2=constant_declarator() 
        ( "," t3=constant_declarator() 
         {
          if (lt==null) lt=new LinkedList();
          lt.add(t3); 
         }
        )*
  {
    ITerm vd;
    if (t3==null) vd=createList(t2);
    else{
      lt.addFirst(t2);
      vd=createList(lt);
    }
    return createTerm("csharp_local_constant_declaration",t1,vd); 
  }
}



ITerm empty_statement() :
{
}
{
  ";"
  { return createAtom("csharp_empty_statement"); }
}

ITerm expression_statement() throws TermWareException :
{
 ITerm t;
}
{
 t=statement_expression() ";"
 { return t; }
}

ITerm statement_expression() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 ITerm ta=null;
}
{
  t1=pre_increment_expression()
   { return t1; }
|
  t1=pre_decrement_expression()
   { return t1; }
|
  t1=primary_expression()
  [
    "++" { return createTerm("csharp_postfix_increment",t1); }
  |
    "--" { return createTerm("csharp_postfix_decrement",t1); }
  |
    ta=assignment_operator() t2=expression()
    { return createTerm(ta.getName(),t1,t2); }
  ]
  { return t1; }
}

ITerm selection_statement() throws TermWareException :
{
 ITerm t=null;
}
{
  t=if_statement()
   { return t; }
|
  t=switch_statement()
   { return t; }
}


ITerm switch_statement() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 ITerm t3=null;
 LinkedList lb=new LinkedList();
 LinkedList ls=new LinkedList();
}                               
{
  "switch" "(" t1=expression() ")" "{"
    ( t2=switch_label() ( t3=statement() 
                          { lb.add(t3); }
                       )* 
      {
       ITerm t=createTerm("csharp_switch_label",t2,createList(lb));
       lb.clear();
       ls.add(t);
      }
    )*
  "}"
  {
   return createTerm("csharp_switch",t1,createList(ls));
  }
}

ITerm switch_label() throws TermWareException :
{
 ITerm t1;
}
{
  "case" t1=expression() ":"
   { return createTerm("csharp_case",t1); }
|
  "default" ":"
   { return createAtom("csharp_default_case"); }
}

/**
 *<pre>
 *   "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
 *</pre>
 *<ul>
 * <li> csharp_if(t1,t2,t3) </li>
 * <li> csharp_if(t1,t2) </li>
 *</ul>
 */
ITerm if_statement() throws TermWareException :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{
 ITerm t1=null;
 ITerm t2=null;
 ITerm t3=null;
}
{
  "if" "(" t1=expression() ")" t2=embedded_statement() [ LOOKAHEAD(1) "else" t3=embedded_statement() ]
  {
   if (t3==null) return createTerm("csharp_if",t1,t2);
   else return createTerm("csharp_if",t1,t2,t3);
  }
}


ITerm iteration_statement() throws TermWareException :
{
 ITerm t=null;
}
{
  t=while_statement()
   { return t; }
|
  t=do_statement()
   { return t; }
|
  t=for_statement()
   { return t; }
|
  t=foreach_statement()
   { return t; }
}


ITerm while_statement() throws TermWareException :
{
 ITerm t1;
 ITerm t2;
}
{
  "while" "(" t1=expression() ")" t2=embedded_statement()
   { return createTerm("csharp_while",t1,t2); }
}

ITerm do_statement() throws TermWareException :
{
 ITerm t1;
 ITerm t2;
}
{
  "do" t1=embedded_statement() "while" "(" t2=expression() ")" ";"
   { return createTerm("java_do",t1,t2); }
}

ITerm for_statement() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 ITerm t3=null;
 ITerm t4=null;
}
{
  "for" "(" [ t1=for_init() ] ";" [ t2=expression() ] ";" [ t3=for_iterator() ] ")" t4=embedded_statement()
  {
   if (t1==null) t1=nil();
   if (t2==null) t2=nil();
   if (t3==null) t3=nil();
   return createTerm("csharp_for",t1,t2,t3,t4);
  }
}


ITerm for_init() throws TermWareException :
{
 ITerm t;
}
{
  t=local_variable_declaration()
  { return t; }
|
  t=statement_expression_list()
  { return t; }
}

ITerm statement_expression_list() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 LinkedList l=null;
}
{
  t1=statement_expression() ( "," t2=statement_expression() 
    {
     if (l==null) l=new LinkedList();
     l.add(t2);
    }
                           )*
  {
    if (t2==null) return t1;
    l.addFirst(t1);
    return createList(l);
  }
}

ITerm for_iterator() throws TermWareException :
{
 ITerm t;
}
{
  t=statement_expression_list()
  { return t; }
}

ITerm foreach_statement() throws TermWareException :
{
 ITerm t1=null;
 ITerm t2=null;
 ITerm t3=null;
 ITerm t4=null;
}
{
  "foreach" "("  t1=type()  t2=identifier() "in" t3=expression()  ")" t4=embedded_statement()
  {
   return createTerm("csharp_foreach",t1,t2,t3,t4);
  }
}


ITerm jump_statement() throws TermWareException :
{
 ITerm t=null;
}
{
  t=break_statement()
   { return t; }
|
  t=continue_statement()
   { return t; }
|
  t=goto_statement()
   { return t; }
|
  t=return_statement()
   { return t; }
|
  t=throw_statement()
   { return t; }
}



ITerm break_statement() throws TermWareException :
{
}
{
  "break" ";"
  { 
    return createAtom("csharp_break");
  }
}

ITerm continue_statement()throws TermWareException  :
{
}
{
  "continue" ";"
  {
   return createAtom("csharp_continue");
  }
}

ITerm return_statement() throws TermWareException :
{
 ITerm t=null;
}
{
  "return" [ t=expression() ] ";"
  {
   if (t==null) return createAtom("csharp_return");
   else return createTerm("csharp_return",t);
  }
}

ITerm goto_statement() throws TermWareException :
{
 ITerm t=null;
 Token tcase=null;
 Token tdefault=null;
}
{
  "goto" ( t=identifier() | (tcase="case" t=expression()) | tdefault="default" ) ";"
  {
   if (tcase!=null) return createTerm("csharp_goto_case",t);
   else if (tdefault!=null) return createAtom("csharp_goto_default");
   else return createTerm("csharp_goto_label",t);
  }
}



ITerm throw_statement() throws TermWareException :
{
 ITerm t=null;
}
{
  "throw" [ t=expression() ] ";"
  { 
   if (t==null) t=nil();
   return createTerm("java_throw",t); 
  }
}

ITerm try_statement() throws TermWareException :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{
 ITerm t1=null;
 ITerm t2=null;           
 ITerm t3=null;
 ITerm t4=null;
 ITerm t5=null;
 LinkedList l = new LinkedList();
}
{
  "try" t1=block()
  ( "catch" [ "(" t2=class_type() t3=identifier() ")"] t4=block() 
     {
      ITerm t=createTerm("csharp_catch",t2,t3,t4); 
      l.add(t);
      t2=nil();
      t3=nil();
     }
  )*
  [ "finally" t5=block() ]
  {
   if (t4==null) t4=nil();
   return createTerm("csharp_try",t1,createList(l),t4); 
  }
}

ITerm checked_statement() throws TermWareException :
{
 ITerm t=null;
}
{
  "checked" t=block()
  { 
   return createTerm("csharp_checked",t); 
  }
}

ITerm unchecked_statement() throws TermWareException :
{
 ITerm t=null;
}
{
  "unchecked" t=block()
  { 
   return createTerm("csharp_unchecked",t); 
  }
}



ITerm lock_statement() throws TermWareException :
{
 ITerm t1;
 ITerm t2;
}
{
  "lock" "(" t1=expression() ")" t2=embedded_statement()
  { return createTerm("csharp_lock",t1,t2); }
}

ITerm using_statement() throws TermWareException :
{
 ITerm t1;
 ITerm t2;
}
{
  "using" "(" (t1=local_variable_declaration() | t1=expression()) ")" t2=embedded_statement()
  { return createTerm("csharp_using",t1,t2); }
}


ITerm declaration_statement()  throws TermWareException :
{
 ITerm t=null;
}
{
  t=local_variable_declaration() ";"
   { return t; }
|
  t=local_constant_declaration() ";"
   { return t; }
}

ITerm embedded_statement()  throws TermWareException :
{
 ITerm t=null;
}
{
  t=block() 
   { return t; }
|
  t=empty_statement() 
   { return t; }
|
  LOOKAHEAD(2)
  t=expression_statement() 
   { return t; }
|
  t=selection_statement() 
   { return t; }
|
  t=iteration_statement() 
   { return t; }
|
  t=jump_statement() 
   { return t; }
|
  t=try_statement() 
   { return t; }
|
  t=checked_statement() 
   { return t; }
|
  t=unchecked_statement() 
   { return t; }
|
  t=lock_statement()
   { return t; }
|
  t=using_statement()
   { return t; }
}




ITerm identifier() throws TermWareException :
{
 Token tk;
}
{
 tk=<IDENTIFIER>
  // TODO: set attribute
   { return createTerm("csharp_identifier",tk.image); }
}
