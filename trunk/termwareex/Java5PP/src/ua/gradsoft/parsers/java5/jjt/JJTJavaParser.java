/* Generated By:JJTree&JavaCC: Do not edit this line. JJTJavaParser.java */
package ua.gradsoft.parsers.java5.jjt;

import java.io.*;
import ua.gradsoft.termware.*;
import ua.gradsoft.parsers.java5.JavaNode;

/**
 * Grammar to parse Java version 1.5
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 * @author Ruslan Shevchenko     - Fixed few bugs, imported to TermWare framework.
 */
public class JJTJavaParser/*@bgen(jjtree)*/implements JJTJavaParserTreeConstants, JJTJavaParserConstants {/*@bgen(jjtree)*/
  protected JJTJJTJavaParserState jjtree = new JJTJJTJavaParserState();
   public  String getInFname()
     { return inFname; }

   public  void   setInFname(String inFname)
     { this.inFname=inFname; }

   private  String inFname="unknown";


   public JJTJavaParser(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace(); }
   }

   public SimpleNode getRootNode()
   {
     return (SimpleNode)jjtree.rootNode();
   }

  public static void main(String args[]) {
    JJTJavaParser parser;
    if (args.length == 0) {
      System.out.println("JJT Java Parser Version 1.1:  Reading from standard input . . .");
      parser = new JJTJavaParser(System.in);
    } else if (args.length == 1) {
      System.out.println("JJT Java Parser Version 1.1:  Reading from file " + args[0] + " . . .");
      try {
        parser = new JJTJavaParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("JJT Java Parser Version 1.1:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("JJT Java Parser Version 1.1:  Usage is one of:");
      System.out.println("         java JJTJavaParser < inputfile");
      System.out.println("OR");
      System.out.println("         java JJTJavaParser inputfile");
      return;
    }
    try {
      parser.CompilationUnit();
      System.out.println("JJT Java Parser Version 1.1:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("JJT Java Parser Version 1.1:  Encountered errors during parse.");
    }
  }


    private final String getSpecialToken(Token tk)
    {
      String s="";
      while(tk.specialToken != null) {
         s=tk.specialToken.image+s;
         tk=tk.specialToken;
      }
      return s;
    }

    private final void setComment(JavaNode node, Token tk)
    {
     if (tk!=null) {
       try{
         if (tk.specialToken!=null) {
           String comment=getSpecialToken(tk);
           node.setAttribute("original_comment",comment);
         }
       }catch(TermWareException ex){
         throw new TermWareRuntimeException(ex);
       }
     }
    }


  Term cons(Term x1,Term x2)
  {
   try {
    return TermWare.getInstance().getTermFactory().createTerm("cons",x1,x2);
   }catch(TermWareException ex){
     throw new TermWareRuntimeException(ex);
   }
  }

  Term createAtom(String name)
  {
   return TermWare.getInstance().getTermFactory().createAtom(name);
  }

  Term createNil()
  {
   return TermWare.getInstance().getTermFactory().createNil();
  }

  Term createInt(int x)
  {
   return TermWare.getInstance().getTermFactory().createInt(x);
  }

  Term createString(String x)
  {
   return TermWare.getInstance().getTermFactory().createString(x);
  }

  Term createBoolean(boolean x)
  {
   return TermWare.getInstance().getTermFactory().createBoolean(x);
  }

  Term createTerm(String name,Term x) throws TermWareException
  {
   return TermWare.getInstance().getTermFactory().createTerm(name,x);
  }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public void CompilationUnit() throws ParseException {
 /*@bgen(jjtree) CompilationUnit */
 SimpleNode jjtn000 = new SimpleNode(JJTCOMPILATIONUNIT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Term commentAttributeTerm=null;
 SimpleNode packageDeclarationTerm=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKAGE:
        packageDeclarationTerm = PackageDeclaration();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        ImportDeclaration();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case CLASS:
        case ENUM:
        case FINAL:
        case INTERFACE:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case SEMICOLON:
        case AT:
        case TYPE_DECLARATION_PLACEHOLDER:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        TypeDeclaration();
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (packageDeclarationTerm==null) {
       //TODO: packageDeclarationTerm=createTerm("PackageDeclaration","default");
    }else{
       commentAttributeTerm=packageDeclarationTerm.getAttribute("comment");
       jjtn000.setAttribute("comment",commentAttributeTerm);
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public SimpleNode PackageDeclaration() throws ParseException {
 /*@bgen(jjtree) PackageDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTPACKAGEDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(PACKAGE);
      Name();
      jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     if (tk.specialToken != null) {
        String comment=getSpecialToken(tk);
        jjtn000.setAttribute("comment",comment);
        jjtn000.setAttribute("original_comment",comment);
     }
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ImportDeclaration() throws ParseException {
 /*@bgen(jjtree) ImportDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tkSTATIC=null;
  Token tkASTERISC=null;
  Token tkImport=null;
    try {
      tkImport = jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        tkSTATIC = jj_consume_token(STATIC);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      Name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        tkASTERISC = jj_consume_token(STAR);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   Term modifiers = createNil();
   if (tkSTATIC!=null) {
      modifiers=cons(createAtom("static"),modifiers);
   }
   if (tkASTERISC!=null) {
      modifiers=cons(createAtom("all"),modifiers);
   }
   jjtn000.addTerm(modifiers,0);
   setComment(jjtn000,tkImport);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  final public SimpleNode Modifiers() throws ParseException {
 /*@bgen(jjtree) Modifiers */
 SimpleNode jjtn000 = new SimpleNode(JJTMODIFIERS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token   tk=null;
 String   comment=null;
 String   original_comment=null;
 SimpleNode annotationNode=null;
 int modifiers=0;
    try {
      label_3:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          tk = jj_consume_token(PUBLIC);
                 modifiers |= ModifierSet.PUBLIC;
          break;
        case STATIC:
          tk = jj_consume_token(STATIC);
                 modifiers |= ModifierSet.STATIC;
          break;
        case PROTECTED:
          tk = jj_consume_token(PROTECTED);
                    modifiers |= ModifierSet.PROTECTED;
          break;
        case PRIVATE:
          tk = jj_consume_token(PRIVATE);
                  modifiers |= ModifierSet.PRIVATE;
          break;
        case FINAL:
          tk = jj_consume_token(FINAL);
                modifiers |= ModifierSet.FINAL;
          break;
        case ABSTRACT:
          tk = jj_consume_token(ABSTRACT);
                   modifiers |= ModifierSet.ABSTRACT;
          break;
        case SYNCHRONIZED:
          tk = jj_consume_token(SYNCHRONIZED);
                       modifiers |= ModifierSet.SYNCHRONIZED;
          break;
        case NATIVE:
          tk = jj_consume_token(NATIVE);
                 modifiers |= ModifierSet.NATIVE;
          break;
        case TRANSIENT:
          tk = jj_consume_token(TRANSIENT);
                    modifiers |= ModifierSet.TRANSIENT;
          break;
        case VOLATILE:
          tk = jj_consume_token(VOLATILE);
                   modifiers |= ModifierSet.VOLATILE;
          break;
        case STRICTFP:
          tk = jj_consume_token(STRICTFP);
                   modifiers |= ModifierSet.STRICTFP;
          break;
        case AT:
          annotationNode = Annotation();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      if (comment==null) {
         if (tk!=null) {
             if (tk.specialToken!=null) {
                comment=getSpecialToken(tk);
                original_comment=comment;
             }else{
                // nothing.
             }
         }else if(annotationNode!=null) {
             Term commentTerm=annotationNode.getAttribute("comment");
             if (!commentTerm.isNil()) {
                comment=commentTerm.getString();
             }
         }
      }
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
    jjtn000.addTerm(createInt(modifiers),0);
    if (comment!=null) {
      jjtn000.setAttribute("comment",comment);
      if (original_comment!=null) {
         jjtn000.setAttribute("original_comment",comment);
      }
    }
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

/*
 * Declaration syntax follows.
 */
  final public void TypeDeclaration() throws ParseException {
 /*@bgen(jjtree) TypeDeclaration */
   SimpleNode jjtn000 = new SimpleNode(JJTTYPEDECLARATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);SimpleNode modifiers;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case AT:
      case TYPE_DECLARATION_PLACEHOLDER:
        modifiers = Modifiers();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          ClassOrInterfaceDeclaration(modifiers.getSubtermAt(0).getInt());
          break;
        case ENUM:
          EnumDeclaration(modifiers.getSubtermAt(0).getInt());
          break;
        case AT:
          AnnotationTypeDeclaration(modifiers.getSubtermAt(0).getInt());
          break;
        case TYPE_DECLARATION_PLACEHOLDER:
          jj_consume_token(TYPE_DECLARATION_PLACEHOLDER);
          jj_consume_token(LPAREN);
          Identifier();
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
     jjtn000.setAttribute("comment",modifiers.getAttribute("comment"));
     //System.out.print("we receive from modifiers next comment:");
     //modifiers.getAttribute("comment").println(System.out);
     //System.out.print("for node:");
     //jjtThis.println(System.out); 
     //System.out.print("jjtThis now must have attribute:");    
     //jjtThis.getAttribute("comment").println(System.out);     

        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassOrInterfaceDeclaration(int modifiers) throws ParseException {
 /*@bgen(jjtree) ClassOrInterfaceDeclaration */
   SimpleNode jjtn000 = new SimpleNode(JJTCLASSORINTERFACEDECLARATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);boolean isInterface = false;
   SimpleNode typeParameters = null;
   Token tk = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        tk = jj_consume_token(CLASS);
        break;
      case INTERFACE:
        tk = jj_consume_token(INTERFACE);
                                  isInterface = true;
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        typeParameters = TypeParameters();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        ExtendsList(isInterface);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        ImplementsList(isInterface);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      ClassOrInterfaceBody(isInterface);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (isInterface) {
       jjtn000.addTerm(TermWare.getInstance().getTermFactory().createAtom("interface"),0);
    }else{
       jjtn000.addTerm(TermWare.getInstance().getTermFactory().createAtom("class"),0);
    }
    if (tk!=null) {
     if (tk.specialToken!=null) {
       String comment=getSpecialToken(tk);
       jjtn000.setAttribute("original_comment",comment);
     }
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExtendsList(boolean isInterface) throws ParseException {
 /*@bgen(jjtree) ExtendsList */
   SimpleNode jjtn000 = new SimpleNode(JJTEXTENDSLIST);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);boolean extendsMoreThanOne = false;
   Token tk=null;
    try {
      tk = jj_consume_token(EXTENDS);
      ClassOrInterfaceType();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        ClassOrInterfaceType();
                                  extendsMoreThanOne = true;
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
      setComment(jjtn000,tk);
      if (extendsMoreThanOne && !isInterface)
         {if (true) throw new ParseException("A class cannot extend more than one other class");}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ImplementsList(boolean isInterface) throws ParseException {
 /*@bgen(jjtree) ImplementsList */
 SimpleNode jjtn000 = new SimpleNode(JJTIMPLEMENTSLIST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(IMPLEMENTS);
      ClassOrInterfaceType();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        ClassOrInterfaceType();
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
      setComment(jjtn000,tk);
      if (isInterface)
         {if (true) throw new ParseException("An interface cannot implement other interfaces");}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void EnumDeclaration(int modifiers) throws ParseException {
 /*@bgen(jjtree) EnumDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTENUMDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(ENUM);
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        ImplementsList(false);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      EnumBody();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EnumBody() throws ParseException {
 /*@bgen(jjtree) EnumBody */
 SimpleNode jjtn000 = new SimpleNode(JJTENUMBODY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(LBRACE);
      EnumConstant();
      label_6:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(COMMA);
        EnumConstant();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case CLASS:
          case DOUBLE:
          case ENUM:
          case FINAL:
          case FLOAT:
          case INT:
          case INTERFACE:
          case LONG:
          case NATIVE:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case SHORT:
          case STATIC:
          case STRICTFP:
          case SYNCHRONIZED:
          case TRANSIENT:
          case VOID:
          case VOLATILE:
          case IDENTIFIER:
          case LBRACE:
          case SEMICOLON:
          case AT:
          case LT:
          case BLOCK_PLACEHOLDER:
          case IDENTIFIER_PLACEHOLDER:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_7;
          }
          ClassOrInterfaceBodyDeclaration(false);
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void EnumConstant() throws ParseException {
 /*@bgen(jjtree) EnumConstant */
 SimpleNode jjtn000 = new SimpleNode(JJTENUMCONSTANT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);boolean hasArguments=false;
 boolean hasBody=false;
    try {
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        Arguments();
                              hasArguments=true;
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ClassOrInterfaceBody(false);
                                                                                   hasBody=true;
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   if (hasBody) {
     if (!hasArguments) {
        jjtn000.addTerm(TermWare.getInstance().getTermFactory().createNil(),1);
     }
   }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public SimpleNode TypeParameters() throws ParseException {
 /*@bgen(jjtree) TypeParameters */
 SimpleNode jjtn000 = new SimpleNode(JJTTYPEPARAMETERS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(LT);
      TypeParameter();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        TypeParameter();
      }
      jj_consume_token(GT);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    setComment(jjtn000,tk);
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public void TypeParameter() throws ParseException {
 /*@bgen(jjtree) TypeParameter */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);SimpleNode typeBound;
    try {
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        TypeBound();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void TypeBound() throws ParseException {
 /*@bgen(jjtree) TypeBound */
 SimpleNode jjtn000 = new SimpleNode(JJTTYPEBOUND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(EXTENDS);
      ClassOrInterfaceType();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_AND:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_9;
        }
        jj_consume_token(BIT_AND);
        ClassOrInterfaceType();
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ClassOrInterfaceBody(boolean isInterface) throws ParseException {
 /*@bgen(jjtree) ClassOrInterfaceBody */
 SimpleNode jjtn000 = new SimpleNode(JJTCLASSORINTERFACEBODY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(LBRACE);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case LT:
        case BLOCK_PLACEHOLDER:
        case IDENTIFIER_PLACEHOLDER:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_10;
        }
        ClassOrInterfaceBodyDeclaration(isInterface);
      }
      jj_consume_token(RBRACE);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {
 /*@bgen(jjtree) ClassOrInterfaceBodyDeclaration */
   SimpleNode jjtn000 = new SimpleNode(JJTCLASSORINTERFACEBODYDECLARATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);boolean isNestedInterface = false;
   SimpleNode modifiers;
    try {
      if (jj_2_5(2)) {
        Initializer();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
     if (isInterface)
        {if (true) throw new ParseException("An interface cannot have initializers");}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case AT:
        case LT:
        case IDENTIFIER_PLACEHOLDER:
          modifiers = Modifiers();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CLASS:
          case INTERFACE:
            ClassOrInterfaceDeclaration(modifiers.getSubtermAt(0).getInt());
            break;
          case ENUM:
            EnumDeclaration(modifiers.getSubtermAt(0).getInt());
            break;
          default:
            jj_la1[24] = jj_gen;
            if (jj_2_3(2147483647)) {
              ConstructorDeclaration();
            } else if (jj_2_4(2147483647)) {
              FieldDeclaration(modifiers.getSubtermAt(0).getInt());
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case BOOLEAN:
              case BYTE:
              case CHAR:
              case DOUBLE:
              case FLOAT:
              case INT:
              case LONG:
              case SHORT:
              case VOID:
              case IDENTIFIER:
              case LT:
              case IDENTIFIER_PLACEHOLDER:
                MethodDeclaration(modifiers.getSubtermAt(0).getInt());
                break;
              default:
                jj_la1[25] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
       Term ct=TermHelper.getAttribute(modifiers,"comment");
       if (!ct.isNil()) {
          jjtn000.setAttribute("comment",ct);
       }
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FieldDeclaration(int modifiers) throws ParseException {
 /*@bgen(jjtree) FieldDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTFIELDDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      VariableDeclarator();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableDeclarator() throws ParseException {
 /*@bgen(jjtree) VariableDeclarator */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      VariableDeclaratorId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        VariableInitializer();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableDeclaratorId() throws ParseException {
 /*@bgen(jjtree) VariableDeclaratorId */
 SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATORID);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);int nArraysId=0;
    try {
      Identifier();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_12;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                           ++nArraysId;
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.addTerm(createInt(nArraysId),1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
void VariableDeclaratorIdArray():
{}
{
 "[" "]"
}
*/
  final public void VariableInitializer() throws ParseException {
 /*@bgen(jjtree) VariableInitializer */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ArrayInitializer();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case EXPRESSION_PLACEHOLDER:
      case IDENTIFIER_PLACEHOLDER:
        Expression();
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ArrayInitializer() throws ParseException {
 /*@bgen(jjtree) ArrayInitializer */
 SimpleNode jjtn000 = new SimpleNode(JJTARRAYINITIALIZER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case EXPRESSION_PLACEHOLDER:
      case IDENTIFIER_PLACEHOLDER:
        VariableInitializer();
        label_13:
        while (true) {
          if (jj_2_6(2)) {
            ;
          } else {
            break label_13;
          }
          jj_consume_token(COMMA);
          VariableInitializer();
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   if (tk.specialToken!=null) {
     String comment=getSpecialToken(tk);
     jjtn000.setAttribute("original_coment",comment);
   }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MethodDeclaration(int modifiers) throws ParseException {
 /*@bgen(jjtree) MethodDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);SimpleNode typeParameters=null;
 SimpleNode nameList=null;
 SimpleNode block=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        typeParameters = TypeParameters();
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      ResultType();
      MethodDeclarator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        nameList = NameList();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case BLOCK_PLACEHOLDER:
        block = Block();
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   if (typeParameters==null) {
     jjtn000.addTerm(createNil(),0);
   }
   if (nameList==null) {
     jjtn000.addTerm(createNil(),3);
   }
   if (block==null) {
     jjtn000.addTerm(createNil(),4);
   }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MethodDeclarator() throws ParseException {
 /*@bgen(jjtree) MethodDeclarator */
 SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);int referenceLevel=0;
    try {
      Identifier();
      FormalParameters();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_14;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
                                              ++referenceLevel;
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;

    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FormalParameters() throws ParseException {
 /*@bgen(jjtree) FormalParameters */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMALPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
      case IDENTIFIER_PLACEHOLDER:
        FormalParameter();
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[37] = jj_gen;
            break label_15;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FormalParameter() throws ParseException {
 /*@bgen(jjtree) FormalParameter */
 SimpleNode jjtn000 = new SimpleNode(JJTFORMALPARAMETER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);int modifiers=0;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        jj_consume_token(FINAL);
             modifiers|=ModifierSet.FINAL;
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      Type();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELLIPSIS:
        jj_consume_token(ELLIPSIS);
                                                              modifiers|=ModifierSet.VARARGS;
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      VariableDeclaratorId();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.addTerm(createInt(modifiers),0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConstructorDeclaration() throws ParseException {
 /*@bgen(jjtree) ConstructorDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTCONSTRUCTORDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);boolean    hasTP=false;
 boolean    hasThrows=false;
 boolean    hasECI=false;
 boolean    hasBlock=false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        TypeParameters();
                      hasTP=true;
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      Identifier();
      FormalParameters();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        NameList();
                                                         hasThrows=true;
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      if (jj_2_7(2147483647)) {
        ExplicitConstructorInvocation();
                                                                                  hasECI=true;
      } else {
        ;
      }
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
        case BLOCK_PLACEHOLDER:
        case IDENTIFIER_PLACEHOLDER:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_16;
        }
        BlockStatement();
                        hasBlock=true;
      }
      jj_consume_token(RBRACE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   if (!hasTP) {
     jjtn000.addTerm(createNil(),0);
   }
   if (!hasThrows) {
     jjtn000.addTerm(createNil(),3);
   }
   if (!hasECI) {
     jjtn000.addTerm(createNil(),4);
   }
   if (!hasBlock) {
     jjtn000.addTerm(createNil(),5);
   }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExplicitConstructorInvocation() throws ParseException {
 /*@bgen(jjtree) ExplicitConstructorInvocation */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPLICITCONSTRUCTORINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_8(2147483647)) {
        ExplicitThisConstructorInvocation();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case IDENTIFIER_PLACEHOLDER:
          ExplicitSuperConstructorInvocation();
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExplicitThisConstructorInvocation() throws ParseException {
 /*@bgen(jjtree) ExplicitThisConstructorInvocation */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPLICITTHISCONSTRUCTORINVOCATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(THIS);
      Arguments();
      jj_consume_token(SEMICOLON);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  if (tk.specialToken!=null) {
    String comment=getSpecialToken(tk);
    jjtn000.setAttribute("original_comment",comment);
  }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void ExplicitSuperConstructorInvocation() throws ParseException {
 /*@bgen(jjtree) ExplicitSuperConstructorInvocation */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPLICITSUPERCONSTRUCTORINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_9(2)) {
        PrimaryExpression();
        jj_consume_token(DOT);
      } else {
        ;
      }
      jj_consume_token(SUPER);
      Arguments();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void Initializer() throws ParseException {
 /*@bgen(jjtree) Initializer */
  SimpleNode jjtn000 = new SimpleNode(JJTINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int modifiers=0;
  Token tk=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        tk = jj_consume_token(STATIC);
                  modifiers|=ModifierSet.STATIC;
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      Block();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     if (tk!=null) {
      if (tk.specialToken!=null) {
        String comment=getSpecialToken(tk);
        jjtn000.setAttribute("original_comment",comment);
      }
     }
     jjtn000.addTerm(createTerm("Modifiers",createInt(modifiers)),0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
 * Type, name and expression syntax follows.
 */
  final public void Type() throws ParseException {
 /*@bgen(jjtree) Type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_10(2)) {
        ReferenceType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
          PrimitiveType();
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ReferenceType() throws ParseException {
 /*@bgen(jjtree) ReferenceType */
 SimpleNode jjtn000 = new SimpleNode(JJTREFERENCETYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);int referenceLevel=0;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        PrimitiveType();
        label_17:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                                           ++referenceLevel;
          if (jj_2_11(2)) {
            ;
          } else {
            break label_17;
          }
        }
        break;
      case IDENTIFIER:
      case IDENTIFIER_PLACEHOLDER:
        ClassOrInterfaceType();
        label_18:
        while (true) {
          if (jj_2_12(2)) {
            ;
          } else {
            break label_18;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                                                      ++referenceLevel;
        }
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
      jjtn000.addTerm(TermWare.getInstance().getTermFactory().createInt(referenceLevel),0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassOrInterfaceType() throws ParseException {
 /*@bgen(jjtree) ClassOrInterfaceType */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSORINTERFACETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      if (jj_2_13(2)) {
        TypeArguments();
      } else {
        ;
      }
      label_19:
      while (true) {
        if (jj_2_14(2)) {
          ;
        } else {
          break label_19;
        }
        jj_consume_token(DOT);
        Identifier();
        if (jj_2_15(2)) {
          TypeArguments();
        } else {
          ;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TypeArguments() throws ParseException {
 /*@bgen(jjtree) TypeArguments */
 SimpleNode jjtn000 = new SimpleNode(JJTTYPEARGUMENTS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(LT);
      TypeArgument();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_20;
        }
        jj_consume_token(COMMA);
        TypeArgument();
      }
      jj_consume_token(GT);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void TypeArgument() throws ParseException {
 /*@bgen(jjtree) TypeArgument */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
      case IDENTIFIER_PLACEHOLDER:
        ReferenceType();
        break;
      case HOOK:
        jj_consume_token(HOOK);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
        case SUPER:
          WildcardBounds();
          break;
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void WildcardBounds() throws ParseException {
 /*@bgen(jjtree) WildcardBounds */
  SimpleNode jjtn000 = new SimpleNode(JJTWILDCARDBOUNDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        ReferenceType();
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtn000.addTerm(createAtom("extends"),0);
        break;
      case SUPER:
        jj_consume_token(SUPER);
        ReferenceType();
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtn000.addTerm(createAtom("super"),0);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void PrimitiveType() throws ParseException {
 /*@bgen(jjtree) PrimitiveType */
 SimpleNode jjtn000 = new SimpleNode(JJTPRIMITIVETYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        tk = jj_consume_token(BOOLEAN);
                   jjtn000.addTerm(createAtom("boolean"),0);
        break;
      case CHAR:
        tk = jj_consume_token(CHAR);
                   jjtn000.addTerm(createAtom("char"),0);
        break;
      case BYTE:
        tk = jj_consume_token(BYTE);
                   jjtn000.addTerm(createAtom("byte"),0);
        break;
      case SHORT:
        tk = jj_consume_token(SHORT);
                   jjtn000.addTerm(createAtom("short"),0);
        break;
      case INT:
        tk = jj_consume_token(INT);
                   jjtn000.addTerm(createAtom("int"),0);
        break;
      case LONG:
        tk = jj_consume_token(LONG);
                   jjtn000.addTerm(createAtom("long"),0);
        break;
      case FLOAT:
        tk = jj_consume_token(FLOAT);
                   jjtn000.addTerm(createAtom("float"),0);
        break;
      case DOUBLE:
        tk = jj_consume_token(DOUBLE);
                   jjtn000.addTerm(createAtom("double"),0);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    setComment(jjtn000,tk);
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void ResultType() throws ParseException {
 /*@bgen(jjtree) ResultType */
 SimpleNode jjtn000 = new SimpleNode(JJTRESULTTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        tk = jj_consume_token(VOID);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
    jjtn000.addTerm(createAtom("void"),0);
      if (tk.specialToken!=null) {
        String comment=getSpecialToken(tk);
        jjtn000.setAttribute("original_comment",comment);
      }
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
      case IDENTIFIER_PLACEHOLDER:
        Type();
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Name() throws ParseException {
 /*@bgen(jjtree) Name */
  SimpleNode jjtn000 = new SimpleNode(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      label_21:
      while (true) {
        if (jj_2_16(2)) {
          ;
        } else {
          break label_21;
        }
        jj_consume_token(DOT);
        Identifier();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public SimpleNode NameList() throws ParseException {
 /*@bgen(jjtree) NameList */
  SimpleNode jjtn000 = new SimpleNode(JJTNAMELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Name();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_22;
        }
        jj_consume_token(COMMA);
        Name();
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
  final public void Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case IDENTIFIER_PLACEHOLDER:
        ConditionalExpression();
        if (jj_2_17(2)) {
          AssignmentOperator();
          Expression();
        } else {
          ;
        }
        break;
      case EXPRESSION_PLACEHOLDER:
        jj_consume_token(EXPRESSION_PLACEHOLDER);
        jj_consume_token(LPAREN);
        Identifier();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AssignmentOperator() throws ParseException {
 /*@bgen(jjtree) AssignmentOperator */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.addTerm(createString("="),0);
        break;
      case STARASSIGN:
        jj_consume_token(STARASSIGN);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.addTerm(createString("*="),0);
        break;
      case SLASHASSIGN:
        jj_consume_token(SLASHASSIGN);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.addTerm(createString("/="),0);
        break;
      case REMASSIGN:
        jj_consume_token(REMASSIGN);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.addTerm(createString("%="),0);
        break;
      case PLUSASSIGN:
        jj_consume_token(PLUSASSIGN);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.addTerm(createString("+="),0);
        break;
      case MINUSASSIGN:
        jj_consume_token(MINUSASSIGN);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.addTerm(createString("-="),0);
        break;
      case LSHIFTASSIGN:
        jj_consume_token(LSHIFTASSIGN);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.addTerm(createString("<<="),0);
        break;
      case RSIGNEDSHIFTASSIGN:
        jj_consume_token(RSIGNEDSHIFTASSIGN);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.addTerm(createString(">>="),0);
        break;
      case RUNSIGNEDSHIFTASSIGN:
        jj_consume_token(RUNSIGNEDSHIFTASSIGN);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.addTerm(createString(">>>="),0);
        break;
      case ANDASSIGN:
        jj_consume_token(ANDASSIGN);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.addTerm(createString("&="),0);
        break;
      case XORASSIGN:
        jj_consume_token(XORASSIGN);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.addTerm(createString("^="),0);
        break;
      case ORASSIGN:
        jj_consume_token(ORASSIGN);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.addTerm(createString("|="),0);
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConditionalExpression() throws ParseException {
 /*@bgen(jjtree) ConditionalExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalOrExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOOK:
        jj_consume_token(HOOK);
        Expression();
        jj_consume_token(COLON);
        Expression();
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
 /*@bgen(jjtree) ConditionalOrExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONALOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalAndExpression();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_OR:
          ;
          break;
        default:
          jj_la1[58] = jj_gen;
          break label_23;
        }
        jj_consume_token(SC_OR);
        ConditionalAndExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
 /*@bgen(jjtree) ConditionalAndExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONALANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InclusiveOrExpression();
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SC_AND:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_24;
        }
        jj_consume_token(SC_AND);
        InclusiveOrExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InclusiveOrExpression() throws ParseException {
 /*@bgen(jjtree) InclusiveOrExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTINCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExclusiveOrExpression();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_OR:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_25;
        }
        jj_consume_token(BIT_OR);
        ExclusiveOrExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExclusiveOrExpression() throws ParseException {
 /*@bgen(jjtree) ExclusiveOrExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndExpression();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XOR:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_26;
        }
        jj_consume_token(XOR);
        AndExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AndExpression() throws ParseException {
 /*@bgen(jjtree) AndExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EqualityExpression();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIT_AND:
          ;
          break;
        default:
          jj_la1[62] = jj_gen;
          break label_27;
        }
        jj_consume_token(BIT_AND);
        EqualityExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EqualityExpression() throws ParseException {
 /*@bgen(jjtree) EqualityExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InstanceOfExpression();
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case NE:
          ;
          break;
        default:
          jj_la1[63] = jj_gen;
          break label_28;
        }
        EqualityExpressionOperand();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EqualityExpressionOperand() throws ParseException {
 /*@bgen(jjtree) EqualityExpressionOperand */
 SimpleNode jjtn000 = new SimpleNode(JJTEQUALITYEXPRESSIONOPERAND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        tk = jj_consume_token(EQ);
        break;
      case NE:
        tk = jj_consume_token(NE);
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.addTerm(createString(tk.image),0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InstanceOfExpression() throws ParseException {
 /*@bgen(jjtree) InstanceOfExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTANCEOFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RelationalExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSTANCEOF:
        jj_consume_token(INSTANCEOF);
        Type();
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void RelationalExpression() throws ParseException {
 /*@bgen(jjtree) RelationalExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ShiftExpression();
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
        case LE:
        case GE:
        case GT:
          ;
          break;
        default:
          jj_la1[66] = jj_gen;
          break label_29;
        }
        RelationalExpressionSuffix();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void RelationalExpressionSuffix() throws ParseException {
 /*@bgen(jjtree) RelationalExpressionSuffix */
 SimpleNode jjtn000 = new SimpleNode(JJTRELATIONALEXPRESSIONSUFFIX);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String s=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        s="<";
        break;
      case GT:
        jj_consume_token(GT);
                       s=">";
        break;
      case LE:
        jj_consume_token(LE);
                                       s="<=";
        break;
      case GE:
        jj_consume_token(GE);
                                                        s=">=";
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ShiftExpression();
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.addTerm(createString(s),0);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void ShiftExpression() throws ParseException {
 /*@bgen(jjtree) ShiftExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSHIFTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AdditiveExpression();
      label_30:
      while (true) {
        if (jj_2_18(1)) {
          ;
        } else {
          break label_30;
        }
        ShiftExpressionOperand();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ShiftExpressionOperand() throws ParseException {
 /*@bgen(jjtree) ShiftExpressionOperand */
 SimpleNode jjtn000 = new SimpleNode(JJTSHIFTEXPRESSIONOPERAND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String s;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        jj_consume_token(LSHIFT);
        s="<<";
        break;
      default:
        jj_la1[68] = jj_gen;
        if (jj_2_19(1)) {
          RSIGNEDSHIFT();
                                   s=">>";
        } else if (jj_2_20(1)) {
          RUNSIGNEDSHIFT();
                                                                s=">>>";
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      AdditiveExpression();
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  if (jjtn000.getArity()==1) {
     jjtn000.addTerm(createString(s),0);
  }else{
     jjtn000.setSubtermAt(0,createString(s));
  }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void AdditiveExpression() throws ParseException {
 /*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultiplicativeExpression();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_31;
        }
        AdditiveOperand();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AdditiveOperand() throws ParseException {
 /*@bgen(jjtree) AdditiveOperand */
 SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEOPERAND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tkPlus=null;
 Token tkMinus=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        tkPlus = jj_consume_token(PLUS);
        break;
      case MINUS:
        tkMinus = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (tkPlus!=null) {
      jjtn000.addTerm(createString("+"),0);
    }else if (tkMinus!=null) {
      jjtn000.addTerm(createString("-"),0);
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnaryExpression();
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case SLASH:
        case REM:
          ;
          break;
        default:
          jj_la1[71] = jj_gen;
          break label_32;
        }
        MultiplicativeOperand();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MultiplicativeOperand() throws ParseException {
 /*@bgen(jjtree) MultiplicativeOperand */
 SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEOPERAND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String s=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        s="*";
        break;
      case SLASH:
        jj_consume_token(SLASH);
                       s="/";
        break;
      case REM:
        jj_consume_token(REM);
                                      s="%";
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.addTerm(createString(s),0);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void UnaryExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tkp=null;
 Token tkm=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          tkp = jj_consume_token(PLUS);
          break;
        case MINUS:
          tkm = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (tkp!=null) {
      jjtn000.addTerm(createString("+"),0);
      setComment(jjtn000,tkp);
    }else if(tkm!=null) {
      jjtn000.addTerm(createString("-"),0);
      setComment(jjtn000,tkm);
    }
        break;
      case INCR:
        PreIncrementExpression();
        break;
      case DECR:
        PreDecrementExpression();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case IDENTIFIER_PLACEHOLDER:
        UnaryExpressionNotPlusMinus();
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PreIncrementExpression() throws ParseException {
 /*@bgen(jjtree) PreIncrementExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTPREINCREMENTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(INCR);
      PrimaryExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PreDecrementExpression() throws ParseException {
 /*@bgen(jjtree) PreDecrementExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTPREDECREMENTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(DECR);
      PrimaryExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
 /*@bgen(jjtree) UnaryExpressionNotPlusMinus */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSIONNOTPLUSMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tkInverse=null;
  Token tkNot=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
      case TILDE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          tkInverse = jj_consume_token(TILDE);
          break;
        case BANG:
          tkNot = jj_consume_token(BANG);
          break;
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      if (tkInverse!=null) {
          jjtn000.addTerm(createString("~"),0);
          setComment(jjtn000,tkInverse);
      }else if(tkNot!=null) {
          jjtn000.addTerm(createString("!"),0);
          setComment(jjtn000,tkNot);
      }
        break;
      default:
        jj_la1[76] = jj_gen;
        if (jj_2_21(2147483647)) {
          CastExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case IDENTIFIER_PLACEHOLDER:
            PostfixExpression();
            break;
          default:
            jj_la1[77] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead() throws ParseException {
 /*@bgen(jjtree) CastLookahead */
  SimpleNode jjtn000 = new SimpleNode(JJTCASTLOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_22(2)) {
        jj_consume_token(LPAREN);
        PrimitiveType();
      } else if (jj_2_23(2147483647)) {
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          Type();
          jj_consume_token(RPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TILDE:
            jj_consume_token(TILDE);
            break;
          case BANG:
            jj_consume_token(BANG);
            break;
          case LPAREN:
            jj_consume_token(LPAREN);
            break;
          case IDENTIFIER:
          case IDENTIFIER_PLACEHOLDER:
            Identifier();
            break;
          case THIS:
            jj_consume_token(THIS);
            break;
          case SUPER:
            jj_consume_token(SUPER);
            break;
          case NEW:
            jj_consume_token(NEW);
            break;
          case FALSE:
          case NULL:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
            Literal();
            break;
          default:
            jj_la1[78] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[79] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PostfixExpression() throws ParseException {
 /*@bgen(jjtree) PostfixExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tki=null;
Token tkd=null;
    try {
      PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
      case DECR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          tki = jj_consume_token(INCR);
          break;
        case DECR:
          tkd = jj_consume_token(DECR);
          break;
        default:
          jj_la1[80] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (tki!=null) {
      jjtn000.addTerm(createString("++"),1);
    }else if(tkd!=null){
      jjtn000.addTerm(createString("--"),1);
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CastExpression() throws ParseException {
 /*@bgen(jjtree) CastExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTCASTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      if (jj_2_24(2147483647)) {
        tk = jj_consume_token(LPAREN);
        Type();
        jj_consume_token(RPAREN);
        UnaryExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          tk = jj_consume_token(LPAREN);
          Type();
          jj_consume_token(RPAREN);
          UnaryExpressionNotPlusMinus();
          break;
        default:
          jj_la1[82] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 if (tk!=null) {
  if (tk.specialToken!=null) {
    String comment = getSpecialToken(tk);
    jjtn000.setAttribute("original_comment",comment);
  }
 }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

/*
void PrimaryExpression():
{}
{    
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

*/
  final public void PrimaryExpression() throws ParseException {
 /*@bgen(jjtree) PrimaryExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTPRIMARYEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
 boolean hasThis=false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        Literal();
        break;
      case THIS:
        tk = jj_consume_token(THIS);
               hasThis=true;
        break;
      case SUPER:
        SuperPrefix();
        break;
      case LPAREN:
        tk = jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        break;
      case NEW:
        AllocationExpression();
        break;
      default:
        jj_la1[83] = jj_gen;
        if (jj_2_25(2147483647)) {
          ClassLiteral();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
          case IDENTIFIER_PLACEHOLDER:
            IdentifierOrFunctionCall();
            break;
          default:
            jj_la1[84] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      if (jj_2_26(2)) {
        PrimarySuffix();
      } else {
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (hasThis) {
      jjtn000.addTerm(createAtom("this"),0);
    }
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void SuperPrefix() throws ParseException {
 /*@bgen(jjtree) SuperPrefix */
 SimpleNode jjtn000 = new SimpleNode(JJTSUPERPREFIX);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(SUPER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   setComment(jjtn000,tk);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassLiteral() throws ParseException {
 /*@bgen(jjtree) ClassLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ResultType();
      jj_consume_token(DOT);
      jj_consume_token(CLASS);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void IdentifierOrFunctionCall() throws ParseException {
 /*@bgen(jjtree) IdentifierOrFunctionCall */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIERORFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        Arguments();
        break;
      default:
        jj_la1[85] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void MethodCall() throws ParseException {
 /*@bgen(jjtree) MethodCall */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      Arguments();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PrimarySuffix() throws ParseException {
 /*@bgen(jjtree) PrimarySuffix */
  SimpleNode jjtn000 = new SimpleNode(JJTPRIMARYSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_27(2)) {
        ThisSelector();
      } else if (jj_2_28(2)) {
        SuperSelector();
      } else if (jj_2_29(2)) {
        AllocationSelector();
      } else if (jj_2_30(3)) {
        MemberSelector();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ArrayIndexSelector();
          break;
        default:
          jj_la1[86] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      if (jj_2_31(2)) {
        PrimarySuffix();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void ThisSelector() throws ParseException {
 /*@bgen(jjtree) ThisSelector */
  SimpleNode jjtn000 = new SimpleNode(JJTTHISSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOT);
      jj_consume_token(THIS);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SuperSelector() throws ParseException {
 /*@bgen(jjtree) SuperSelector */
  SimpleNode jjtn000 = new SimpleNode(JJTSUPERSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOT);
      jj_consume_token(SUPER);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void AllocationSelector() throws ParseException {
 /*@bgen(jjtree) AllocationSelector */
  SimpleNode jjtn000 = new SimpleNode(JJTALLOCATIONSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOT);
      AllocationExpression();
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void MemberSelector() throws ParseException {
 /*@bgen(jjtree) MemberSelector */
 SimpleNode jjtn000 = new SimpleNode(JJTMEMBERSELECTOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);boolean hasTA=false;
    try {
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        TypeArguments();
                          hasTA=true;
        break;
      default:
        jj_la1[87] = jj_gen;
        ;
      }
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        Arguments();
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   if (!hasTA) {
     jjtn000.addTerm(createNil(),0);
   }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ArrayIndexSelector() throws ParseException {
 /*@bgen(jjtree) ArrayIndexSelector */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYINDEXSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
      Expression();
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void Literal() throws ParseException {
 /*@bgen(jjtree) Literal */
  SimpleNode jjtn000 = new SimpleNode(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        IntegerLiteral();
        break;
      case FLOATING_POINT_LITERAL:
        FloatingPointLiteral();
        break;
      case CHARACTER_LITERAL:
        CharacterLiteral();
        break;
      case STRING_LITERAL:
        StringLiteral();
        break;
      case FALSE:
      case TRUE:
        BooleanLiteral();
        break;
      case NULL:
        NullLiteral();
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IntegerLiteral() throws ParseException {
 /*@bgen(jjtree) IntegerLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(INTEGER_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   setComment(jjtn000,tk);
   jjtn000.addTerm(createString(tk.image),0);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CharacterLiteral() throws ParseException {
 /*@bgen(jjtree) CharacterLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTCHARACTERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(CHARACTER_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    jjtn000.addTerm(createString(tk.image),0);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FloatingPointLiteral() throws ParseException {
 /*@bgen(jjtree) FloatingPointLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTFLOATINGPOINTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(FLOATING_POINT_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    jjtn000.addTerm(createString(tk.image),0);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StringLiteral() throws ParseException {
 /*@bgen(jjtree) StringLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(STRING_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    jjtn000.addTerm(createString(tk.image),0);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BooleanLiteral() throws ParseException {
 /*@bgen(jjtree) BooleanLiteral */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        tk = jj_consume_token(TRUE);
                jjtn000.addTerm(createBoolean(true),0);
        break;
      case FALSE:
        tk = jj_consume_token(FALSE);
                jjtn000.addTerm(createBoolean(false),0);
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
    setComment(jjtn000,tk);
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void NullLiteral() throws ParseException {
 /*@bgen(jjtree) NullLiteral */
 SimpleNode jjtn000 = new SimpleNode(JJTNULLLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(NULL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Arguments() throws ParseException {
 /*@bgen(jjtree) Arguments */
 SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case EXPRESSION_PLACEHOLDER:
      case IDENTIFIER_PLACEHOLDER:
        ArgumentList();
        break;
      default:
        jj_la1[91] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ArgumentList() throws ParseException {
 /*@bgen(jjtree) ArgumentList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[92] = jj_gen;
          break label_33;
        }
        jj_consume_token(COMMA);
        Expression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AllocationExpression() throws ParseException {
 /*@bgen(jjtree) AllocationExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTALLOCATIONEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);boolean haveTypeArguments=false;
 boolean haveClassBody=false;
 Token tk=null;
    try {
      if (jj_2_32(2)) {
        tk = jj_consume_token(NEW);
        PrimitiveType();
        ArrayDimsAndInits();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          tk = jj_consume_token(NEW);
          ClassOrInterfaceType();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LT:
            TypeArguments();
                                                     haveTypeArguments=true;
            break;
          default:
            jj_la1[93] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ArrayDimsAndInits();
            break;
          case LPAREN:
            Arguments();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACE:
              ClassOrInterfaceBody(false);
                                                 haveClassBody=true;
              break;
            default:
              jj_la1[94] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[95] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[96] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   setComment(jjtn000,tk);
   if (!haveTypeArguments) {
     jjtn000.addTerm(createNil(),1);
   }
   if (!haveClassBody) {
     jjtn000.addTerm(createNil(),3);
   }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
/*
void ArrayDimsAndInits():
{
 int nReferences=0;
}
{
 (
  LOOKAHEAD(2)
  ( LOOKAHEAD(2) "[" Expression() "]" )+ ( LOOKAHEAD(2) "[" "]" {++nReferences;} )*
|
  ( "[" "]" {++nReferences; } )+ ArrayInitializer()
 )
  { jjtThis.addTerm(createInt(nReferences),0); }
}
*/
  final public void ArrayDimsAndInits() throws ParseException {
 /*@bgen(jjtree) ArrayDimsAndInits */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYDIMSANDINITS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ArrayDims();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ArrayInitializer();
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ArrayDims() throws ParseException {
 /*@bgen(jjtree) ArrayDims */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYDIMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_34:
      while (true) {
        ArrayDim();
        if (jj_2_33(2)) {
          ;
        } else {
          break label_34;
        }
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void ArrayDim() throws ParseException {
 /*@bgen(jjtree) ArrayDim */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYDIM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case EXPRESSION_PLACEHOLDER:
      case IDENTIFIER_PLACEHOLDER:
        Expression();
        break;
      default:
        jj_la1[98] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

/*
 * Statement syntax follows.
 */
  final public void Statement() throws ParseException {
 /*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_34(2)) {
        LabeledStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
          AssertStatement();
          break;
        case LBRACE:
        case BLOCK_PLACEHOLDER:
          Block();
          break;
        case SEMICOLON:
          EmptyStatement();
          break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
        case IDENTIFIER_PLACEHOLDER:
          StatementExpressionStatement();
          break;
        case SWITCH:
          SwitchStatement();
          break;
        case IF:
          IfStatement();
          break;
        case WHILE:
          WhileStatement();
          break;
        case DO:
          DoStatement();
          break;
        case FOR:
          ForStatement();
          break;
        case BREAK:
          BreakStatement();
          break;
        case CONTINUE:
          ContinueStatement();
          break;
        case RETURN:
          ReturnStatement();
          break;
        case THROW:
          ThrowStatement();
          break;
        case SYNCHRONIZED:
          SynchronizedStatement();
          break;
        case TRY:
          TryStatement();
          break;
        default:
          jj_la1[99] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StatementExpressionStatement() throws ParseException {
 /*@bgen(jjtree) StatementExpressionStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      StatementExpression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void AssertStatement() throws ParseException {
 /*@bgen(jjtree) AssertStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTASSERTSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(ASSERT);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        Expression();
        break;
      default:
        jj_la1[100] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void LabeledStatement() throws ParseException {
 /*@bgen(jjtree) LabeledStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTLABELEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      jj_consume_token(COLON);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public SimpleNode Block() throws ParseException {
 /*@bgen(jjtree) Block */
 SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        tk = jj_consume_token(LBRACE);
        label_35:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSERT:
          case BOOLEAN:
          case BREAK:
          case BYTE:
          case CHAR:
          case CLASS:
          case CONTINUE:
          case DO:
          case DOUBLE:
          case FALSE:
          case FINAL:
          case FLOAT:
          case FOR:
          case IF:
          case INT:
          case INTERFACE:
          case LONG:
          case NEW:
          case NULL:
          case RETURN:
          case SHORT:
          case SUPER:
          case SWITCH:
          case SYNCHRONIZED:
          case THIS:
          case THROW:
          case TRUE:
          case TRY:
          case VOID:
          case WHILE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
          case SEMICOLON:
          case INCR:
          case DECR:
          case BLOCK_PLACEHOLDER:
          case IDENTIFIER_PLACEHOLDER:
            ;
            break;
          default:
            jj_la1[101] = jj_gen;
            break label_35;
          }
          BlockStatement();
        }
        jj_consume_token(RBRACE);
        break;
      case BLOCK_PLACEHOLDER:
        jj_consume_token(BLOCK_PLACEHOLDER);
        jj_consume_token(LPAREN);
        Identifier();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   setComment(jjtn000,tk);
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public void BlockStatement() throws ParseException {
 /*@bgen(jjtree) BlockStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_35(2147483647)) {
        LocalVariableDeclaration();
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
        case BLOCK_PLACEHOLDER:
        case IDENTIFIER_PLACEHOLDER:
          Statement();
          break;
        case CLASS:
        case INTERFACE:
          ClassOrInterfaceDeclaration(0);
          break;
        default:
          jj_la1[103] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void LocalVariableDeclaration() throws ParseException {
 /*@bgen(jjtree) LocalVariableDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTLOCALVARIABLEDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);int modifiers=0;
 Token tkf=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        tkf = jj_consume_token(FINAL);
                  modifiers|=ModifierSet.FINAL;
        break;
      default:
        jj_la1[104] = jj_gen;
        ;
      }
      Type();
      VariableDeclarator();
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[105] = jj_gen;
          break label_36;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   setComment(jjtn000,tkf);
   jjtn000.addTerm(createTerm("Modifiers",createInt(modifiers)),0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EmptyStatement() throws ParseException {
 /*@bgen(jjtree) EmptyStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTEMPTYSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   setComment(jjtn000,tk);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StatementExpression() throws ParseException {
 /*@bgen(jjtree) StatementExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        PreIncrementExpression();
        break;
      case DECR:
        PreDecrementExpression();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case IDENTIFIER_PLACEHOLDER:
        PrimaryExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
        case INCR:
        case DECR:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INCR:
            tk = jj_consume_token(INCR);
               jjtn000.addTerm(createString("++"),1);
            break;
          case DECR:
            tk = jj_consume_token(DECR);
               jjtn000.addTerm(createString("--"),1);
            break;
          case ASSIGN:
          case PLUSASSIGN:
          case MINUSASSIGN:
          case STARASSIGN:
          case SLASHASSIGN:
          case ANDASSIGN:
          case ORASSIGN:
          case XORASSIGN:
          case REMASSIGN:
          case LSHIFTASSIGN:
          case RSIGNEDSHIFTASSIGN:
          case RUNSIGNEDSHIFTASSIGN:
            AssignmentOperator();
            Expression();
            break;
          default:
            jj_la1[106] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[107] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
   setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void SwitchStatement() throws ParseException {
 /*@bgen(jjtree) SwitchStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTSWITCHSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(SWITCH);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case _DEFAULT:
          ;
          break;
        default:
          jj_la1[109] = jj_gen;
          break label_37;
        }
        SwitchStatementLabelBlock();
      }
      jj_consume_token(RBRACE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SwitchStatementLabelBlock() throws ParseException {
 /*@bgen(jjtree) SwitchStatementLabelBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHSTATEMENTLABELBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SwitchLabel();
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
        case BLOCK_PLACEHOLDER:
        case IDENTIFIER_PLACEHOLDER:
          ;
          break;
        default:
          jj_la1[110] = jj_gen;
          break label_38;
        }
        BlockStatement();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SwitchLabel() throws ParseException {
 /*@bgen(jjtree) SwitchLabel */
 SimpleNode jjtn000 = new SimpleNode(JJTSWITCHLABEL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        tk = jj_consume_token(CASE);
        Expression();
        jj_consume_token(COLON);
        break;
      case _DEFAULT:
        tk = jj_consume_token(_DEFAULT);
        jj_consume_token(COLON);
                      jjtn000.addTerm(createAtom("default"),0);
        break;
      default:
        jj_la1[111] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        Statement();
        break;
      default:
        jj_la1[112] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DoStatement() throws ParseException {
 /*@bgen(jjtree) DoStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTDOSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(DO);
      Statement();
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForStatement() throws ParseException {
 /*@bgen(jjtree) ForStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      if (jj_2_36(2147483647)) {
        ForEachLoopHead();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case SEMICOLON:
        case INCR:
        case DECR:
        case IDENTIFIER_PLACEHOLDER:
          TraditionalForLoopHead();
          break;
        default:
          jj_la1[113] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAREN);
      Statement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForEachLoopHead() throws ParseException {
 /*@bgen(jjtree) ForEachLoopHead */
  SimpleNode jjtn000 = new SimpleNode(JJTFOREACHLOOPHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      Identifier();
      jj_consume_token(COLON);
      Expression();
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void TraditionalForLoopHead() throws ParseException {
 /*@bgen(jjtree) TraditionalForLoopHead */
 SimpleNode jjtn000 = new SimpleNode(JJTTRADITIONALFORLOOPHEAD);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);boolean hasInit=false;
 boolean  hasExpression=false;
 boolean  hasUpdate=false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
      case IDENTIFIER_PLACEHOLDER:
        ForInit();
              hasInit=true;
        break;
      default:
        jj_la1[114] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case EXPRESSION_PLACEHOLDER:
      case IDENTIFIER_PLACEHOLDER:
        Expression();
                                                  hasExpression=true;
        break;
      default:
        jj_la1[115] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
      case IDENTIFIER_PLACEHOLDER:
        ForUpdate();
                                                                                           hasUpdate=true;
        break;
      default:
        jj_la1[116] = jj_gen;
        ;
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   if (hasInit==false) {
    jjtn000.addTerm(createNil(),0);
   }
   if (hasExpression==false) {
    jjtn000.addTerm(createNil(),1);
   }
   if (hasUpdate==false) {
    jjtn000.addTerm(createNil(),2);
   }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void ForInit() throws ParseException {
 /*@bgen(jjtree) ForInit */
  SimpleNode jjtn000 = new SimpleNode(JJTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_37(2147483647)) {
        LocalVariableDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
        case IDENTIFIER_PLACEHOLDER:
          StatementExpressionList();
          break;
        default:
          jj_la1[117] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StatementExpressionList() throws ParseException {
 /*@bgen(jjtree) StatementExpressionList */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      StatementExpression();
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[118] = jj_gen;
          break label_39;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForUpdate() throws ParseException {
 /*@bgen(jjtree) ForUpdate */
  SimpleNode jjtn000 = new SimpleNode(JJTFORUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      StatementExpressionList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BreakStatement() throws ParseException {
 /*@bgen(jjtree) BreakStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case IDENTIFIER_PLACEHOLDER:
        Identifier();
        break;
      default:
        jj_la1[119] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ContinueStatement() throws ParseException {
 /*@bgen(jjtree) ContinueStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTCONTINUESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(CONTINUE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case IDENTIFIER_PLACEHOLDER:
        Identifier();
        break;
      default:
        jj_la1[120] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ReturnStatement() throws ParseException {
 /*@bgen(jjtree) ReturnStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTRETURNSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case EXPRESSION_PLACEHOLDER:
      case IDENTIFIER_PLACEHOLDER:
        Expression();
        break;
      default:
        jj_la1[121] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ThrowStatement() throws ParseException {
 /*@bgen(jjtree) ThrowStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTTHROWSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(THROW);
      Expression();
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SynchronizedStatement() throws ParseException {
 /*@bgen(jjtree) SynchronizedStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTSYNCHRONIZEDSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(SYNCHRONIZED);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Block();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TryStatement() throws ParseException {
 /*@bgen(jjtree) TryStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTTRYSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(TRY);
      Block();
      CatchSequence();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        jj_consume_token(FINALLY);
        Block();
        break;
      default:
        jj_la1[122] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CatchSequence() throws ParseException {
 /*@bgen(jjtree) CatchSequence */
  SimpleNode jjtn000 = new SimpleNode(JJTCATCHSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[123] = jj_gen;
          break label_40;
        }
        Catch();
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void Catch() throws ParseException {
 /*@bgen(jjtree) Catch */
 SimpleNode jjtn000 = new SimpleNode(JJTCATCH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(CATCH);
      jj_consume_token(LPAREN);
      FormalParameter();
      jj_consume_token(RPAREN);
      Block();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
  final public void RUNSIGNEDSHIFT() throws ParseException {
 /*@bgen(jjtree) RUNSIGNEDSHIFT */
  SimpleNode jjtn000 = new SimpleNode(JJTRUNSIGNEDSHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (getToken(1).kind == GT &&
                      ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(GT);
      jj_consume_token(GT);
      jj_consume_token(GT);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void RSIGNEDSHIFT() throws ParseException {
 /*@bgen(jjtree) RSIGNEDSHIFT */
  SimpleNode jjtn000 = new SimpleNode(JJTRSIGNEDSHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (getToken(1).kind == GT &&
                      ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(GT);
      jj_consume_token(GT);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Annotation syntax follows. */
  final public SimpleNode Annotation() throws ParseException {
 /*@bgen(jjtree) Annotation */
 SimpleNode jjtn000 = new SimpleNode(JJTANNOTATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);SimpleNode sn=null;
    try {
      if (jj_2_38(2147483647)) {
        sn = NormalAnnotation();
      } else if (jj_2_39(2147483647)) {
        sn = SingleMemberAnnotation();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT:
          sn = MarkerAnnotation();
          break;
        default:
          jj_la1[124] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    if (sn!=null) {
      jjtn000.setAttribute("comment",sn.getAttribute("comment"));
    }
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode NormalAnnotation() throws ParseException {
 /*@bgen(jjtree) NormalAnnotation */
 SimpleNode jjtn000 = new SimpleNode(JJTNORMALANNOTATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(AT);
      Name();
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case IDENTIFIER_PLACEHOLDER:
        MemberValuePairs();
        break;
      default:
        jj_la1[125] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     if (tk.specialToken!=null) {
        String comment=getSpecialToken(tk);
        jjtn000.setAttribute("comment",comment);
        jjtn000.setAttribute("original_comment",comment);
     }
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode MarkerAnnotation() throws ParseException {
 /*@bgen(jjtree) MarkerAnnotation */
 SimpleNode jjtn000 = new SimpleNode(JJTMARKERANNOTATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(AT);
      Name();
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     if (tk.specialToken!=null) {
        String comment=getSpecialToken(tk);
        jjtn000.setAttribute("comment",comment);
        jjtn000.setAttribute("original_comment",comment);
     }
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SimpleNode SingleMemberAnnotation() throws ParseException {
 /*@bgen(jjtree) SingleMemberAnnotation */
 SimpleNode jjtn000 = new SimpleNode(JJTSINGLEMEMBERANNOTATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(AT);
      Name();
      jj_consume_token(LPAREN);
      MemberValue();
      jj_consume_token(RPAREN);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     if (tk.specialToken!=null) {
        String comment=getSpecialToken(tk);
        jjtn000.setAttribute("comment",comment);
        jjtn000.setAttribute("original_comment",comment);
     }
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void MemberValuePairs() throws ParseException {
 /*@bgen(jjtree) MemberValuePairs */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERVALUEPAIRS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MemberValuePair();
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[126] = jj_gen;
          break label_41;
        }
        jj_consume_token(COMMA);
        MemberValuePair();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void MemberValuePair() throws ParseException {
 /*@bgen(jjtree) MemberValuePair */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERVALUEPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      jj_consume_token(ASSIGN);
      MemberValue();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MemberValue() throws ParseException {
 /*@bgen(jjtree) MemberValue */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        Annotation();
        break;
      case LBRACE:
        MemberValueArrayInitializer();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case IDENTIFIER_PLACEHOLDER:
        ConditionalExpression();
        break;
      default:
        jj_la1[127] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void MemberValueArrayInitializer() throws ParseException {
 /*@bgen(jjtree) MemberValueArrayInitializer */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERVALUEARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      MemberValue();
      label_42:
      while (true) {
        if (jj_2_40(2)) {
          ;
        } else {
          break label_42;
        }
        jj_consume_token(COMMA);
        MemberValue();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[128] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Annotation Types. */
  final public void AnnotationTypeDeclaration(int modifiers) throws ParseException {
 /*@bgen(jjtree) AnnotationTypeDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTANNOTATIONTYPEDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(AT);
      jj_consume_token(INTERFACE);
      Identifier();
      AnnotationTypeBody();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AnnotationTypeBody() throws ParseException {
 /*@bgen(jjtree) AnnotationTypeBody */
  SimpleNode jjtn000 = new SimpleNode(JJTANNOTATIONTYPEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case IDENTIFIER:
        case SEMICOLON:
        case AT:
        case IDENTIFIER_PLACEHOLDER:
          ;
          break;
        default:
          jj_la1[129] = jj_gen;
          break label_43;
        }
        AnnotationTypeMemberDeclaration();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AnnotationTypeMemberDeclaration() throws ParseException {
 /*@bgen(jjtree) AnnotationTypeMemberDeclaration */
   SimpleNode jjtn000 = new SimpleNode(JJTANNOTATIONTYPEMEMBERDECLARATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);SimpleNode modifiers;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case AT:
      case IDENTIFIER_PLACEHOLDER:
        modifiers = Modifiers();
        if (jj_2_41(2147483647)) {
          Type();
          Identifier();
          jj_consume_token(LPAREN);
          jj_consume_token(RPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case _DEFAULT:
            DefaultValue();
            break;
          default:
            jj_la1[130] = jj_gen;
            ;
          }
          jj_consume_token(SEMICOLON);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CLASS:
          case INTERFACE:
            ClassOrInterfaceDeclaration(modifiers.getSubtermAt(0).getInt());
            break;
          case ENUM:
            EnumDeclaration(modifiers.getSubtermAt(0).getInt());
            break;
          case AT:
            AnnotationTypeDeclaration(modifiers.getSubtermAt(0).getInt());
            break;
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case IDENTIFIER:
          case IDENTIFIER_PLACEHOLDER:
            FieldDeclaration(modifiers.getSubtermAt(0).getInt());
            break;
          default:
            jj_la1[131] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[132] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void DefaultValue() throws ParseException {
 /*@bgen(jjtree) DefaultValue */
 SimpleNode jjtn000 = new SimpleNode(JJTDEFAULTVALUE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      tk = jj_consume_token(_DEFAULT);
      MemberValue();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    setComment(jjtn000,tk);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        tk = jj_consume_token(IDENTIFIER);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
    Term identTerm = TermWare.getInstance().getTermFactory().createString(tk.image);
//    identTerm = TermHelper.setAttribute(identTerm,"line",createInt(tk.beginLine));
//    identTerm = TermHelper.setAttribute(identTerm,"file",createString(inFname));
    jjtn000.addTerm( identTerm, 0);
    jjtn000.setAttribute("line",createInt(tk.beginLine));
    jjtn000.setAttribute("file",createString(inFname));
    if (tk.specialToken!=null) {
        String comment=getSpecialToken(tk);
        jjtn000.setAttribute("original_comment",comment);
    }
        break;
      case IDENTIFIER_PLACEHOLDER:
        tk = jj_consume_token(IDENTIFIER_PLACEHOLDER);
        jj_consume_token(LPAREN);
        Identifier();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[133] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_3R_172() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_148()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(IDENTIFIER_PLACEHOLDER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_192()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_3R_166()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_149()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_327() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_3R_59()) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_327()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_328()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_329() {
    if (jj_3R_266()) return true;
    return false;
  }

  final private boolean jj_3R_314() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_329()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(84)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_314()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_3R_75()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_3R_313()) return true;
    return false;
  }

  final private boolean jj_3R_281() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) jj_scanpos = xsp;
    if (jj_3R_294()) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_40()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(84)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_348() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_347()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_75()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_326() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_3R_156()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_168()) return true;
    return false;
  }

  final private boolean jj_3R_313() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_326()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3R_347() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_158()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_325() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_346() {
    if (jj_3R_347()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_348()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_157()) return true;
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_325()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_156()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  final private boolean jj_3R_344() {
    if (jj_3R_346()) return true;
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_3R_313()) return true;
    return false;
  }

  final private boolean jj_3R_291() {
    if (jj_3R_312()) return true;
    return false;
  }

  final private boolean jj_3R_290() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_3R_221()) return true;
    }
    if (jj_3R_58()) return true;
    xsp = jj_scanpos;
    if (jj_3R_290()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_291()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_292()) jj_scanpos = xsp;
    if (jj_3R_255()) return true;
    return false;
  }

  final private boolean jj_3R_359() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    return false;
  }

  final private boolean jj_3R_343() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_311()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_342() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_280()) return true;
    return false;
  }

  final private boolean jj_3R_335() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_342()) {
    jj_scanpos = xsp;
    if (jj_3R_343()) return true;
    }
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_344()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_336() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_359()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_171()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_3R_165()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_169()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_123() {
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    return false;
  }

  final private boolean jj_3R_324() {
    if (jj_3R_336()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_123()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_323() {
    if (jj_3R_335()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_124()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_322() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    }
    if (jj_3R_280()) return true;
    return false;
  }

  final private boolean jj_3R_311() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_322()) {
    jj_scanpos = xsp;
    if (jj_3R_323()) {
    jj_scanpos = xsp;
    if (jj_3R_324()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_370() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_330()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_363() {
    if (jj_3R_370()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_357() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_363()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_341() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_358() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_3R_311()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_92()) return true;
    if (jj_3R_357()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_358()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_287() {
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_273() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_340() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3R_320() {
    if (jj_3R_334()) return true;
    return false;
  }

  final private boolean jj_3R_280() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_286()) {
    jj_scanpos = xsp;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_286() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    if (jj_3R_280()) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_369() {
    if (jj_3R_377()) return true;
    return false;
  }

  final private boolean jj_3R_356() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_339() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_355() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_334() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_339()) {
    jj_scanpos = xsp;
    if (jj_3R_340()) {
    jj_scanpos = xsp;
    if (jj_3R_341()) return true;
    }
    }
    if (jj_3R_280()) return true;
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_3R_321()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_356()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_272() {
    if (jj_3R_280()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_320()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_310() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_354() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_381() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_245()) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_355()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_321() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    if (jj_3R_272()) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_354()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_309() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_3R_272()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_306()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_368() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_377() {
    if (jj_3R_380()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_380() {
    if (jj_3R_245()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_381()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_308() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  final private boolean jj_3R_379() {
    if (jj_3R_380()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    if (jj_3R_268()) return true;
    return false;
  }

  final private boolean jj_3R_378() {
    if (jj_3R_199()) return true;
    return false;
  }

  final private boolean jj_3R_376() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_378()) {
    jj_scanpos = xsp;
    if (jj_3R_379()) return true;
    }
    return false;
  }

  final private boolean jj_3R_279() {
    if (jj_3R_285()) return true;
    return false;
  }

  final private boolean jj_3R_270() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_3R_268()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_307() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_285() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) {
    jj_scanpos = xsp;
    if (jj_3R_308()) {
    jj_scanpos = xsp;
    if (jj_3R_309()) {
    jj_scanpos = xsp;
    if (jj_3R_310()) return true;
    }
    }
    }
    if (jj_3R_265()) return true;
    return false;
  }

  final private boolean jj_3R_367() {
    if (jj_3R_376()) return true;
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_3R_271()) return true;
    return false;
  }

  final private boolean jj_3R_362() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_367()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_368()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_369()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_3R_265()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_279()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_243()) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_3R_257()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_270()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_361() {
    if (jj_3R_59()) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_3R_59()) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_203()) return true;
    return false;
  }

  final private boolean jj_3R_271() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    if (jj_3R_250()) return true;
    return false;
  }

  final private boolean jj_3R_353() {
    if (jj_3R_362()) return true;
    return false;
  }

  final private boolean jj_3R_351() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_200()) return true;
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_223()) return true;
    return false;
  }

  final private boolean jj_3R_352() {
    if (jj_3R_361()) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_198()) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_3R_250()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_267()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_191()) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_352()) {
    jj_scanpos = xsp;
    if (jj_3R_353()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_200()) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_3R_243()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_264()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_3R_223()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_256()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_200()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_3R_203()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_249()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_3R_198()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_242()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_200()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_191()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_222()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_3R_182()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_200()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_351()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_366() {
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_345() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_300()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_375() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_374() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_365() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_374()) {
    jj_scanpos = xsp;
    if (jj_3R_375()) return true;
    }
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(EXPRESSION_PLACEHOLDER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_68()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_360() {
    if (jj_3R_365()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_366()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_163()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    return false;
  }

  final private boolean jj_3R_350() {
    if (jj_3R_360()) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_350()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_332() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_373() {
    if (jj_3R_68()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_316() {
    if (jj_3R_83()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_332()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_372() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  final private boolean jj_3R_371() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  final private boolean jj_3R_364() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_371()) {
    jj_scanpos = xsp;
    if (jj_3R_372()) {
    jj_scanpos = xsp;
    if (jj_3R_373()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_364()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    if (jj_3R_300()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_345()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_3R_201()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_3R_200()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_3R_199()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_349() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_3R_251()) return true;
    return false;
  }

  final private boolean jj_3R_251() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) return true;
    }
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(BLOCK_PLACEHOLDER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_173()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_244()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    return false;
  }

  final private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) return true;
    }
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_200()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_107()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_204()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_349()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_3R_245()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_74()) return true;
    Token xsp;
    if (jj_3_11()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_3R_237()) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_236()) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_3R_235()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_3R_234()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_3R_233()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_3R_232()) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_3R_231()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_3R_230()) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_3R_229()) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_3R_228()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_227()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_226()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_3R_225()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_3R_224()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_65()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_3R_152()) return true;
    return false;
  }

  final private boolean jj_3R_338() {
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    Token xsp;
    if (jj_3_33()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_297() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_316()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_64()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_154()) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_3R_246()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_247()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_3R_255()) return true;
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_319() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_331() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_330()) return true;
    return false;
  }

  final private boolean jj_3R_295() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_282() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_295()) jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    if (jj_3R_296()) return true;
    xsp = jj_scanpos;
    if (jj_3R_297()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_298()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_299()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_3R_64()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_248()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3R_337() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_160()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) return true;
    }
    return false;
  }

  final private boolean jj_3R_330() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_337()) jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    xsp = jj_scanpos;
    if (jj_3R_338()) jj_scanpos = xsp;
    if (jj_3R_317()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_74()) return true;
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3R_315() {
    if (jj_3R_330()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_331()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    return false;
  }

  final private boolean jj_3R_296() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_315()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_174()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_304() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_316()) return true;
    return false;
  }

  final private boolean jj_3R_303() {
    if (jj_3R_58()) return true;
    if (jj_3R_296()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_319()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_305() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_302()) jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    if (jj_3R_303()) return true;
    xsp = jj_scanpos;
    if (jj_3R_304()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_305()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_262()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_318() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_301() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_300()) return true;
    return false;
  }

  final private boolean jj_3R_333() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_152()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_317() {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_333()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_300() {
    if (jj_3R_317()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_318()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_3R_59()) return true;
    if (jj_3R_300()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_301()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_59()) return true;
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_3R_284()) return true;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_3R_283()) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_3R_190()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_276() {
    if (jj_3R_282()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_3R_188()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_3R_281()) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_3R_187()) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_3R_201()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_3R_186()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_3R_185()) return true;
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_3R_273()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_269()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_3R_266()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_328() {
    if (jj_3R_255()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_263()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  public JJTJavaParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[134];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x90202000,0x0,0x0,0x80002000,0x10200000,0x90202000,0x200000,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x9432a000,0x0,0x0,0x0,0x0,0x20000000,0x0,0x9432a000,0x10200000,0x4128000,0x9432a000,0x0,0x0,0x0,0x44128000,0x44128000,0x0,0x0,0x0,0x0,0x0,0x0,0x84128000,0x80000000,0x0,0x0,0x0,0xc6b3c000,0x44128000,0x0,0x4128000,0x4128000,0x0,0x20000000,0x4128000,0x20000000,0x4128000,0x4128000,0x0,0x44128000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44128000,0x0,0x0,0x44128000,0x40000000,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x44128000,0x0,0x0,0x0,0x0,0x0,0x0,0x44128000,0x4693c000,0x0,0xc6b3c000,0x0,0x46b3c000,0x80000000,0x0,0x0,0x0,0x44128000,0x1040000,0xc6b3c000,0x1040000,0x8000000,0xc4128000,0xc4128000,0x44128000,0x44128000,0x44128000,0x0,0x0,0x0,0x44128000,0x0,0x80000,0x0,0x0,0x0,0x44128000,0x0,0x9432a000,0x1000000,0x14328000,0x9432a000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x4000,0x40,0x11338a00,0x100000,0x0,0x11338800,0x200,0x11338a00,0x200,0x0,0x0,0x20,0x0,0x0,0x20,0x0,0x913b8f02,0x0,0x0,0x0,0x0,0x0,0x0,0x913b8f02,0x200,0x80080502,0x913b8f02,0x0,0x0,0x0,0xa2483502,0xa2483502,0x0,0x0,0x8000000,0x0,0x0,0x0,0x80502,0x0,0x0,0x0,0x8000000,0xe7cc3716,0xa2483502,0x100000,0x80502,0x80502,0x0,0x400000,0x80502,0x400000,0x80502,0x80080502,0x0,0xa2483502,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa2483502,0x0,0x0,0xa2483502,0x22403000,0x0,0x0,0x0,0x0,0x22403000,0x0,0x0,0x0,0x0,0x0,0x20002000,0x20000000,0xa2483502,0x0,0x0,0x0,0x0,0x1000,0x0,0xa2483502,0xe7cc3516,0x0,0xe7cc3716,0x0,0xe7cc3716,0x0,0x0,0x0,0x0,0xa2483502,0x0,0xe7cc3716,0x0,0x0,0xa2483502,0xa2483502,0xa2483502,0xa2483502,0xa2483502,0x0,0x0,0x0,0xa2483502,0x1,0x0,0x0,0x0,0x0,0xa2483502,0x0,0x113b8f02,0x0,0x80702,0x113b8f02,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x480001,0x0,0x200000,0x400001,0x400000,0x480001,0x0,0x1000000,0x0,0x0,0x100000,0x100000,0x0,0x100000,0x1488401,0x80000,0x2000,0x8000,0x100000,0x0,0x0,0x1488401,0x0,0x1000400,0x1480401,0x100000,0x800000,0x20000,0x600a744,0x600a744,0x100000,0x1000000,0x0,0x88000,0x20000,0x100000,0x400,0x0,0x0,0x1000000,0x0,0x8a746,0x2744,0x0,0x0,0x400,0x100000,0x0,0x8000400,0x0,0x0,0x400,0x100000,0x6002744,0x800000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x0,0xc1000000,0xc1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x6002744,0x6000000,0x6000000,0x2744,0x6002744,0x2000,0x0,0x0,0x2000,0x2344,0x400,0x2000,0x20000,0x1000000,0x2000,0x344,0x0,0x6002744,0x100000,0x1000000,0x8000,0x22000,0x0,0x8000,0x6002744,0x8a746,0x10000000,0x8a746,0x8000,0x8a746,0x0,0x100000,0x800000,0x800000,0x2744,0x0,0x8a746,0x0,0x0,0x82744,0x2744,0x6002744,0x2744,0x2744,0x100000,0x400,0x400,0x6002744,0x0,0x0,0x400000,0x400,0x100000,0x640a744,0x100000,0x480401,0x0,0x400400,0x480401,0x400,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x20000000,0x0,0x0,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x200,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000078,0x80000078,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x40000018,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000078,0x1ffc000,0x0,0x2,0x4,0x400,0x800,0x200,0x1,0x1,0x0,0x10000000,0x10000000,0x2000,0x60,0x60,0x1180,0x1180,0x60,0x78,0x0,0x0,0x0,0x0,0x0,0x18,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000078,0x0,0x0,0x0,0x0,0x0,0x0,0x80000078,0x40000018,0x0,0x40000018,0x40000000,0x40000018,0x0,0x0,0x1ffc018,0x1ffc018,0x18,0x0,0x40000018,0x0,0x0,0x18,0x18,0x80000078,0x18,0x18,0x0,0x0,0x0,0x80000078,0x0,0x0,0x0,0x0,0x0,0x78,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x0,0x1,0x1,0x1,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x1,0x1,0x1,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[41];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public JJTJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public JJTJavaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JJTJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 134; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 134; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JJTJavaParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JJTJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 134; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 134; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JJTJavaParser(JJTJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 134; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(JJTJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 134; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[129];
    for (int i = 0; i < 129; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 134; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 129; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 41; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
