
system("TrackOpenClose",javaFacts("ProxyJavaFacts","ua.gradsoft.javachecker.ProxyJavaFacts"),
  ruleset(

     import(general,logical_and),
     import(general,logical_or),
     import(general,logical_not),
     import(general,eq),
     import(general,apply),
     import(general,unify),
     import(general,if),
     import(general,reduce),

     ClassOrInterfaceModel($modifiers,interface,$name,$typeParameters,$extendsList,$implementsList,$body,$context) -> true,
     ClassOrInterfaceModel($modifiers,class,$name,$typeParameters,$extendsList,$implementsList,$body,$context) -> CheckMemberVariables($body,$context) && CheckFunctions($body,$context),
     EnumModel($modifiers,$identifier,$superInterfaces, $enumConstantsList,$membersList,$context) -> CheckFunctions($membersList,$context),
     EnumConstantModel($identifier,$arguments,$subtype) -> $subtype,
     EnumAnonimousTypeModel($identifier,$membersList,$context) -> CheckFunctions($membersList,$context),

     CheckMemberVariables(ClassOrInterfaceBody($x),$ctx) -> CheckMemberVariables($x,$ctx),
     CheckMemberVariables([$x:$y],$ctx) -> CheckMemberVariables($x,$ctx) && CheckMemberVariables($y,$ctx),
     CheckMemberVariables([],$ctx) -> true,
     CheckMemberVariables(ConstructorModel($modifiers,$typeParameters,$identifier,$formalParameters,$trowsNameList,$blockModel,$context),$ctx) -> true,
     CheckMemberVariables(MethodModel($modifiers,$typeParameters,$returnType, $identifier,$formalParameters,$trowsNameList,$blockModel,$context),$classCtx) -> true,
     CheckMemberVariables(MemberVariableModel($modifiers, $typeRef, $name, $initializer,$model),$classCtx) ->  IsResource($typeRef) ? ClosedInFinalize($model,$classCtx) : true,

     CheckFunctions(ClassOrInterfaceBody($x),$ctx) -> CheckFunctions($x,$ctx),   
     CheckFunctions([$x:$y],$ctx) -> CheckFunctions($x,$ctx) && CheckFunctions($y,$ctx),
     CheckFunctions([],$ctx) -> true,

#
# skip checks in constructors.
#
     CheckFunctions(ConstructorModel($modifiers,$typeParameters,$identifier,$formalParameters,$trowsNameList,$blockModel,$context),$ctx) -> true,
#CheckBlock($blockModel),

     CheckFunctions(MethodModel($modifiers,$typeParameters,$returnType, $identifier,$formalParameters,$trowsNameList,$blockModel,$context),$classCtx) -> Q(CheckBlock($blockModel)),
     CheckFunctions(MemberVariableModel($modifiers, $typeRef, $name, $initializer,$model),$classCtx) -> true,

     CheckBlock($x) -> CheckBlock($x,[]),


     CheckBlock([$x:$y],$state) -> CheckReturn($state,CheckBlock($y,CheckStatement($x,$state))), 
     CheckBlock([],$state) -> $state,

     CheckBlock($x, $state1 && $state2) -> CheckBlock($x, $state1) && CheckBlock($x, $state2),
     CheckBlock($x, $state1 || $state2) -> CheckBlock($x, $state1) || CheckBlock($x, $state2),

     CheckBlock($x,RETURN($state)) -> RETURN($state),
     
     CheckStatement(NIL,$state) -> $state,

     CheckStatement($x,$state1 && $state2) -> CheckStatement($x,$state1) && CheckStatement($x,$state2),
     CheckStatement($x,$state1 || $state2) -> CheckStatement($x,$state1) || CheckStatement($x,$state2),

       
     CheckStatement(BlockStatementModel([$x:$y],$ctx),$state) -> CheckBlock([$x:$y],$state),
     CheckStatement(BlockStatementModel([],$ctx),$state) -> $state,


     CheckStatement(TryStatementModel($block,$catchSeq,$finally,$ctx),$state) -> ApplyFirst.CheckStatementR(TryStatementModel($block,$catchSeq,$finally,$ctx),apply(TrackOpenClose,$state)),


     CheckStatementR(
       TryStatementModel(
          BlockStatementModel([$x:$y],$ctx0),
          $catchSeq,
          $finally,
          $ctx),$state) 
             ->
    CheckFinalStatement($finally,CheckStatement($x,CheckStatement($y,$state)))
        &&
    CheckFinalStatement($finally,
        CheckStatement($catchSeq,CheckStatement($x,$state)))
                                                                 , 

     CheckStatementR(
       TryStatementModel(
          BlockStatementModel([],$ctx0),
          $catchSeq,
          $finally,
          $ctx),$state) 
             -> CheckStatement($finally,$state),

     CheckFinalStatement($x,$y) -> unify($y,RETURN($z)) ? RETURN(CheckStatement($x,$z)) : CheckStatement($x,$y) ,
                                 
     CheckStatement(ThrowStatementModel($expr,$ctx),$state) -> $state,

     CheckStatement(LocalVariableDeclarationModel([$x:$y],$ctx),$state) -> CheckStatement(LocalVariableDeclarationModel($y,$ctx),addLocalVariable($x,$state)),
     CheckStatement(LocalVariableDeclarationModel([],$ctx),$state) -> $state,

     addLocalVariable(LocalVariableModel(TypeRef($tname,$type),$id,$expr,$ctx),$state) -> CheckExpression($id,$expr,$state),
                                                                                    
     CheckStatement(StatementExpressionStatement($expr,$ctx),$state) -> CheckExpression(NONE,$expr,$state),

     CheckStatement(AssertStatementModel($expr,$ctx),$state) -> $state,

     CheckStatement(BreakStatementModel($label,$ctx),$state) -> $state,
     CheckStatement(ContinueStatementModel($label,$ctx),$state) -> $state,

     CheckStatement(CatchSequenceModel([$x:$y],$ctx),$state) -> CheckStatement(CatchSequenceModelR([$x:$y]),ApplyFirst.apply(TrackOpenClose,$state)),
     CheckStatement(CatchSequenceModelR([$x:$y]),$state) -> CheckStatement($x,$state) && CheckStatement(CatchSequenceModelR($y),$state),
     CheckStatement(CatchSequenceModelR([]),$state) -> $state,


     CheckStatement(CatchSequenceModel([],$ctx),$state) -> $state,

     CheckStatement(CatchModel($fp,$blockModel,$ctx),$state) -> CheckStatement($blockModel,$state),

     CheckStatement(ClassOrInterfaceDeclarationModel($model,$ctx),state) -> Q($model) && $state,

     CheckStatement(EmptyStatementModel($ctx),$state) -> $state,

     CheckStatement(DoStatementModel($internal,$condition,$ctx),$state) -> CheckStatement($internal,CheckExpression(NONE,$condition,$state)),

     CheckStatement(WhileStatementModel($expr,$child,$ctx),$state) -> ApplyFirst.CheckStatementR(WhileStatementModel($expr,$child,$ctx),apply(TrackOpenClose,$state)),

     CheckStatementR(WhileStatementModel($expr,$child,$ctx),$state) -> CheckStatement($child,CheckExpression(NONE,$expr,$state)) || CheckExpression(NONE,$expr,$state),

     CheckStatement(IfStatementModel($expr,$s1,$s2,$ctx),$state) -> ApplyFirst.CheckStatementR(IfStatementModel($expr,$s1,$s2,$ctx),apply(TrackOpenClose,$state)),

     CheckStatementR(IfStatementModel($expr,$s1,$s2,$ctx),$state) -> CheckReturn($state,CheckStatement($s1,CheckExpression(NONE,$expr,$state)) || CheckReturn($state,CheckStatement($s2,CheckExpression(NONE,$expr,$state)))),


     CheckStatement(ForStatementModel(ForEachLoopHeadModel($type,$id,$expr),$statement,$ctx),$state) -> CheckStatement($statement,CheckExpression(NONE,$expr,$state)),

     CheckStatement(ForStatementModel(TraditionalForLoopHeadModel($init,$condition,$increment),$statement,$ctx),$state) -> CheckStatement($statement,CheckExpression(NONE,$condition,CheckForInits($init,$state))),

     CheckForInits([],$state) -> $state,

     CheckForInits([$x:$y],$state) -> CheckForInit($x,CheckForInits($y,$state)),

     CheckForInit($x,$state) [ getName($x)==LocalVariableModel ] -> addLocalVariable($x,$state)
                                                                 !-> $state,

     CheckStatement(ExplicitSuperInvocationModel($primary,$arguments,$ctx),$state) -> CheckExpression(NONE,$primary,CheckExpressions($arguments,$state)),

     CheckStatement(ExplicitThisInvocationModel($arguments,$ctx),$state) -> CheckExpressions($arguments,$state),

     CheckStatement(LabeledStatementModel($label,$stmt,$ctx),$state) -> CheckStatement($stmt,$state),

     CheckStatement($x,RETURN($y)) -> RETURN($y),
     CheckExpression($var,$expr,RETURN($state)) -> RETURN($state),

     #CheckStatement(ReturnStatementModel($expr,$ctx),$state) -> RETURN(CheckExpression(NONE,$expr,$state)),
     # TODO: mark current method as creating new
     CheckStatement(ReturnStatementModel($expr,$ctx),$state) -> RETURN(merge(CHANGE($expr,RETURN),CheckExpression(none,$expr,$state))),

     CheckStatement(SwitchStatementModel($expr,[$x:$y],$ctx),$state) -> CheckStatement($x,$state) && CheckStatement(SwitchStatementModel($expr,$y,$ctx),$state),
     CheckStatement(SwitchStatementModel($expr,[],$ctx),$state) -> true,

     CheckStatement(SwitchLabelBlockModel($expr,$statements,$ctx),$state) -> CheckBlock($statements,$state),

     CheckStatement(SynchronizedStatementModel($expr,$stmt,$ctx),$state) -> CheckStatement($stmt,$state),

     CheckExpression($var,FunctionCallModel($name,$arguments,$methodModel,$ctx),$state)
          [           
           $ctx.subtypeOrSame(
              $methodModel.getResultType(),
              $ctx.resolveFullClassName("java.io.Closeable")
                       )         
            &&
             $methodModel.getAttribute("ResourceFactory")==true
          ] -> CheckReturn($state,merge(CHANGE($var,OPEN,$ctx.getFileAndLine()),$state)) [ [ print("1:"), println($name) ] ]
           !-> CheckReturn($state,CheckExpressions($arguments,$state)),

     CheckExpressions([$x:$y],$state) -> CheckExpressions($y,CheckExpression(NONE,$x,$state)),
     CheckExpressions([],$state) -> $state,

     CheckExpressions($var,[$x:$y],$state) -> CheckExpressions($var,$y,CheckExpression($var,$x,$state)),
     CheckExpressions($var,[],$state) -> $state,

     CheckExpression($var, MethodCallModel($obj,$id,$arguments,$methodModel,$ctx), $state)
        [
           $ctx.subtypeOrSame(
              $methodModel.getResultType(),
              $ctx.resolveFullClassName("java.io.Closeable")
                       )                   
            &&
             $methodModel.getAttribute("ResourceFactory")==true
        ] -> CheckReturn($state,merge(CHANGE($var,OPEN,$ctx.getFileAndLine()),CheckExpression(NONE,$obj,$state))) 
        |
        [
          $ctx.subtypeOrSame(
             ModelHelper.getType($obj),
             $ctx.resolveFullClassName("java.io.Closeable")
          )
           &&
          $methodModel.getName()=="close"           
        ] 
           -> merge(CHANGE($obj,CLOSE),$state) 
          !-> CheckReturn($state,CheckExpressions($arguments,$state)),


     CheckExpression($var,AllocationExpressionModel(TypeRef($tname,$type),$arguments,$ctx),$state)
       [
         $ctx.subtypeOrSame($type,$ctx.resolveFullClassName("java.io.Closeable")) 
         &&
            ! ($type.getAttribute("NotCloseable")==true)
       ]-> CheckAllocationNotProxy($var,$type,$arguments,$ctx,$state)
       !-> CheckExpressions($arguments,$state),

    CheckAllocationNotProxy($var,$type,$arguments,$ctx,$state) 
        ->  
           (
            !($type.getAttribute("CloseableProxy")==true)
            ||  
              (apply(openclose::CloseableArguments,apply(NormalizeExpressions,$arguments)))
           )
                ?
                  CheckReturn($state,merge(CHANGE($var,OPEN,$ctx.getFileAndLine()),$state))
                 :CheckExpressions($var,$arguments,$state),



     CheckExpression($var,InnerAllocationExpressionModel($ownerType,TypeRef($tname,$type),$arguments,$ctx),$state)
       [
         $ctx.subtypeOrSame($type,$ctx.resolveFullClassName("java.io.Closeable"))
       ]
         -> CheckReturn($state,merge(CHANGE($var,OPEN,$ctx.getFileAndLine()),$state))
        !-> CheckExpressions($arguments,$state),
        

     CheckExpression($var,AssigmentExpressionModel($left,$right,$op,$ctx),$state)
          ->  CheckReturn($state,CheckExpression($left,$right,$state)),


     CheckExpression($var,AdditiveExpressionModel($x,$y,$op,$ctx),$state) -> CheckExpression($var,$y,CheckExpression($var,$x,$state)),
     CheckExpression($var,AndExpressionModel($x,$y,$ctx),$state) -> CheckExpression($var,$y,CheckExpression($var,$x,$state)),    
     CheckExpression($var,ArrayIndexExpressionModel($array,$index,$ctx),$state) -> CheckExpression(NONE,$index,CheckExpression(NONE,$array,$state)),
     CheckExpression($var,ArrayInitializerModel($list),$state) -> $state,
     CheckExpression($var,CastExpressionModel($type,$x,$ctx),$state) -> CheckExpression($var,$x,$state),
     CheckExpression($var,ClassLiteralModel($typeRef,$ctx),$state) -> $state,
     CheckExpression($var,ConditionalAndExpressionModel($x,$y,$ctx),$state) -> CheckExpression(NONE,$y,CheckExpression(NONE,$x,$state)),

     # Up-bound is OR
     CheckExpression($var,ConditionalExpressionModel($condition,$ifTrue,$ifFalse,$ctx),$state) 
                          -> CheckExpression($var,$ifTrue,CheckExpression(NONE,$condition,$state)) 
                                  ||
                             CheckExpression($var,$ifFalse,CheckExpression(NONE,$condition,$state)),


     CheckExpression($var,ConditionalOrExpressionModel($x,$y,$ctx),$state) -> CheckExpression(NONE,$y,CheckExpression(NONE,$x,$state)),
     CheckExpression($var,EqualityExpressionModel($x,$y,$op,$ctx),$state) -> CheckExpression(NONE,$y,CheckExpression(NONE,$x,$state)),
     CheckExpression($var,ExclusiveOrExpressionModel($x,$y,$ctx),$state) -> CheckExpression(NONE,$y,CheckExpression(NONE,$x,$state)),
     CheckExpression($var,InclusiveOrExpressionModel($x,$y,$ctx),$state) -> CheckExpression(NONE,$y,CheckExpression(NONE,$x,$state)),
     CheckExpression($var,MultiplicativeExpressionModel($x,$y,$op,$ctx),$state) -> CheckExpression(NONE,$y,CheckExpression(NONE,$x,$state)),
     CheckExpression($var,RelationalExpressionModel($x,$y,$op,$ctx),$state) -> CheckExpression(NONE,$y,CheckExpression(NONE,$x,$state)),
     CheckExpression($var,ShiftExpressionModel($x,$y,$op,$ctx),$state) -> CheckExpression(NONE,$y,CheckExpression(NONE,$x,$state)),

     CheckExpression($var,FieldModel($objectOrType,$identifier,$fieldModel,$ctx),$state) -> CheckExpression($var,$objectOrType,$state),

     CheckExpression($var,VariableModel($name,$model),$state) -> $state,
     CheckExpression($var,TypeRef($name,$model),$state) -> $state,

     CheckExpression($var,InstanceOfExpressionModel($typeRef,$expr,$ctx),$state) -> CheckExpression(NONE,$expr,$state),
     CheckExpression($var,PostfixExpressionModel($x,$op,$ctx),$state) -> CheckExpression(NONE,$x,$state),     
     CheckExpression($var,PredecrementExpressionModel($x,$ctx),$state) -> CheckExpression($var,$x,$state),     
     CheckExpression($var,PreincrementExpressionModel($x,$ctx),$state) -> CheckExpression($var,$x,$state),     

     CheckExpression($var,SpecializedMethodCallModel($bounds,$methodCall,$methodModel,$ctx),$state) -> CheckExpression($var,$methodCall,$state),

     CheckExpression($var,StaticFieldModel($typeRef,$identifier,$memberVariable,$ctx),$state) -> $state,

     CheckExpression($var,SuperModel($x,$ctx),$state) -> CheckExpression($var,$x,$state),
     CheckExpression($var,SuperPrefixModel($ctx),$state) -> $state,
     CheckExpression($var,CaseConstantModel($x,$y),$state) -> $state,

     CheckExpression($var,ThisModel($x,$ctx),$state) -> CheckExpression($var,$x,$state),
     CheckExpression($var,ThisPrefixExpressionModel($ctx),$state) -> $state,

     CheckExpression($var,UnaryExpressionModel($x,$op,$ctx),$state) -> CheckExpression(NONE,$x,$state),




     CheckExpression($var,IntegerLiteral($x),$state) -> $state,
     CheckExpression($var,FloatingPointLiteral($x),$state) -> $state,
     CheckExpression($var,CharacterLiteral($x),$state) -> $state,
     CheckExpression($var,StringLiteral($x),$state) -> $state,
     CheckExpression($var,BooleanLiteral($x),$state) -> $state,
     CheckExpression($var,NullLiteral(),$state) -> $state,

     CheckExpression($var,[],$state) -> $state,


     merge(CHANGE($x,CLOSE),[]) -> [ ],
     merge(CHANGE($x,CLOSE),[$y:$z]) -> cat(OpenClose(CHANGE($x,CLOSE),$y),merge(CHANGE($x,CLOSE),$z)),
     merge(CHANGE($x,OPEN,$fileAndLine), [$y:$z]) -> cons(CHANGE($x,OPEN,$fileAndLine),[$y:$z]),
     merge(CHANGE($x,OPEN,$fileAndLine), []) -> cons(CHANGE($x,OPEN,$fileAndLine),[]),     
     merge(CHANGE($x,RETURN),[]) -> [ ],
     merge(CHANGE($x,RETURN),[$y:$z]) -> cat(OpenClose(CHANGE($x,RETURN),$y),merge(CHANGE($x,RETURN),$z)),
     
     merge($x, $y && $z) -> merge($x, $y) && merge($x, $z),
     merge($x, $y || $z) -> merge($x, $y) || merge($x, $z),

     merge($x, true) -> merge($x,[]),

     merge($x, RETURN($y)) -> RETURN($y),

     OpenClose(CHANGE($x,CLOSE),CHANGE($x,OPEN,$fl)) -> [],
     OpenClose(CHANGE($x,RETURN),CHANGE($x,OPEN,$fl)) -> [],
     OpenClose(CHANGE($x,CLOSE),CHANGE($y,OPEN,$fl)) [ !($x==$y) ] -> CHANGE($y,OPEN,$fl),
     OpenClose(CHANGE($x,RETURN),CHANGE($y,OPEN,$fl)) [ !($x==$y) ] -> CHANGE($y,OPEN,$fl),
     OpenClose(CHANGE($x,CLOSE),CHANGE($y,CLOSE)) -> CHANGE($y,CLOSE),
     OpenClose(CHANGE($x,CLOSE),CHANGE($y,RETURN)) -> CHANGE($y,RETURN),
     OpenClose(CHANGE($x,RETURN),CHANGE($y,RETURN)) -> CHANGE($y,RETURN),
     OpenClose(CHANGE($x,RETURN),CHANGE($y,CLOSE)) -> CHANGE($y,CLOSE),

     cat([],$x) -> $x,
     cat(CHANGE($x,$s),$y) -> checkReturn($y,cons(CHANGE($x,$s),$y)),
     cat(CHANGE($x,$s,$fl),$y) -> checkReturn($y,cons(CHANGE($x,$s,$fl),$y)),
     cat($x, $y && $z) -> cat($x,$y) && cat($x,$z),
     cat($x, $y || $z) -> cat($x,$y) || cat($x,$z),

     cons($x, $y && $z) -> cat($x,$y) && cat($x,$z),
     cons($x, $y || $z) -> cat($x,$y) || cat($x,$z),
    

     [] && $x -> $x,
     $x && [] -> $x,

     false && $x -> false,
     $x &&  false -> false,

     true && $x -> $x,
     $x   && true -> $x,

     [] || $x -> [],
     $x || [] -> [],

     $x || $x -> $x,

     $x || true -> true,
     true || $x -> true,     
    
     CheckReturn($x,$y) -> unify($x,RETURN($z)) ? $x : $y,

     RETURN(RETURN($x)) -> RETURN($x),

     RETURN($x) && RETURN($y) -> RETURN( $x && $y),

     RETURN($x) || RETURN($y) -> RETURN( $x || $y),


#     CheckThrowed($x,$state) [ CanThrow.canThrow($x) ] -> $state 
#                                                      !-> true,

     CheckThrowed($x,$state) -> true,



     Q($x || $y) -> Q($x) || Q($y),
     Q($x && $y) -> Q($x) && Q($y),
     Q(RETURN($x)) -> Q($x),
     Q(NIL) -> true,
     Q([$x:$y]) -> CheckOpenClose(cons($x,$y)),

     CheckOpenClose(NIL) -> true,
     CheckOpenClose(CHANGE($x,CLOSE)) -> true,
     CheckOpenClose(CHANGE($y,OPEN,$fl)) -> false [ [println($y),violationDiscovered(UnclosedCloseable,"closeable variable does not closed",$fl)] ],
     CheckOpenClose([$x:$y]) -> CheckOpenClose($x) && CheckOpenClose($y),


     CheckEmpty([]) -> true,

     p($x) -> $x [ [println("p:"), println($x)] ],

     # TODO: implement
     IsResource($x) -> true,
     ClosedInFinalize($x,$y) -> true,

     protect($x) -> $x [ setCurrentStopFlag(true) ]

  ),
  FirstTop
);
