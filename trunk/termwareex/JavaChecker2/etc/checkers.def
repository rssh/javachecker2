Checkers(
[
 define(GenericExceptionCatchClause,exceptions,"catching generic exception",
        BT_TYPE_RULESET,
        ruleset(
          Catch(FormalParameter($m,Identifier("Exception"),$x),$block) 
                         -> true [ violationDiscovered(GenericExceptionCatchClause,"generic exception catch clause",$x) ]
        ),
        true
  ),

 define(EmptyCatchBlock,exceptions,"empty catch block",
        BT_TYPE_RULESET,
        ruleset(
          Catch($x,Block(NIL)) 
                         -> true [ violationDiscovered(EmptyCatchBlock,"empty catch block",$x) ]
        ),
        true
  ),

 define(GenericExceptionThrow,exceptions,"throwing of generic exception",
        BT_TYPE_RULESET,
        ruleset(
          import(general,apply),
          ThrowStatement(AllocationExpression($ex,$dims,$args,$body)) -> CheckGeneric($ex,$ex),
          CheckGeneric(Identifier("Exception"),$ex)
                         -> true [ violationDiscovered(GenericExceptionThrow,"throwing of generic exception",$ex) ]
        ),
        true
  ),

 define(NotOurPackaging,style,"package names must start with ua.gradsoft ",
        BT_COMPILATION_UNIT_RULESET,
        ruleset(
          PackageDeclaration(Name($x)) -> COM_MYCOMPANY($x) ,
          COM_MYCOMPANY([$x:[$y:$z]]) 
              [ $x==Identifier("ua") && $y==Identifier("gradsoft") ] -> true 
              !-> false [ violationDiscovered(NotOurPackaging,"Bad package name", $x) ]
        ),
        false
  ),

 define(SwitchLabelWithoutBreak,flow,"switch label block without break ",
        BT_TYPE_RULESET,
        ruleset(
          import(general,apply),
          SwitchStatementLabelBlock($label,[$x:$y]) -> flows::CheckBreak.CHECK_BREAK($label,cons($x,$y),cons($x,$y))
        ),
        true
 ),


 define(UnclosedCloseable,resources,"unclosed instance of closeable",
        MODEL_RULESET,
        ruleset(
          import(general,apply),
          import(general,logical_or),
          import(general,logical_and),

          UnclosedCloseable($x) -> checkNoOpen(apply(TrackOpenClose,$x)),

          checkNoOpen([]) -> true,
          checkNoOpen([$x:$y]) -> checkNoOpen($x) && checkNoOpen($y),
          checkNoOpen(CHANGE($x,OPEN,$where)) -> false [ violationDiscovered(UnclosedCloseable,"closeable variable does not closed",$where) ],

          checkNoOpen($x && $y) -> checkNoOpen($x) && checkNoOpen($y),
          checkNoOpen($x || $y) -> checkNoOpen($x) || checkNoOpen($y),
          checkNoOpen(Q($x)) -> checkNoOpen($x)
                    

        ),
        true
  )



]
);
