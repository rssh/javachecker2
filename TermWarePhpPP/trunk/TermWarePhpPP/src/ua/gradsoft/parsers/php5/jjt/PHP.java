/* Generated By:JJTree&JavaCC: Do not edit this line. PHP.java */
package ua.gradsoft.parsers.php5.jjt;

import java.util.*;
import ua.gradsoft.termware.*;
import ua.gradsoft.termware.exceptions.*;
import ua.gradsoft.parsers.php5.*;


public  class PHP/*@bgen(jjtree)*/implements PHPTreeConstants, PHPConstants {/*@bgen(jjtree)*/
  protected JJTPHPState jjtree = new JJTPHPState();private static PHP parser ;

        public static void main ( String args [ ] ) {

                if(args.length == 0){
                        System.out.println("PHP Parser Version 0.1Alpha:  Reading from standard input . . .");
                        parser = new PHP(System.in);
                } else if (args.length == 1) {
                        System.out.println("PHP Parser Version 0.1Alpha:  Reading from file " + args[0] + " . . ." );
                        try {
                                parser = new PHP(new java.io.FileInputStream(args[0]));
                        }
                        catch(java.io.FileNotFoundException e){
                                System.out.println("PHP Parser Version 0.1:  File " + args[0] + " not found.");
                                return ;
                        }
                } else {
                        System.out.println("PHP Parser Version 0.1Alpha:  Usage is one of:");
                        System.out.println("         java PHP < inputfile");
                        System.out.println("OR");
                        System.out.println("         java PHP inputfile");
                        return ;
                }
                parser.token_source.SwitchTo(HTML_STATE);
                try {
                        parser.PhpPage();
                        System.out.println("PHP Parser Version 0.1Alpha:  PHP program parsed successfully.");
                }
                catch(TermWareException e) {
                        System.out.println("PHP Parser Version 0.1Alpha:  Encountered errors during parse.");
                        System.out.println(e.getMessage());
                        e.printStackTrace();
                }
                catch(ParseException e) {
                        System.out.println("PHP Parser Version 0.1Alpha:  Encountered errors during parse.");
                        System.out.println(e.getMessage());
                }
        }

    public SimpleNode getRootNode()
     { return (SimpleNode)jjtree.rootNode(); }

    public String getInFname()
     { return inFname_; }

    public void setInFname(String inFname)
     { inFname_=inFname; }

    public void  setTermWareInstance(TermWareInstance instance)
     { termWareInstance_=instance; }

    Term createString(String value)
    {
        return termWareInstance_.getTermFactory().createString(value);
    }

    Term createAtom(String name)
    {
        return termWareInstance_.getTermFactory().createAtom(name);
    }

    Term createNil()
    {
        return termWareInstance_.getTermFactory().createNil();
    }

    Term createInt(int n) throws TermWareException
    {
      return termWareInstance_.getTermFactory().createInt(n);
    }

    Term createInt(String s) throws TermWareException
    {
      try {
       int i = Integer.parseInt(s);
       return termWareInstance_.getTermFactory().createInt(i);
      }catch(NumberFormatException ex){
        throw new TermParseException("Can't parse interger:"+s,ex);
      }
    }

    Term createFloat(String s) throws TermWareException
    {
      try {
       double d = Double.parseDouble(s);
       return termWareInstance_.getTermFactory().createDouble(d);
      }catch(NumberFormatException ex){
        throw new TermParseException("Can't parse interger:"+s,ex);
      }
    }

    Term createBoolean(boolean b) throws TermWareException
    {
      return termWareInstance_.getTermFactory().createBoolean(b);
    }

    Term createIdentifier(String name) throws TermWareException
    {
        return createTerm("Identifier",name);
    }

    Term createTerm(String name, Object ... subterms) throws TermWareException
    {
       Term[] terms = new Term[subterms.length];
       for(int i=0; i<subterms.length; ++i) {
         terms[i]=termWareInstance_.getTypeConversion().adopt(subterms[i]);
       }
       return termWareInstance_.getTermFactory().createTerm(name, terms);
    }

    Term createTerm(String name, Term ... subterms) throws TermWareException
    {
       return termWareInstance_.getTermFactory().createTerm(name, subterms);
    }

    Term adoptList(List<Term> l) throws TermWareException
    {
      return termWareInstance_.getTypeConversion().adopt(l);
    }

    private String getSpecialToken(Token tk)
    {
      String s="";
      while(tk.specialToken != null) {
         s=tk.specialToken.image+s;
         tk=tk.specialToken;
      }
      return s;
    }


    private String inFname_;
    private int    nLine_;
    private TermWareInstance termWareInstance_;

  final public void PhpPage() throws ParseException, TermWareException {
                                            /*@bgen(jjtree) PhpPage */
  SimpleNode jjtn000 = new SimpleNode(JJTPHPPAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      HtmlBlocks();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHP_BEGIN:
        jj_consume_token(PHP_BEGIN);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case DOUBLE_STRING_LITERAL_START:
          case SINGLE_STRING_LITERAL_START:
          case HEREDOC_START:
          case REQUIRE_ONCE:
          case REQUIRE:
          case INCLUDE_ONCE:
          case INCLUDE:
          case DEFINE:
          case ECHO:
          case PRINT:
          case SWITCH:
          case BREAK:
          case RETURN:
          case DO:
          case WHILE:
          case FOREACH:
          case FOR:
          case CONTINUE:
          case IF:
          case FUNCTION:
          case CLASS:
          case VAR:
          case PUBLIC:
          case PRIVATE:
          case PROTECTED:
          case ABSTRACT:
          case FINAL:
          case STATIC:
          case INTERFACE:
          case CONST:
          case CLONE:
          case GLOBAL:
          case ARRAY:
          case NEW:
          case PREDEFINED_CONSTANT:
          case PHP_END:
          case DOLLAR:
          case SEMICOLON:
          case TRY:
          case THROW:
          case GOTO:
          case DECLARE:
          case NAMESPACE:
          case USE:
          case IDENTIFIER:
          case 109:
          case 113:
          case 115:
          case 118:
          case 147:
          case 152:
          case 153:
          case 154:
          case 155:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          Statement();
        }
        break;
      case 0:
        jj_consume_token(0);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.addTerm(createNil(),0);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void HtmlBlocks() throws ParseException, TermWareException {
                                               /*@bgen(jjtree) HtmlBlocks */
  SimpleNode jjtn000 = new SimpleNode(JJTHTMLBLOCKS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PHP_EXPR:
        case HTML_OTHER:
        case HTML:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        HtmlBlock();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void HtmlBlock() throws ParseException, TermWareException {
 /*@bgen(jjtree) HtmlBlock */
 SimpleNode jjtn000 = new SimpleNode(JJTHTMLBLOCK);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token htmlToken;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HTML:
        htmlToken = jj_consume_token(HTML);
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.addTerm(createString(htmlToken.image),0);
        break;
      case HTML_OTHER:
        htmlToken = jj_consume_token(HTML_OTHER);
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.addTerm(createString(htmlToken.image),0);
        break;
      case PHP_EXPR:
        jj_consume_token(PHP_EXPR);
        Expression();
        jj_consume_token(PHP_END);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof TermWareException) {
       {if (true) throw (TermWareException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Statement() throws ParseException, TermWareException {
                                              /*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2)) {
        GotoLabeledStatement();
      } else if (jj_2_2(2)) {
        ClassDeclaration();
      } else if (jj_2_3(2)) {
        InterfaceDeclaration();
      } else if (jj_2_4(2)) {
        ExpressionStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 113:
          CompoundStatement();
          break;
        case SWITCH:
        case IF:
          SelectionStatement();
          break;
        case DO:
        case WHILE:
        case FOREACH:
        case FOR:
          IterationStatement();
          break;
        case BREAK:
        case RETURN:
        case CONTINUE:
        case GOTO:
          JumpStatement();
          break;
        case REQUIRE_ONCE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case INCLUDE:
        case 118:
          IncludeStatement();
          break;
        case ECHO:
        case PRINT:
          EchoStatement();
          break;
        case DEFINE:
          DefineStatement();
          break;
        case FUNCTION:
        case VAR:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case ABSTRACT:
        case FINAL:
        case STATIC:
        case CONST:
        case GLOBAL:
        case DOLLAR:
          MemberDeclaration();
          break;
        case THROW:
          ThrowStatement();
          break;
        case TRY:
          TryBlock();
          break;
        case NAMESPACE:
          NamespaceStatement();
          break;
        case USE:
          UseStatement();
          break;
        case DECLARE:
          DeclareStatement();
          break;
        case PHP_END:
        case SEMICOLON:
          EndOfStatement();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ThrowStatement() throws ParseException, TermWareException {
                                                    /*@bgen(jjtree) ThrowStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(THROW);
      ClassInstantiation();
      EndOfStatement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TryBlock() throws ParseException, TermWareException {
                                             /*@bgen(jjtree) TryBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTTRYBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TRY);
      CompoundStatement();
      CatchBlocks();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CatchBlocks() throws ParseException, TermWareException {
 /*@bgen(jjtree) CatchBlocks */
  SimpleNode jjtn000 = new SimpleNode(JJTCATCHBLOCKS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        CatchBlock();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CatchBlock() throws ParseException, TermWareException {
 /*@bgen(jjtree) CatchBlock */
 SimpleNode jjtn000 = new SimpleNode(JJTCATCHBLOCK);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      jj_consume_token(CATCH);
      jj_consume_token(109);
      tk = jj_consume_token(IDENTIFIER);
      Variable();
      jj_consume_token(110);
      CompoundStatement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.addTerm(createIdentifier(tk.image),0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EndOfStatement() throws ParseException, TermWareException {
                                                  /*@bgen(jjtree) EndOfStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTENDOFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      case PHP_END:
        EmbeddedHtml();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void EmbeddedHtml() throws ParseException, TermWareException {
 /*@bgen(jjtree) EmbeddedHtml */
  SimpleNode jjtn000 = new SimpleNode(JJTEMBEDDEDHTML);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token htmlToken;
  List<Term> htmls = new ArrayList<Term>();
  Term st = createNil();
    try {
      jj_consume_token(PHP_END);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTML_OTHER:
        case HTML:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HTML:
          htmlToken = jj_consume_token(HTML);
                           htmls.add(createString(htmlToken.image));
          break;
        case HTML_OTHER:
          htmlToken = jj_consume_token(HTML_OTHER);
                           htmls.add(createString(htmlToken.image));
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PHP_BEGIN:
        jj_consume_token(PHP_BEGIN);
                    st=createAtom("PhpBegin");
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.addTerm(adoptList(htmls),0);
           jjtn000.addTerm(st,1);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DefineStatement() throws ParseException, TermWareException {
                                                    /*@bgen(jjtree) DefineStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DEFINE);
      jj_consume_token(109);
      String();
      jj_consume_token(111);
      Expression();
      jj_consume_token(110);
      EndOfStatement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LabeledStatements() throws ParseException, TermWareException {
                                                      /*@bgen(jjtree) LabeledStatements */
  SimpleNode jjtn000 = new SimpleNode(JJTLABELEDSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        jj_consume_token(CASE);
        Expression();
        jj_consume_token(112);
        Statements();
        break;
      case DFLT:
        jj_consume_token(DFLT);
        jj_consume_token(112);
        Statements();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.addTerm(createAtom("default"),0);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Statements() throws ParseException, TermWareException {
 /*@bgen(jjtree) Statements */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_STRING_LITERAL_START:
        case SINGLE_STRING_LITERAL_START:
        case HEREDOC_START:
        case REQUIRE_ONCE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case INCLUDE:
        case DEFINE:
        case ECHO:
        case PRINT:
        case SWITCH:
        case BREAK:
        case RETURN:
        case DO:
        case WHILE:
        case FOREACH:
        case FOR:
        case CONTINUE:
        case IF:
        case FUNCTION:
        case CLASS:
        case VAR:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case ABSTRACT:
        case FINAL:
        case STATIC:
        case INTERFACE:
        case CONST:
        case CLONE:
        case GLOBAL:
        case ARRAY:
        case NEW:
        case PREDEFINED_CONSTANT:
        case PHP_END:
        case DOLLAR:
        case SEMICOLON:
        case TRY:
        case THROW:
        case GOTO:
        case DECLARE:
        case NAMESPACE:
        case USE:
        case IDENTIFIER:
        case 109:
        case 113:
        case 115:
        case 118:
        case 147:
        case 152:
        case 153:
        case 154:
        case 155:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        Statement();
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     {if (true) throw (TermWareException)jjte000;}
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void GotoLabeledStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) GotoLabeledStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTGOTOLABELEDSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      tk = jj_consume_token(IDENTIFIER);
      jj_consume_token(112);
      Statement();
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.addTerm(createString(tk.image),0);
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof TermWareException) {
         {if (true) throw (TermWareException)jjte000;}
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  final public void ExpressionStatement() throws ParseException, TermWareException {
                                                        /*@bgen(jjtree) ExpressionStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      EndOfStatement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CompoundStatement() throws ParseException, TermWareException {
                                                      /*@bgen(jjtree) CompoundStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPOUNDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(113);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_STRING_LITERAL_START:
        case SINGLE_STRING_LITERAL_START:
        case HEREDOC_START:
        case REQUIRE_ONCE:
        case REQUIRE:
        case INCLUDE_ONCE:
        case INCLUDE:
        case DEFINE:
        case ECHO:
        case PRINT:
        case SWITCH:
        case BREAK:
        case RETURN:
        case DO:
        case WHILE:
        case FOREACH:
        case FOR:
        case CONTINUE:
        case IF:
        case FUNCTION:
        case CLASS:
        case VAR:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case ABSTRACT:
        case FINAL:
        case STATIC:
        case INTERFACE:
        case CONST:
        case CLONE:
        case GLOBAL:
        case ARRAY:
        case NEW:
        case PREDEFINED_CONSTANT:
        case PHP_END:
        case DOLLAR:
        case SEMICOLON:
        case TRY:
        case THROW:
        case GOTO:
        case DECLARE:
        case NAMESPACE:
        case USE:
        case IDENTIFIER:
        case 109:
        case 113:
        case 115:
        case 118:
        case 147:
        case 152:
        case 153:
        case 154:
        case 155:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        Statement();
      }
      jj_consume_token(114);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SelectionStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) SelectionStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        SelectionIfStatement();
        break;
      case SWITCH:
        SelectionSwitchStatement();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     {if (true) throw (TermWareException)jjte000;}
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void SelectionIfStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) SelectionIfStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTIONIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);boolean withElseIf = false;
  boolean withElse = false;
    try {
      jj_consume_token(IF);
      jj_consume_token(109);
      Expression();
      jj_consume_token(110);
      Statement();
      if (jj_2_5(2)) {
        SelectionElseIfClauses();
                                                      withElseIf = true;
      } else {
        ;
      }
      if (jj_2_6(2)) {
        jj_consume_token(ELSE);
        Statement();
                                                withElse=true;
      } else {
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (!withElseIf) {
       jjtn000.addTerm(createNil(),2);
    }
    if (!withElse) {
       jjtn000.addTerm(createNil(),3);
    }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SelectionSwitchStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) SelectionSwitchStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTIONSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(109);
      Expression();
      jj_consume_token(110);
      CaseStatements();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CaseStatements() throws ParseException, TermWareException {
 /*@bgen(jjtree) CaseStatements */
  SimpleNode jjtn000 = new SimpleNode(JJTCASESTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(113);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case DFLT:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_7;
        }
        LabeledStatements();
      }
      jj_consume_token(114);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SelectionElseIfClauses() throws ParseException, TermWareException {
 /*@bgen(jjtree) SelectionElseIfClauses */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTIONELSEIFCLAUSES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_8:
      while (true) {
        SelectionElseIfClause();
        if (jj_2_7(2)) {
          ;
        } else {
          break label_8;
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof TermWareException) {
       {if (true) throw (TermWareException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SelectionElseIfClause() throws ParseException, TermWareException {
 /*@bgen(jjtree) SelectionElseIfClause */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTIONELSEIFCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELSEIF);
      jj_consume_token(109);
      Expression();
      jj_consume_token(110);
      Statement();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof TermWareException) {
       {if (true) throw (TermWareException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void IterationStatement() throws ParseException, TermWareException {
                                                       /*@bgen(jjtree) IterationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTITERATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        WhileStatement();
        break;
      case DO:
        DoStatement();
        break;
      case FOR:
        ForStatement();
        break;
      case FOREACH:
        ForEachStatement();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void WhileStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) WhileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(109);
      Expression();
      jj_consume_token(110);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DoStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) DoStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
      Statement();
      jj_consume_token(WHILE);
      jj_consume_token(109);
      Expression();
      jj_consume_token(110);
      EndOfStatement();
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     {if (true) throw (TermWareException)jjte000;}
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void ForStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) ForStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);boolean withE1=false;
  boolean withE2=false;
  boolean withE3=false;
    try {
      jj_consume_token(FOR);
      jj_consume_token(109);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_STRING_LITERAL_START:
      case SINGLE_STRING_LITERAL_START:
      case HEREDOC_START:
      case CLONE:
      case ARRAY:
      case NEW:
      case PREDEFINED_CONSTANT:
      case DOLLAR:
      case IDENTIFIER:
      case 109:
      case 115:
      case 118:
      case 147:
      case 152:
      case 153:
      case 154:
      case 155:
        Expression();
                            withE1=true;
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_STRING_LITERAL_START:
      case SINGLE_STRING_LITERAL_START:
      case HEREDOC_START:
      case CLONE:
      case ARRAY:
      case NEW:
      case PREDEFINED_CONSTANT:
      case DOLLAR:
      case IDENTIFIER:
      case 109:
      case 115:
      case 118:
      case 147:
      case 152:
      case 153:
      case 154:
      case 155:
        Expression();
                            withE2=true;
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_STRING_LITERAL_START:
      case SINGLE_STRING_LITERAL_START:
      case HEREDOC_START:
      case CLONE:
      case ARRAY:
      case NEW:
      case PREDEFINED_CONSTANT:
      case DOLLAR:
      case IDENTIFIER:
      case 109:
      case 115:
      case 118:
      case 147:
      case 152:
      case 153:
      case 154:
      case 155:
        Expression();
                            withE3=true;
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(110);
      Statement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   if (!withE1) {
     jjtn000.addTerm(createNil(),0);
   }
   if (!withE2) {
     jjtn000.addTerm(createNil(),1);
   }
   if (!withE3) {
     jjtn000.addTerm(createNil(),2);
   }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForEachStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) ForEachStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTFOREACHSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);boolean withKey = false;
 boolean withExpr = false;
 boolean withRef = false;
    try {
      jj_consume_token(FOREACH);
      jj_consume_token(109);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_STRING_LITERAL_START:
      case SINGLE_STRING_LITERAL_START:
      case HEREDOC_START:
      case CLONE:
      case ARRAY:
      case NEW:
      case PREDEFINED_CONSTANT:
      case DOLLAR:
      case IDENTIFIER:
      case 109:
      case 115:
      case 118:
      case 147:
      case 152:
      case 153:
      case 154:
      case 155:
        Expression();
                               withExpr=true;
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(AS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 115:
        jj_consume_token(115);
                           withRef=true;
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      Variable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 116:
        jj_consume_token(116);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 115:
          jj_consume_token(115);
                                withRef=true;
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        Variable();
                          withKey=true;
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(110);
      Statement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (!withExpr) {
       jjtn000.addTerm(createNil(),0);
    }
    if (!withKey) {
       jjtn000.addTerm(createNil(),1);
    }
    jjtn000.addTerm(createBoolean(withRef),3);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void JumpStatement() throws ParseException, TermWareException {
                                                  /*@bgen(jjtree) JumpStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTJUMPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTINUE:
        ContinueStatement();
        break;
      case BREAK:
        BreakStatement();
        break;
      case RETURN:
        ReturnStatement();
        break;
      case GOTO:
        GotoStatement();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ContinueStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) ContinueStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTCONTINUESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      jj_consume_token(CONTINUE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        tk = jj_consume_token(INTEGER_LITERAL);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      EndOfStatement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (tk!=null) {
      jjtn000.addTerm(createInt(tk.image),0);
    }else{
      jjtn000.addTerm(createNil(),0);
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BreakStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) BreakStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTBREAKSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        tk = jj_consume_token(INTEGER_LITERAL);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      EndOfStatement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (tk!=null) {
      jjtn000.addTerm(createInt(tk.image),0);
    }else{
      jjtn000.addTerm(createNil(),0);
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ReturnStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) ReturnStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTRETURNSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);boolean withexpr=false;
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_STRING_LITERAL_START:
      case SINGLE_STRING_LITERAL_START:
      case HEREDOC_START:
      case CLONE:
      case ARRAY:
      case NEW:
      case PREDEFINED_CONSTANT:
      case DOLLAR:
      case IDENTIFIER:
      case 109:
      case 115:
      case 118:
      case 147:
      case 152:
      case 153:
      case 154:
      case 155:
        Expression();
                           withexpr=true;
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      EndOfStatement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (!withexpr) {
      jjtn000.addTerm(createNil(),0);
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void GotoStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) GotoStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTGOTOSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      jj_consume_token(GOTO);
      tk = jj_consume_token(IDENTIFIER);
      EndOfStatement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.addTerm(createString(tk.image),0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ParameterList() throws ParseException, TermWareException {
                                                  /*@bgen(jjtree) ParameterList */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Parameter();
      label_9:
      while (true) {
        if (jj_2_8(2)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(111);
        Parameter();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Parameter() throws ParseException, TermWareException {
 /*@bgen(jjtree) Parameter */
 SimpleNode jjtn000 = new SimpleNode(JJTPARAMETER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tkId=null;
 Token tkRef=null;
 boolean withInit=false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        tkId = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 115:
        tkRef = jj_consume_token(115);
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      Variable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 117:
        jj_consume_token(117);
        Expression();
                                                     withInit=true;
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   if (tkId==null) {
     jjtn000.addTerm(createNil(),0);
   }else{
     jjtn000.addTerm(createIdentifier(tkId.image),0);
   }
   jjtn000.addTerm(createBoolean(tkRef!=null),1);
   if (!withInit) {
     jjtn000.addTerm(createNil(),3);
   }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ClassDeclaration() throws ParseException, TermWareException {
 /*@bgen(jjtree) ClassDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tkAbstract=null;
 Token tkFinal=null;
 Token tkName=null;
 Token tkSuper=null;
 Token tkI=null;
 List<Term> implementsList = new ArrayList<Term>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
          tkAbstract = jj_consume_token(ABSTRACT);
          break;
        case FINAL:
          tkFinal = jj_consume_token(FINAL);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(CLASS);
      tkName = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        tkSuper = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        tkI = jj_consume_token(IDENTIFIER);
                                          implementsList.add(
                                             createIdentifier(tkI.image));
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 111:
            ;
            break;
          default:
            jj_la1[33] = jj_gen;
            break label_10;
          }
          jj_consume_token(111);
          tkI = jj_consume_token(IDENTIFIER);
                           implementsList.add(createIdentifier(tkI.image));
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      ClassMembers();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (tkAbstract!=null) {
     jjtn000.addTerm(createAtom("abstract"),0);
    }else if(tkFinal!=null){
     jjtn000.addTerm(createAtom("final"),0);
    }else{
     jjtn000.addTerm(createNil(),0);
    }
    jjtn000.addTerm(createIdentifier(tkName.image),1);
    if (tkSuper!=null) {
      jjtn000.addTerm(createIdentifier(tkSuper.image),2);
    }else{
      jjtn000.addTerm(createNil(),2);
    }
    jjtn000.addTerm(adoptList(implementsList),3);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ClassMembers() throws ParseException, TermWareException {
                                                /*@bgen(jjtree) ClassMembers */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSMEMBERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(113);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
        case VAR:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case ABSTRACT:
        case FINAL:
        case STATIC:
        case CONST:
        case GLOBAL:
        case DOLLAR:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_11;
        }
        MemberDeclaration();
      }
      jj_consume_token(114);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MemberDeclaration() throws ParseException, TermWareException {
 /*@bgen(jjtree) MemberDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_9(2147483647)) {
        MemberFunctionDeclaration();
      } else if (jj_2_10(2147483647)) {
        MemberConstantDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case STATIC:
        case DOLLAR:
          MemberVariablesDeclaration();
          break;
        case GLOBAL:
          MemberGlobalsDeclaration();
          break;
        case ABSTRACT:
          MemberAbstractFunctionDeclaration();
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MemberFunctionDeclaration() throws ParseException, TermWareException {
 /*@bgen(jjtree) MemberFunctionDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTMEMBERFUNCTIONDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tkRef=null;
 Token tkName=null;
 boolean withPL=false;
    try {
      MemberFunctionAttributes();
      jj_consume_token(FUNCTION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 115:
        tkRef = jj_consume_token(115);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      tkName = jj_consume_token(IDENTIFIER);
      jj_consume_token(109);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLAR:
      case IDENTIFIER:
      case 115:
        ParameterList();
                                 withPL=true;
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(110);
      CompoundStatement();
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        if (tkRef!=null) {
          jjtn000.addTerm(createAtom("ref"),1);
        }else{
          jjtn000.addTerm(createNil(),1);
        }
        jjtn000.addTerm(createIdentifier(tkName.image),2);
        if (withPL==false) {
          jjtn000.addTerm(createNil(),3);
        }
    } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof TermWareException) {
          {if (true) throw (TermWareException)jjte000;}
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

  final public void MemberConstantDeclaration() throws ParseException, TermWareException {
 /*@bgen(jjtree) MemberConstantDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTMEMBERCONSTANTDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);boolean withV=false;
 Token tk=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
        Visibility();
                 withV=true;
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      jj_consume_token(CONST);
      tk = jj_consume_token(IDENTIFIER);
      jj_consume_token(117);
      Expression();
      EndOfStatement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (!withV) {
      jjtn000.addTerm(createNil(),0);
    }
    jjtn000.addTerm(createIdentifier(tk.image),1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MemberVariablesDeclaration() throws ParseException, TermWareException {
 /*@bgen(jjtree) MemberVariablesDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERVARIABLESDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MemberVariableAttributes();
      VariableDeclSeq();
      EndOfStatement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableDeclSeq() throws ParseException, TermWareException {
 /*@bgen(jjtree) VariableDeclSeq */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLSEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      VariableDecl();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 111:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_12;
        }
        jj_consume_token(111);
        VariableDecl();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void VariableDecl() throws ParseException, TermWareException {
 /*@bgen(jjtree) VariableDecl */
 SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      jj_consume_token(DOLLAR);
      tk = jj_consume_token(VAR_NAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 117:
        jj_consume_token(117);
        Expression();
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.addTerm(createIdentifier(tk.image),0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MemberVariableAttributes() throws ParseException, TermWareException {
 /*@bgen(jjtree) MemberVariableAttributes */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERVARIABLEATTRIBUTES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case STATIC:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          jj_consume_token(VAR);
               jjtn000.addTerm( createAtom("var"), jjtn000.getArity());
          break;
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
          Visibility();
          break;
        case STATIC:
          jj_consume_token(STATIC);
                   jjtn000.addTerm( createAtom("static"), jjtn000.getArity());
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MemberGlobalsDeclaration() throws ParseException, TermWareException {
 /*@bgen(jjtree) MemberGlobalsDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERGLOBALSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GLOBAL);
      VarList();
      EndOfStatement();
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     {if (true) throw (TermWareException)jjte000;}
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void VarList() throws ParseException, TermWareException {
 /*@bgen(jjtree) VarList */
  SimpleNode jjtn000 = new SimpleNode(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Variable();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 111:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_14;
        }
        jj_consume_token(111);
        Variable();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MemberAbstractFunctionDeclaration() throws ParseException, TermWareException {
 /*@bgen(jjtree) MemberAbstractFunctionDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTMEMBERABSTRACTFUNCTIONDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tkRef = null;
 Token tkId = null;
 boolean withPL = false;
    try {
      jj_consume_token(ABSTRACT);
      MemberFunctionAttributes();
      jj_consume_token(FUNCTION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 115:
        tkRef = jj_consume_token(115);
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      tkId = jj_consume_token(IDENTIFIER);
      jj_consume_token(109);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLAR:
      case IDENTIFIER:
      case 115:
        ParameterList();
                                  withPL=true;
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      jj_consume_token(110);
      EndOfStatement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.addTerm(createBoolean(tkRef!=null),1);
    jjtn000.addTerm(createIdentifier(tkId.image),2);
    if (!withPL) {
      jjtn000.addTerm(createNil(),3);
    }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MemberFunctionAttributes() throws ParseException, TermWareException {
 /*@bgen(jjtree) MemberFunctionAttributes */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERFUNCTIONATTRIBUTES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case FINAL:
        case STATIC:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_15;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
          jj_consume_token(FINAL);
               jjtn000.addTerm(createAtom("final"),jjtn000.getArity());
          break;
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
          Visibility();
          break;
        case STATIC:
          jj_consume_token(STATIC);
                 jjtn000.addTerm(createAtom("static"),jjtn000.getArity());
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InterfaceDeclaration() throws ParseException, TermWareException {
 /*@bgen(jjtree) InterfaceDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTINTERFACEDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tkId=null;
 List<Term> extendsList = new ArrayList<Term>();
 Token tkn1=null;
 Token tkn2=null;
    try {
      jj_consume_token(INTERFACE);
      tkId = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        tkn1 = jj_consume_token(IDENTIFIER);
                     extendsList.add(createIdentifier(tkn1.image));
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 111:
            ;
            break;
          default:
            jj_la1[49] = jj_gen;
            break label_16;
          }
          jj_consume_token(111);
          tkn2 = jj_consume_token(IDENTIFIER);
                        extendsList.add(createIdentifier(tkn2.image));
        }
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      InterfaceMembers();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.addTerm(createIdentifier(tkId.image),0);
    if (extendsList.size()==0) {
      jjtn000.addTerm(createNil(),1);
    } else {
      jjtn000.addTerm(adoptList(extendsList),1);
    }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void InterfaceMembers() throws ParseException, TermWareException {
                                                    /*@bgen(jjtree) InterfaceMembers */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERFACEMEMBERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(113);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case ABSTRACT:
        case CONST:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_17;
        }
        InterfaceMember();
      }
      jj_consume_token(114);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void InterfaceMember() throws ParseException, TermWareException {
                                                   /*@bgen(jjtree) InterfaceMember */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERFACEMEMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_11(2147483647)) {
        InterfaceMethodDeclaration();
      } else if (jj_2_12(2147483647)) {
        MemberConstantDeclaration();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof TermWareException) {
          {if (true) throw (TermWareException)jjte000;}
        }
        if (jjte000 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte000;}
        }
        if (jjte000 instanceof ParseException) {
          {if (true) throw (ParseException)jjte000;}
        }
        {if (true) throw (Error)jjte000;}
    } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
    }
  }

  final public void InterfaceMethodDeclaration() throws ParseException, TermWareException {
 /*@bgen(jjtree) InterfaceMethodDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTINTERFACEMETHODDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tkRef=null;
 Token tkId=null;
 boolean  withPL=false;
 boolean  withBody=false;
    try {
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
        case ABSTRACT:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_18;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
          break;
        case PUBLIC:
          jj_consume_token(PUBLIC);
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(FUNCTION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 115:
        tkRef = jj_consume_token(115);
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      tkId = jj_consume_token(IDENTIFIER);
      jj_consume_token(109);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLAR:
      case IDENTIFIER:
      case 115:
        ParameterList();
                                  withPL=true;
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      jj_consume_token(110);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 113:
        jj_consume_token(113);
        jj_consume_token(114);
                                                       withBody=true;
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      EndOfStatement();
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  jjtn000.addTerm(createBoolean(tkRef!=null),0);
  jjtn000.addTerm(createIdentifier(tkId.image),1);
  if (!withPL) {
    jjtn000.addTerm(createNil(),2);
  }
  jjtn000.addTerm(createBoolean(withBody),3);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     {if (true) throw (TermWareException)jjte000;}
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void IncludeStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) IncludeStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTINCLUDESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token refTk=null;
 Token wordTk=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 118:
        refTk = jj_consume_token(118);
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
        wordTk = jj_consume_token(INCLUDE);
        break;
      case INCLUDE_ONCE:
        wordTk = jj_consume_token(INCLUDE_ONCE);
        break;
      case REQUIRE:
        wordTk = jj_consume_token(REQUIRE);
        break;
      case REQUIRE_ONCE:
        wordTk = jj_consume_token(REQUIRE_ONCE);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_13(2)) {
        jj_consume_token(109);
        Expression();
        jj_consume_token(110);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_STRING_LITERAL_START:
        case SINGLE_STRING_LITERAL_START:
        case HEREDOC_START:
        case CLONE:
        case ARRAY:
        case NEW:
        case PREDEFINED_CONSTANT:
        case DOLLAR:
        case IDENTIFIER:
        case 109:
        case 115:
        case 118:
        case 147:
        case 152:
        case 153:
        case 154:
        case 155:
          Expression();
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      EndOfStatement();
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     if (refTk==null) {
       jjtn000.addTerm(createBoolean(false),0);
     } else {
       jjtn000.addTerm(createBoolean(true),0);
     }
     jjtn000.addTerm(createAtom(wordTk.image),1);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void EchoStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) EchoStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTECHOSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tkEcho=null;
 Token tkPrint=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ECHO:
        tkEcho = jj_consume_token(ECHO);
        break;
      case PRINT:
        tkPrint = jj_consume_token(PRINT);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ArgumentExpressionList();
      EndOfStatement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   Term at = createAtom(tkEcho!=null ? "echo" : "print");
   jjtn000.addTerm(at,0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void NamespaceStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) NamespaceStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTNAMESPACESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NAMESPACE);
      QualifiedName();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void QualifiedName() throws ParseException, TermWareException {
 /*@bgen(jjtree) QualifiedName */
 SimpleNode jjtn000 = new SimpleNode(JJTQUALIFIEDNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
 Token tk1 = null;
 int n=1;
    try {
      tk = jj_consume_token(IDENTIFIER);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 119:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_19;
        }
        jj_consume_token(119);
        tk1 = jj_consume_token(IDENTIFIER);
                      jjtn000.addTerm(createIdentifier(tk1.image),n);
                      ++n;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.addTerm(createIdentifier(tk.image),0);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void UseStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) UseStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTUSESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      jj_consume_token(USE);
      QualifiedName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        tk = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   if (tk!=null) {
      jjtn000.addTerm(createIdentifier(tk.image),1);
   }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     {if (true) throw (TermWareException)jjte000;}
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void DeclareStatement() throws ParseException, TermWareException {
 /*@bgen(jjtree) DeclareStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DECLARE);
      jj_consume_token(109);
      AssignmentExpression();
      jj_consume_token(110);
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Expression() throws ParseException, TermWareException {
                                              /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogicalTextOrExpression();
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof TermWareException) {
             {if (true) throw (TermWareException)jjte000;}
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void LogicalTextOrExpression() throws ParseException, TermWareException {
                                                          /*@bgen(jjtree) LogicalTextOrExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICALTEXTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogicalTextXorExpression();
      if (jj_2_14(2)) {
        jj_consume_token(OR);
        LogicalTextOrExpression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LogicalTextXorExpression() throws ParseException, TermWareException {
                                                            /*@bgen(jjtree) LogicalTextXorExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICALTEXTXOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogicalTextAndExpression();
      if (jj_2_15(2)) {
        jj_consume_token(XOR);
        LogicalTextXorExpression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LogicalTextAndExpression() throws ParseException, TermWareException {
                                                            /*@bgen(jjtree) LogicalTextAndExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICALTEXTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AssignmentExpression();
      if (jj_2_16(2)) {
        jj_consume_token(AND);
        LogicalTextAndExpression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void AssignmentExpression() throws ParseException, TermWareException {
                                                        /*@bgen(jjtree) AssignmentExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalExpression();
      if (jj_2_17(2)) {
        AssignmentOperator();
        Expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void AssignmentOperator() throws ParseException, TermWareException {
 /*@bgen(jjtree) AssignmentOperator */
 SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTOPERATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 117:
        tk = jj_consume_token(117);
        break;
      case 120:
        tk = jj_consume_token(120);
        break;
      case 121:
        tk = jj_consume_token(121);
        break;
      case 122:
        tk = jj_consume_token(122);
        break;
      case 123:
        tk = jj_consume_token(123);
        break;
      case 124:
        tk = jj_consume_token(124);
        break;
      case 125:
        tk = jj_consume_token(125);
        break;
      case 126:
        tk = jj_consume_token(126);
        break;
      case 127:
        tk = jj_consume_token(127);
        break;
      case 128:
        tk = jj_consume_token(128);
        break;
      case 129:
        tk = jj_consume_token(129);
        break;
      case 130:
        tk = jj_consume_token(130);
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.addTerm(createString(tk.image),0);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ConditionalExpression() throws ParseException, TermWareException {
                                                         /*@bgen(jjtree) ConditionalExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Logical_Or_Expression();
      if (jj_2_18(2)) {
        jj_consume_token(131);
        Expression();
        jj_consume_token(112);
        Expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Logical_Or_Expression() throws ParseException, TermWareException {
                                                         /*@bgen(jjtree) Logical_Or_Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL_OR_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Logical_And_Expression();
      if (jj_2_19(2)) {
        jj_consume_token(132);
        Logical_Or_Expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Logical_And_Expression() throws ParseException, TermWareException {
                                                          /*@bgen(jjtree) Logical_And_Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL_AND_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      BitwiseOrExpression();
      if (jj_2_20(2)) {
        jj_consume_token(133);
        Logical_And_Expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void BitwiseOrExpression() throws ParseException, TermWareException {
                                                       /*@bgen(jjtree) BitwiseOrExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBITWISEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      BitwiseXorExpression();
      if (jj_2_21(2)) {
        jj_consume_token(134);
        BitwiseOrExpression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void BitwiseXorExpression() throws ParseException, TermWareException {
                                                        /*@bgen(jjtree) BitwiseXorExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBITWISEXOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      BitwiseAndExpression();
      if (jj_2_22(2)) {
        jj_consume_token(135);
        BitwiseXorExpression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void BitwiseAndExpression() throws ParseException, TermWareException {
                                                        /*@bgen(jjtree) BitwiseAndExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBITWISEANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EqualityExpression();
      if (jj_2_23(2)) {
        jj_consume_token(115);
        BitwiseAndExpression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void EqualityExpression() throws ParseException, TermWareException {
 /*@bgen(jjtree) EqualityExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTEQUALITYEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      RelationalExpression();
      if (jj_2_24(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 136:
          tk = jj_consume_token(136);
          break;
        case 137:
          tk = jj_consume_token(137);
          break;
        case 138:
          tk = jj_consume_token(138);
          break;
        case 139:
          tk = jj_consume_token(139);
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        EqualityExpression();
      } else {
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (tk!=null) jjtn000.addTerm(createString(tk.image),1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void RelationalExpression() throws ParseException, TermWareException {
 /*@bgen(jjtree) RelationalExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTRELATIONALEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      ShiftExpression();
      if (jj_2_25(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 140:
          tk = jj_consume_token(140);
          break;
        case 141:
          tk = jj_consume_token(141);
          break;
        case 142:
          tk = jj_consume_token(142);
          break;
        case 143:
          tk = jj_consume_token(143);
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        RelationalExpression();
      } else {
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (tk!=null) jjtn000.addTerm(createString(tk.image),1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ShiftExpression() throws ParseException, TermWareException {
 /*@bgen(jjtree) ShiftExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTSHIFTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      AdditiveExpression();
      if (jj_2_26(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 144:
          tk = jj_consume_token(144);
          break;
        case 145:
          tk = jj_consume_token(145);
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ShiftExpression();
      } else {
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (tk!=null) jjtn000.addTerm(createString(tk.image),1);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void AdditiveExpression() throws ParseException, TermWareException {
 /*@bgen(jjtree) AdditiveExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      MultiplicativeExpression();
      if (jj_2_27(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 146:
          tk = jj_consume_token(146);
          break;
        case 147:
          tk = jj_consume_token(147);
          break;
        case 148:
          tk = jj_consume_token(148);
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        AdditiveExpression();
      } else {
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      if (tk!=null) {
        jjtn000.addTerm(createString(tk.image),1);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MultiplicativeExpression() throws ParseException, TermWareException {
 /*@bgen(jjtree) MultiplicativeExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      CastExpression();
      if (jj_2_28(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 149:
          tk = jj_consume_token(149);
          break;
        case 150:
          tk = jj_consume_token(150);
          break;
        case 151:
          tk = jj_consume_token(151);
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpression();
      } else {
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (tk!=null) jjtn000.addTerm(createString(tk.image),1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CastExpression() throws ParseException, TermWareException {
 /*@bgen(jjtree) CastExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      if (jj_2_29(2147483647)) {
        jj_consume_token(109);
        tk = jj_consume_token(VARTYPE);
        jj_consume_token(110);
      } else {
        ;
      }
      UnaryExpression();
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   if (tk!=null) jjtn000.addTerm(createAtom(tk.image),1);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void UnaryExpression() throws ParseException, TermWareException {
 /*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 115:
      case 147:
      case 152:
      case 153:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 115:
          tk = jj_consume_token(115);
          break;
        case 147:
          tk = jj_consume_token(147);
          break;
        case 152:
          tk = jj_consume_token(152);
          break;
        case 153:
          tk = jj_consume_token(153);
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
         jjtn000.addTerm(createString(tk.image),0);
        break;
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_STRING_LITERAL_START:
      case SINGLE_STRING_LITERAL_START:
      case HEREDOC_START:
      case CLONE:
      case ARRAY:
      case NEW:
      case PREDEFINED_CONSTANT:
      case DOLLAR:
      case IDENTIFIER:
      case 109:
      case 118:
      case 154:
      case 155:
        PrefixIncDecExpression();
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof TermWareException) {
        {if (true) throw (TermWareException)jjte000;}
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PrefixIncDecExpression() throws ParseException, TermWareException {
 /*@bgen(jjtree) PrefixIncDecExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPREFIXINCDECEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 154:
      case 155:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 154:
          tk = jj_consume_token(154);
          break;
        case 155:
          tk = jj_consume_token(155);
          break;
        default:
          jj_la1[71] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PrefixIncDecExpression();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.addTerm(createString(tk.image),0);
        break;
      default:
        jj_la1[72] = jj_gen;
        if (jj_2_30(2)) {
          PostfixIncDecExpression0();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PostfixIncDecExpression0() throws ParseException, TermWareException {
 /*@bgen(jjtree) PostfixIncDecExpression0 */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXINCDECEXPRESSION0);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InstanceOfExpression();
      if (jj_2_31(2)) {
        IncDecSuffix();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof TermWareException) {
        {if (true) throw (TermWareException)jjte000;}
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void IncDecSuffix() throws ParseException, TermWareException {
 /*@bgen(jjtree) IncDecSuffix */
 SimpleNode jjtn000 = new SimpleNode(JJTINCDECSUFFIX);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 154:
          tk = jj_consume_token(154);
          break;
        case 155:
          tk = jj_consume_token(155);
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
     jjtn000.addTerm(createString(tk.image),jjtn000.getArity());
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 154:
        case 155:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_20;
        }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InstanceOfExpression() throws ParseException, TermWareException {
                                                         /*@bgen(jjtree) InstanceOfExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTANCEOFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PostfixExpression();
      if (jj_2_32(2)) {
        jj_consume_token(INSTANCEOF);
        Expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PostfixExpression() throws ParseException, TermWareException {
 /*@bgen(jjtree) PostfixExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimaryExpression();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 109:
        case 113:
        case 156:
        case 157:
        case 158:
          ;
          break;
        default:
          jj_la1[75] = jj_gen;
          break label_21;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 109:
          PostfixExpressionMethodCallSuffix();
          break;
        default:
          jj_la1[76] = jj_gen;
          if (jj_2_33(2147483647)) {
            PostfixExpressionMemberSelectorSuffix();
          } else if (jj_2_34(2147483647)) {
            PostfixExpressionScopeResolutionSuffix();
          } else if (jj_2_35(2147483647)) {
            PostfixExpressionArrayIndexSuffix();
          } else if (jj_2_36(2147483647)) {
            PostfixExpressionCurlyBracketsSuffix();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PostfixExpressionMethodCallSuffix() throws ParseException, TermWareException {
                                                                     /*@bgen(jjtree) PostfixExpressionMethodCallSuffix */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXEXPRESSIONMETHODCALLSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(109);
      ArgumentExpressionList();
      jj_consume_token(110);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     {if (true) throw (TermWareException)jjte000;}
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void PostfixExpressionMemberSelectorSuffix() throws ParseException, TermWareException {
                                                                         /*@bgen(jjtree) PostfixExpressionMemberSelectorSuffix */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXEXPRESSIONMEMBERSELECTORSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(156);
      PostfixExpression();
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     {if (true) throw (TermWareException)jjte000;}
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void PostfixExpressionScopeResolutionSuffix() throws ParseException, TermWareException {
 /*@bgen(jjtree) PostfixExpressionScopeResolutionSuffix */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXEXPRESSIONSCOPERESOLUTIONSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(157);
      PostfixExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PostfixExpressionArrayIndexSuffix() throws ParseException, TermWareException {
 /*@bgen(jjtree) PostfixExpressionArrayIndexSuffix */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXEXPRESSIONARRAYINDEXSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(158);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_STRING_LITERAL_START:
      case SINGLE_STRING_LITERAL_START:
      case HEREDOC_START:
      case CLONE:
      case ARRAY:
      case NEW:
      case PREDEFINED_CONSTANT:
      case DOLLAR:
      case IDENTIFIER:
      case 109:
      case 115:
      case 118:
      case 147:
      case 152:
      case 153:
      case 154:
      case 155:
        Expression();
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
      jj_consume_token(159);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PostfixExpressionCurlyBracketsSuffix() throws ParseException, TermWareException {
 /*@bgen(jjtree) PostfixExpressionCurlyBracketsSuffix */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXEXPRESSIONCURLYBRACKETSSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(113);
      Expression();
      jj_consume_token(114);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PrimaryExpression() throws ParseException, TermWareException {
 /*@bgen(jjtree) PrimaryExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTPRIMARYEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);boolean withRef=false;
    try {
      if (jj_2_37(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 118:
          jj_consume_token(118);
                           withRef=true;
          break;
        default:
          jj_la1[78] = jj_gen;
          ;
        }
        Variable();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            if (withRef) { jjtn000.addTerm(createAtom("IgnoreErrors"),0); }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_STRING_LITERAL_START:
        case SINGLE_STRING_LITERAL_START:
        case HEREDOC_START:
        case PREDEFINED_CONSTANT:
        case IDENTIFIER:
        case 118:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 118:
            jj_consume_token(118);
               withRef=true;
            break;
          default:
            jj_la1[79] = jj_gen;
            ;
          }
          Constant();
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            if (withRef) { jjtn000.addTerm(createAtom("IgnoreErrors"),0); }
          break;
        default:
          jj_la1[80] = jj_gen;
          if (jj_2_38(3)) {
            InBracesExpression();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CLONE:
            case NEW:
              ClassInstantiation();
              break;
            case ARRAY:
              Array();
              break;
            default:
              jj_la1[81] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InBracesExpression() throws ParseException, TermWareException {
 /*@bgen(jjtree) InBracesExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTINBRACESEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(109);
      Expression();
      jj_consume_token(110);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Array() throws ParseException, TermWareException {
                                         /*@bgen(jjtree) Array */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ARRAY);
      jj_consume_token(109);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_STRING_LITERAL_START:
      case SINGLE_STRING_LITERAL_START:
      case HEREDOC_START:
      case CLONE:
      case ARRAY:
      case NEW:
      case PREDEFINED_CONSTANT:
      case DOLLAR:
      case IDENTIFIER:
      case 109:
      case 115:
      case 118:
      case 147:
      case 152:
      case 153:
      case 154:
      case 155:
        ArrayKeyOrValue();
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 111:
          ;
          break;
        default:
          jj_la1[83] = jj_gen;
          break label_22;
        }
        jj_consume_token(111);
        ArrayKeyOrValue();
      }
      jj_consume_token(110);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ArrayKeyOrValue() throws ParseException, TermWareException {
 /*@bgen(jjtree) ArrayKeyOrValue */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYKEYORVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 116:
        jj_consume_token(116);
        Expression();
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ClassInstantiation() throws ParseException, TermWareException {
                                                      /*@bgen(jjtree) ClassInstantiation */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSINSTANTIATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        AllocationExpression();
        break;
      case CLONE:
        CloneExpression();
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AllocationExpression() throws ParseException, TermWareException {
 /*@bgen(jjtree) AllocationExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTALLOCATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk;
  boolean withArguments=false;
    try {
      jj_consume_token(NEW);
      tk = jj_consume_token(IDENTIFIER);
      if (jj_2_39(3)) {
        jj_consume_token(109);
        ArgumentExpressionList();
        jj_consume_token(110);
                                                        withArguments=true;
      } else {
        ;
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  jjtn000.addTerm(createIdentifier(tk.image),0);
  if (!withArguments) {
    jjtn000.addTerm(createNil(),1);
  }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     {if (true) throw (TermWareException)jjte000;}
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void CloneExpression() throws ParseException, TermWareException {
                                                   /*@bgen(jjtree) CloneExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCLONEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLONE);
      Variable();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      {if (true) throw (TermWareException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Variable() throws ParseException, TermWareException {
 /*@bgen(jjtree) Variable */
 SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);int nDollars=1;
 Token tk;
    try {
      jj_consume_token(DOLLAR);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOLLAR1:
          ;
          break;
        default:
          jj_la1[86] = jj_gen;
          break label_23;
        }
        jj_consume_token(DOLLAR1);
                              ++nDollars;
      }
      tk = jj_consume_token(VAR_NAME);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.addTerm(createInt(nDollars),0);
           jjtn000.addTerm(createString(tk.image),1);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ArgumentExpressionList() throws ParseException, TermWareException {
                                                          /*@bgen(jjtree) ArgumentExpressionList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case DOUBLE_STRING_LITERAL_START:
      case SINGLE_STRING_LITERAL_START:
      case HEREDOC_START:
      case CLONE:
      case ARRAY:
      case NEW:
      case PREDEFINED_CONSTANT:
      case DOLLAR:
      case IDENTIFIER:
      case 109:
      case 115:
      case 118:
      case 147:
      case 152:
      case 153:
      case 154:
      case 155:
        Expression();
        break;
      default:
        jj_la1[87] = jj_gen;
        ;
      }
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 111:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_24;
        }
        jj_consume_token(111);
        Expression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Constant() throws ParseException, TermWareException {
 /*@bgen(jjtree) Constant */
 SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        tk = jj_consume_token(INTEGER_LITERAL);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.addTerm(createInt(tk.image),0);
        break;
      case FLOATING_POINT_LITERAL:
        tk = jj_consume_token(FLOATING_POINT_LITERAL);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.addTerm(createFloat(tk.image),0);
        break;
      case DOUBLE_STRING_LITERAL_START:
      case SINGLE_STRING_LITERAL_START:
      case HEREDOC_START:
        String();
        break;
      case PREDEFINED_CONSTANT:
        tk = jj_consume_token(PREDEFINED_CONSTANT);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.addTerm(createIdentifier(tk.image),0);
        break;
      case IDENTIFIER:
        tk = jj_consume_token(IDENTIFIER);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.addTerm(createIdentifier(tk.image),0);
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof TermWareException) {
       {if (true) throw (TermWareException)jjte000;}
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void String() throws ParseException, TermWareException {
 /*@bgen(jjtree) String */
 SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk1;
 Token tk2;
 String s;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE_STRING_LITERAL_START:
        DoubleStringLiteral();
        break;
      case SINGLE_STRING_LITERAL_START:
        tk1 = jj_consume_token(SINGLE_STRING_LITERAL_START);
        tk2 = jj_consume_token(SINGLE_STRING_LITERAL_END);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             s=getSpecialToken(tk2);
             jjtn000.addTerm(createTerm("SingleStringLiteral",
                             tk2.image.substring(0,tk2.image.length()-1)),0);
        break;
      case HEREDOC_START:
        jj_consume_token(HEREDOC_START);
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            {if (true) throw (TermWareException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DoubleStringLiteral() throws ParseException, TermWareException {
 /*@bgen(jjtree) DoubleStringLiteral */
 SimpleNode jjtn000 = new SimpleNode(JJTDOUBLESTRINGLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tkBegin=null;
 Token tkEnd=null;
 Token tkVBegin=null;
 Token tkVEnd=null;
 Token tkVNo=null;
 int nVars=0;
 List<Term> sterms=new ArrayList<Term>();
    try {
      tkBegin = jj_consume_token(DOUBLE_STRING_LITERAL_START);
      if (jj_2_40(2)) {
        tkVBegin = jj_consume_token(DSL_SIMPLE_VAR_START);
        tkVEnd = jj_consume_token(DSL_SIMPLE_STRING_VAR_END);
            if (tkVBegin.specialToken!=null) {
              String s= getSpecialToken(tkVBegin);
              sterms.add(createTerm("string",s));
            }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOUBLE_STRING_LITERAL_END:
        case DSL_SIMPLE_VAR_START:
        case DSL_COMPLEX_VAR_START:
          label_25:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DSL_SIMPLE_VAR_START:
            case DSL_COMPLEX_VAR_START:
              ;
              break;
            default:
              jj_la1[91] = jj_gen;
              break label_25;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DSL_SIMPLE_VAR_START:
              tkVBegin = jj_consume_token(DSL_SIMPLE_VAR_START);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case DSL_SIMPLE_VAR_END:
                tkVEnd = jj_consume_token(DSL_SIMPLE_VAR_END);
                break;
              case DSL_SIMPLE_VAR_WASNT:
                tkVNo = jj_consume_token(DSL_SIMPLE_VAR_WASNT);
                break;
              default:
                jj_la1[92] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            case DSL_COMPLEX_VAR_START:
              tkVBegin = jj_consume_token(DSL_COMPLEX_VAR_START);
              tkVEnd = jj_consume_token(DSL_COMPLEX_VAR_END);
              break;
            default:
              jj_la1[93] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
                ++nVars;
                if (tkVBegin.specialToken!=null) {
                  String s= getSpecialToken(tkVBegin);
                  sterms.add(createTerm("string",s));
                }
                if (tkVNo==null) {
                 if (tkVBegin.image.endsWith("${")) {
                   if (tkVBegin.image.length() > 2) {
                    String s = tkVBegin.image.substring(0,tkVBegin.image.length()-2);
                    sterms.add(createTerm("string",s));
                   }
                   String varName = tkVEnd.image.substring(0,
                                                 tkVEnd.image.length()-1);
                   Term t = createTerm("var",varName);
                   sterms.add(t);
                 }else{
                  if (tkVBegin.image.length() > 1) {
                    String s = tkVBegin.image.substring(0,tkVBegin.image.length()-1);
                    sterms.add(createTerm("string",s));
                  }
                  Term t = createTerm("var",tkVEnd.image);
                  sterms.add(t);
                 }
                }else{
                 if (tkVBegin.image.length() > 1) {
                    String s = tkVBegin.image.substring(0,tkVBegin.image.length()-1);
                    sterms.add(createTerm("string",s));
                 }
                 Term t = createTerm("string",tkVNo.image);
                 sterms.add(t);
                }
          }
          tkEnd = jj_consume_token(DOUBLE_STRING_LITERAL_END);
            if (!tkBegin.image.equals("\"")) {
             Term t = createTerm("string",tkBegin.image.substring(1));
             sterms.add(0,t);
            }
            if (!tkEnd.image.equals("\"")) {
             Term t = createTerm("string",
                             tkEnd.image.substring(0,tkEnd.image.length()-1));
             sterms.add(t);
            }
          break;
        default:
          jj_la1[94] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      //System.err.println("addTerm must be called");
      jjtn000.addTerm(adoptList(sterms),0);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Visibility() throws ParseException {
 /*@bgen(jjtree) Visibility */
 SimpleNode jjtn000 = new SimpleNode(JJTVISIBILITY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        tk = jj_consume_token(PUBLIC);
        break;
      case PRIVATE:
        tk = jj_consume_token(PRIVATE);
        break;
      case PROTECTED:
        tk = jj_consume_token(PROTECTED);
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.addTerm(createAtom(tk.image),0);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(111)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_42()) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(DSL_COMPLEX_VAR_START)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(DSL_SIMPLE_VAR_START)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    }
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(GOTO)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_98()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_182() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DOUBLE_STRING_LITERAL_END)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_77()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(DSL_SIMPLE_VAR_START)) return true;
    if (jj_scan_token(DSL_SIMPLE_STRING_VAR_END)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(DOUBLE_STRING_LITERAL_START)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(DECLARE)) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(SINGLE_STRING_LITERAL_START)) return true;
    if (jj_scan_token(SINGLE_STRING_LITERAL_END)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(USE)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(111)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(PREDEFINED_CONSTANT)) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(DOLLAR1)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(NAMESPACE)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(DOLLAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(VAR_NAME)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(FOREACH)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(109)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(CLONE)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(109)) return true;
    if (jj_3R_58()) return true;
    if (jj_scan_token(110)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_3R_178()) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_3R_177()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_scan_token(109)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(109)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(110)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(118)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(ELSEIF)) return true;
    if (jj_scan_token(109)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    }
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_3R_154()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    Token xsp;
    if (jj_3_7()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(118)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(SWITCH)) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(113)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(158)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(113)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(157)) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(158)) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_158()) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(157)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_157()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(156)) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(156)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(109)) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_156()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_123()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_160()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(113)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_38()) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(112)) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_120()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(GLOBAL)) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) return true;
    }
    return false;
  }

  final private boolean jj_3R_148() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_54() {
    Token xsp;
    if (jj_3R_80()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_79()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(DOLLAR)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(PHP_END)) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) return true;
    }
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_3R_162()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_148()) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    return false;
  }

  final private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) return true;
    }
    }
    }
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(109)) return true;
    if (jj_scan_token(VARTYPE)) return true;
    if (jj_scan_token(110)) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(109)) return true;
    if (jj_scan_token(VARTYPE)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(TRY)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(THROW)) return true;
    return false;
  }

  final private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(151)) return true;
    }
    }
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) return true;
    }
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_146()) return true;
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_78()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) return true;
    }
    }
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(115)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(135)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) return true;
    }
    }
    }
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(134)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(133)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) return true;
    }
    }
    }
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_49()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(131)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  public PHPTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[96];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1d1000,0x3,0x1c,0x1c,0x0,0x0,0x0,0x18,0x18,0x3,0x0,0x1d1000,0x1d1000,0x0,0x0,0x0,0x1d1000,0x1d1000,0x1d1000,0x1d1000,0x0,0x0,0x0,0x0,0x1000,0x1000,0x1d1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1d1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1d1000,0x0,0x0,0x0,0x0,0x0,0x0,0x1d1000,0x0,0x0,0x1d1000,0x0,0x1d1000,0x0,0x0,0x0,0x0,0x1d1000,0x0,0x1d1000,0x1c0000,0x18000000,0x0,0x18000000,0x1c000000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0xbe7f8000,0x0,0x0,0x0,0xbe7f8000,0x0,0x0,0x0,0x0,0x0,0x1800000,0xbe7f8000,0xbe7f8000,0x400000,0x1800000,0xb8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x78000,0x0,0x300000,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x7fb7fb03,0x0,0x0,0x0,0x7893f903,0x80000000,0x28000000,0x0,0x0,0x0,0x0,0x7fb7fb03,0x7fb7fb03,0x2,0x0,0x0,0x17200000,0x17200000,0x17200000,0x17200000,0x0,0x0,0x0,0x1,0x0,0x0,0x17200000,0x0,0x0,0x0,0x18000,0x18000,0x400,0x0,0x80000,0x1093f900,0x1082f800,0x0,0x10000000,0x7000,0x0,0x0,0x27800,0x27800,0x0,0x0,0x10000000,0x37000,0x37000,0x0,0x400,0x10f100,0x9000,0x9000,0x0,0x10000000,0x0,0x0,0x0,0x17200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17200000,0x0,0x0,0x0,0x0,0x0,0x0,0x17200000,0x0,0x0,0x4000000,0x3200000,0x17200000,0x0,0x0,0x2200000,0x0,0x17200000,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x7000,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x4a241f,0x0,0x0,0x0,0x42001f,0x0,0x0,0x0,0x0,0x0,0x0,0x4a241f,0x4a241f,0x0,0x0,0x0,0x482400,0x482400,0x482400,0x482400,0x80000,0x80000,0x100000,0x2,0x0,0x0,0x482400,0x400,0x80000,0x200000,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x80000,0x80400,0x0,0x8000,0x200000,0x0,0x0,0x8000,0x80000,0x80400,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x80000,0x80400,0x20000,0x400000,0x0,0x482400,0x0,0x800000,0x0,0xff200000,0x0,0x0,0x0,0x0,0x0,0x80000,0x482400,0x0,0x0,0x0,0x0,0x22000,0x2000,0x482400,0x400000,0x400000,0x400400,0x0,0x482400,0x8000,0x100000,0x0,0x100,0x482400,0x8000,0x400,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0xf080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf080000,0xf080000,0x0,0x0,0x0,0xf080000,0xf080000,0xf080000,0xf080000,0x0,0x0,0x0,0x0,0x0,0x0,0xf080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf080000,0x0,0x0,0x0,0x7,0xf00,0xf000,0x30000,0x1c0000,0xe00000,0x3080000,0xf080000,0xc000000,0xc000000,0xc000000,0xc000000,0x70000000,0x0,0xf080000,0x0,0x0,0x0,0x0,0xf080000,0x0,0x0,0x0,0x0,0xf080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[40];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PHP(java.io.InputStream stream) {
     this(stream, null);
  }
  public PHP(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PHPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PHP(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PHPTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PHP(PHPTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PHPTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 96; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[160];
    for (int i = 0; i < 160; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 96; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 160; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 40; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
