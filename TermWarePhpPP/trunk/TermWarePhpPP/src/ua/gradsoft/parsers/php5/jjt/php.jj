/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./php.jj */
/*@egen*//*

  PHP grammar defintion for use with JavaCC
  By Satyam (satyam@satyam.com.ar)

  This is a partial grammar which I meant to use in a project of mine.
  I refined it a little bit beyond my specific need, but didn't go to the 
  very end.
  It works for the purpose of my project, but it is not complete.

  It was tested by parsing all the source files in the PHP 5.0 test suite,
  and a couple of other applications (a CMS and an image gallery).
  Some files in these sets were skipped because they use syntax not supported
  in this parser, as noted in the TODO lists below.


TODO:

- Alternate notation for control flow, if: endif, etc.
- Curly braces to disambiguate variable variable array references: ${$a[1]} against ${$a}[1]
- Notice comment on line 555
- There are a couple of warnings when compiling which I wasn't able to solve nor was I able
  to figure out if they mattered at all.
*/

options {
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;                                                         
  STATIC=false;
}


PARSER_BEGIN(PHP)
package ua.gradsoft.parsers.php5.jjt;

import java.util.*;
import ua.gradsoft.termware.*;
import ua.gradsoft.termware.exceptions.*;
import ua.gradsoft.parsers.php5.*;


public  class PHP/*@bgen(jjtree)*/implements PHPTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTPHPState jjtree = new JJTPHPState();

/*@egen*/
	private static PHP parser ;

	public static void main ( String args [ ] ) {

		if(args.length == 0){
			System.out.println("PHP Parser Version 0.1Alpha:  Reading from standard input . . .");
			parser = new PHP(System.in);
		} else if (args.length == 1) {
			System.out.println("PHP Parser Version 0.1Alpha:  Reading from file " + args[0] + " . . ." );
			try {
				parser = new PHP(new java.io.FileInputStream(args[0]));
			}
			catch(java.io.FileNotFoundException e){
				System.out.println("PHP Parser Version 0.1:  File " + args[0] + " not found.");
				return ;
			}
		} else {
			System.out.println("PHP Parser Version 0.1Alpha:  Usage is one of:");
			System.out.println("         java PHP < inputfile");
			System.out.println("OR");
			System.out.println("         java PHP inputfile");
			return ;
		}
		parser.token_source.SwitchTo(HTML_STATE);
		try {
			parser.PhpPage();
			System.out.println("PHP Parser Version 0.1Alpha:  PHP program parsed successfully.");
		}
		catch(TermWareException e) {
			System.out.println("PHP Parser Version 0.1Alpha:  Encountered errors during parse.");
			System.out.println(e.getMessage());
                        e.printStackTrace();
                }
		catch(ParseException e) {
			System.out.println("PHP Parser Version 0.1Alpha:  Encountered errors during parse.");
			System.out.println(e.getMessage());
		}
	}

    public SimpleNode getRootNode()
     { return (SimpleNode)jjtree.rootNode(); }

    public String getInFname()
     { return inFname_; }

    public void setInFname(String inFname)
     { inFname_=inFname; }

    public void  setTermWareInstance(TermWareInstance instance)
     { termWareInstance_=instance; }

    Term createString(String value) 
    {
        return termWareInstance_.getTermFactory().createString(value);
    }

    Term createAtom(String name) 
    {
        return termWareInstance_.getTermFactory().createAtom(name);
    }

    Term createNil() 
    {
        return termWareInstance_.getTermFactory().createNil();
    }

    Term createInt(int n) throws TermWareException
    {
      return termWareInstance_.getTermFactory().createInt(n);
    }

    Term createInt(String s) throws TermWareException
    {
      try {
       int i = Integer.parseInt(s);
       return termWareInstance_.getTermFactory().createInt(i);
      }catch(NumberFormatException ex){
        throw new TermParseException("Can't parse interger:"+s,ex); 
      }
    }

    Term createFloat(String s) throws TermWareException
    {
      try {
       double d = Double.parseDouble(s);
       return termWareInstance_.getTermFactory().createDouble(d);
      }catch(NumberFormatException ex){
        throw new TermParseException("Can't parse interger:"+s,ex); 
      }
    }

    Term createBoolean(boolean b) throws TermWareException
    {
      return termWareInstance_.getTermFactory().createBoolean(b);
    }

    Term createIdentifier(String name) throws TermWareException
    {
        return createTerm("Identifier",name);
    }

    Term createTerm(String name, Object ... subterms) throws TermWareException
    {
       Term[] terms = new Term[subterms.length];
       for(int i=0; i<subterms.length; ++i) {
         terms[i]=termWareInstance_.getTypeConversion().adopt(subterms[i]);
       }
       return termWareInstance_.getTermFactory().createTerm(name, terms);
    }

    Term createTerm(String name, Term ... subterms) throws TermWareException
    {
       return termWareInstance_.getTermFactory().createTerm(name, subterms);
    }

    Term adoptList(List<Term> l) throws TermWareException
    {
      return termWareInstance_.getTypeConversion().adopt(l);
    }

    private String getSpecialToken(Token tk)
    {
      String s="";
      while(tk.specialToken != null) {
         s=tk.specialToken.image+s;
         tk=tk.specialToken;
      }
      return s;
    }


    private String inFname_;
    private TermWareInstance termWareInstance_;


}

PARSER_END(PHP)

TOKEN_MGR_DECLS : {
	String HereDocEnd;
}

<HTML_STATE> TOKEN [IGNORE_CASE]: {
	<PHP_BEGIN: "<?" ("php")?> : DEFAULT  |
	<PHP_EXPR: "<?=" > : DEFAULT |
	<HTML_OTHER: "<" ~[] >
}

<HTML_STATE> TOKEN : {
	<HTML: (~["<"] | "<" ~["?"])+ >
}

<DEFAULT> SKIP :
{	" "
|	"\t"
|	"\n"
|	"\r"
|	<SLASH_SLASH_COMMENT: "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|	<NUMERAL_COMMENT: "#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|	<SLASH_STAR_COMMENT: "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

<DEFAULT> TOKEN :
{	<INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?>
|  		<#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|  		<#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  		<#OCTAL_LITERAL: "0" (["0"-"7"])*>
|  	<FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|  		<#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
|  	<DOUBLE_STRING_LITERAL_START: "\""> : DOUBLE_STRING_LITERAL
|  	<SINGLE_STRING_LITERAL_START: "'">  : SINGLE_STRING_LITERAL
| 	<HEREDOC_START: "<<<"> : HEREDOC1
}

<SINGLE_STRING_LITERAL> MORE: {
	<"\\">: SSL_SPECIAL
}

<SINGLE_STRING_LITERAL> TOKEN: {
	<SINGLE_STRING_LITERAL_END: "'">: DEFAULT
}

<SINGLE_STRING_LITERAL> MORE:
{	<(~[])>
}

<SSL_SPECIAL> MORE:
{	<["'" , "\\"] > : SINGLE_STRING_LITERAL
|	< ~[]> : SINGLE_STRING_LITERAL
}

<DOUBLE_STRING_LITERAL> TOKEN: {
	<DOUBLE_STRING_LITERAL_END: "\""> : DEFAULT
}

<DOUBLE_STRING_LITERAL> TOKEN:
{	<DSL_SIMPLE_VAR_START: "$"> :DSL_SIMPLE_VAR
|	<DSL_COMPLEX_VAR_START: ("{$" | "${") > :DSL_COMPLEX_VAR
}

<DOUBLE_STRING_LITERAL> MORE: {
	<"\\"> : DSL_SPECIAL
}

<DOUBLE_STRING_LITERAL> MORE: {
	<TEXT: (~[])>
}

<DSL_COMPLEX_VAR> TOKEN: {
	<DSL_COMPLEX_VAR_END: "}"> :DOUBLE_STRING_LITERAL
}

<DSL_COMPLEX_VAR> MORE: {
	<DSL_CV_TEXT: (~[])>
}

<DSL_SIMPLE_VAR> TOKEN:
{	<DSL_SIMPLE_VAR_END: <IDENTIFIER> ("[" <IDENTIFIER> "]") ? > :DOUBLE_STRING_LITERAL
}

<DSL_SIMPLE_VAR> TOKEN:
{	<DSL_SIMPLE_STRING_VAR_END: "\""> :DEFAULT
}

<DSL_SIMPLE_VAR> TOKEN:
{ 	<DSL_SIMPLE_VAR_WASNT: ~[]> :DOUBLE_STRING_LITERAL
}

<DSL_SPECIAL> MORE: {
	<["n","t","b","r","f","\\","\"","$","{"]> :DOUBLE_STRING_LITERAL  |
	<(["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])> :DOUBLE_STRING_LITERAL |
	<("x" | "X") ["0"-"9","A"-"F","a"-"f"](["0"-"9","A"-"F","a"-"f"])?> :DOUBLE_STRING_LITERAL |
	< ~[]>:DOUBLE_STRING_LITERAL
}


<HEREDOC1> SKIP: {
	<HD1: <IDENTIFIER>> {
		HereDocEnd = image.toString();
	} :HEREDOC
}
<HEREDOC> SKIP: {
	<~["\n"]> |
	<"\n"> :HEREDOC2
}

<HEREDOC, HEREDOC2> SKIP: {
	< "\r" | " " >
}

<HEREDOC2> SKIP: {
	<"\n"> |
	<HD2: <IDENTIFIER>>
	 {
		SwitchTo( HereDocEnd.equals(image.toString()) ? DEFAULT : HEREDOC ) ;
	} |
	<~[] > :HEREDOC
}



<DEFAULT> TOKEN : {

	<REQUIRE_ONCE: "require_once"> |
	<REQUIRE: "require"> |
	<INCLUDE_ONCE: "include_once"> |
	<INCLUDE: "include"> |

	<DEFINE: "define"> |

	<ECHO: "echo"> |
	<PRINT: "print"> |

	<SWITCH: "switch"> |
	<CASE: "case"> |
	<DFLT: "default"> |
	<BREAK: "break"> |

	<RETURN: "return"> |

	<DO: "do"> |

	<WHILE: "while"> |

	<FOREACH: "foreach"> |
	<AS: "as"> |

	<FOR: "for"> |
	<CONTINUE: "continue"> |

	<IF: "if"> |
	<ELSE: "else"> |
	<ELSEIF: "elseif"> |
	<AND: "and"> |
	<OR: "or"> |
	<XOR: "xor"> |
	<NOT: "not"> |

	<FUNCTION: "function"> |

	<CLASS: "class"> |
	<EXTENDS: "extends" > |
	<VAR: "var"> |
	<PUBLIC: "public"> |
	<PRIVATE: "private"> |
	<PROTECTED: "protected"> |
	<ABSTRACT: "abstract"> |
	<FINAL: "final" > |
	<STATIC: "static" > |
	<INTERFACE: "interface"> |
	<IMPLEMENTS: "implements"> |
	<CONST: "const" > |
	<CLONE: "clone" > |
	<INSTANCEOF: "instanceof" > |

	<GLOBAL: "global"> |

	<ARRAY: "array"> |

	<NEW: "new" > |

	<PREDEFINED_CONSTANT: "null" | "true" | "false" > |

	<PHP_END: "?>"  > : HTML_STATE |
	<DOLLAR: "$" > :VAR_NAME_STATE |
	<SEMICOLON: ";">
| 	<TRY: "try">
|	<CATCH: "catch">
|	<THROW: "throw">
|	<GOTO: "goto">

|	<DECLARE: "declare">
|	<NAMESPACE: "namespace">
|	<USE: "use">

}

<VAR_NAME_STATE> TOKEN : 
{	<VAR_NAME: <LETTER1> (<LETTER1> | <DIGIT1>)*> : DEFAULT
|  		<#LETTER1: ["A"-"Z","_","a"-"z"]>
|  		<#DIGIT1: ["0"-"9"]>
|	<DOLLAR1: "$">
}

<DEFAULT> TOKEN: {
	<VARTYPE: ("boolean" | "bool" | "integer" | "int" | "float" | "double" | "real" | "string" )>
}


<DEFAULT> TOKEN : {
 	<IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
|  		<#LETTER: ["A"-"Z","_","a"-"z"]>
|  		<#DIGIT: ["0"-"9"]>
}

void PhpPage() throws TermWareException  : {/*@bgen(jjtree) PhpPage */
  SimpleNode jjtn000 = new SimpleNode(JJTPHPPAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PhpPage */
        try {
/*@egen*/
	HtmlBlocks()
	(
		<PHP_BEGIN> (Statement())*
	| 	
                <EOF>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/
                  { jjtn000.addTerm(createNil(),0); }
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void HtmlBlocks() throws TermWareException  : {/*@bgen(jjtree) HtmlBlocks */
  SimpleNode jjtn000 = new SimpleNode(JJTHTMLBLOCKS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HtmlBlocks */
  try {
/*@egen*/
  (HtmlBlock())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void HtmlBlock() throws TermWareException  : 
{/*@bgen(jjtree) HtmlBlock */
 SimpleNode jjtn000 = new SimpleNode(JJTHTMLBLOCK);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token htmlToken;
}
{/*@bgen(jjtree) HtmlBlock */
   try {
/*@egen*/	
   htmlToken=<HTML>/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/
     { jjtn000.addTerm(createString(htmlToken.image),0); }
|	
   htmlToken=<HTML_OTHER>/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/
     { jjtn000.addTerm(createString(htmlToken.image),0); }
|	
   <PHP_EXPR> Expression() <PHP_END>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof TermWareException) {
       throw (TermWareException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Statement() throws TermWareException  : {/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
        try {
/*@egen*/
	LOOKAHEAD(2) GotoLabeledStatement() |
	LOOKAHEAD(2) ClassDeclaration() |
	LOOKAHEAD(2) InterfaceDeclaration() |
	LOOKAHEAD(2) ExpressionStatement() |
	CompoundStatement() |
	SelectionStatement() |
	IterationStatement() |
	JumpStatement() |
	IncludeStatement() |
	EchoStatement() |
	DefineStatement() |
	MemberDeclaration()
|	ThrowStatement()
| 	TryBlock()
|       NamespaceStatement()
|       UseStatement()
|       DeclareStatement()
|	EndOfStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void  ThrowStatement() throws TermWareException  : {/*@bgen(jjtree) ThrowStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ThrowStatement */
        try {
/*@egen*/
	<THROW> ClassInstantiation() EndOfStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void TryBlock() throws TermWareException  : {/*@bgen(jjtree) TryBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTTRYBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TryBlock */
        try {
/*@egen*/
	<TRY> CompoundStatement() CatchBlocks()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CatchBlocks() throws TermWareException :
{/*@bgen(jjtree) CatchBlocks */
  SimpleNode jjtn000 = new SimpleNode(JJTCATCHBLOCKS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CatchBlocks */
  try {
/*@egen*/
  ( CatchBlock() )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CatchBlock() throws TermWareException :
{/*@bgen(jjtree) CatchBlock */
 SimpleNode jjtn000 = new SimpleNode(JJTCATCHBLOCK);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk;
}
{/*@bgen(jjtree) CatchBlock */
  try {
/*@egen*/
  <CATCH> "(" tk=<IDENTIFIER> Variable() ")" CompoundStatement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.addTerm(createIdentifier(tk.image),0); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void EndOfStatement() throws TermWareException : {/*@bgen(jjtree) EndOfStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTENDOFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EndOfStatement */
        try {
/*@egen*/
	";" | EmbeddedHtml()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void EmbeddedHtml() throws TermWareException : 
{/*@bgen(jjtree) EmbeddedHtml */
  SimpleNode jjtn000 = new SimpleNode(JJTEMBEDDEDHTML);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token htmlToken;
  List<Term> htmls = new ArrayList<Term>();
  Term st = createNil();
}
{/*@bgen(jjtree) EmbeddedHtml */
        try {
/*@egen*/	<PHP_END>  ( htmlToken=<HTML> 
                         { htmls.add(createString(htmlToken.image)); } 
                     | htmlToken=<HTML_OTHER> 
                         { htmls.add(createString(htmlToken.image)); } 
                   )*
	(
		<PHP_BEGIN>
                  { st=createAtom("PhpBegin"); }
	|	<EOF>
                 
	)/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
         { 
           jjtn000.addTerm(adoptList(htmls),0);
           jjtn000.addTerm(st,1);
         }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DefineStatement() throws TermWareException  : 
{/*@bgen(jjtree) DefineStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTDEFINESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 boolean withcssn = false;
}
{/*@bgen(jjtree) DefineStatement */
        try {
/*@egen*/
	<DEFINE> "(" String() "," Expression() 
                     [ "," Expression() { withcssn = true; } ] 
                 ")" EndOfStatement()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
          if (!withcssn) {
            jjtn000.addTerm(createNil(),2);
          }
        }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LabeledStatements() throws TermWareException  : {/*@bgen(jjtree) LabeledStatements */
  SimpleNode jjtn000 = new SimpleNode(JJTLABELEDSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LabeledStatements */
        try {
/*@egen*/
	<CASE> Expression() ":" Statements() 
       |
	<DFLT> ":" Statements()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { jjtn000.addTerm(createAtom("default"),0); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Statements() throws TermWareException  : 
{/*@bgen(jjtree) Statements */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statements */
 try {
/*@egen*/
 (Statement())*/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     throw (TermWareException)jjte000;
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void GotoLabeledStatement() throws TermWareException : 
{/*@bgen(jjtree) GotoLabeledStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTGOTOLABELEDSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk;
}
{/*@bgen(jjtree) GotoLabeledStatement */
     try {
/*@egen*/
     tk=<IDENTIFIER> ":" Statement()/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/
      { jjtn000.addTerm(createString(tk.image),0); 
        jjtn000.setAttribute("line",createInt(tk.beginLine));
        jjtn000.setAttribute("file",createString(getInFname()));
      }/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof TermWareException) {
         throw (TermWareException)jjte000;
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

void ExpressionStatement() throws TermWareException  : {/*@bgen(jjtree) ExpressionStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressionStatement */
        try {
/*@egen*/
	Expression() EndOfStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CompoundStatement() throws TermWareException  : 
{/*@bgen(jjtree) CompoundStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTCOMPOUNDSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk=null;
}
{/*@bgen(jjtree) CompoundStatement */
        try {
/*@egen*/
	tk="{"
	    ( Statement())*
	"}"/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/
      {
        jjtn000.setAttribute("line",createInt(tk.beginLine));
        jjtn000.setAttribute("file",createString(getInFname()));
      }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SelectionStatement() throws TermWareException  : 
{/*@bgen(jjtree) SelectionStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) SelectionStatement */
 try {
/*@egen*/
 SelectionIfStatement()
 |
 SelectionSwitchStatement()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     throw (TermWareException)jjte000;
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void SelectionIfStatement() throws TermWareException  : 
{/*@bgen(jjtree) SelectionIfStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTIONIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  boolean withElseIf = false;
  boolean withElse = false;
}
{/*@bgen(jjtree) SelectionIfStatement */
        try {
/*@egen*/
	<IF> "(" Expression() ")" Statement() 
             [LOOKAHEAD(2) SelectionElseIfClauses() { withElseIf = true; } ] 
             [LOOKAHEAD(2) <ELSE> Statement() { withElse=true; } ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  {
    if (!withElseIf) {
       jjtn000.addTerm(createNil(),2); 
    }
    if (!withElse) {
       jjtn000.addTerm(createNil(),3); 
    }
  }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void SelectionSwitchStatement() throws TermWareException  : 
{/*@bgen(jjtree) SelectionSwitchStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTIONSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) SelectionSwitchStatement */
        try {
/*@egen*/
	<SWITCH> "(" Expression() ")" CaseStatements()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CaseStatements() throws TermWareException  : 
{/*@bgen(jjtree) CaseStatements */
  SimpleNode jjtn000 = new SimpleNode(JJTCASESTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) CaseStatements */
  try {
/*@egen*/
  "{"
     ( LabeledStatements() )*
  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SelectionElseIfClauses() throws TermWareException :
{/*@bgen(jjtree) SelectionElseIfClauses */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTIONELSEIFCLAUSES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) SelectionElseIfClauses */
   try {
/*@egen*/
   ( LOOKAHEAD(2) SelectionElseIfClause() )+/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof TermWareException) {
       throw (TermWareException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void SelectionElseIfClause() throws TermWareException :
{/*@bgen(jjtree) SelectionElseIfClause */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTIONELSEIFCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) SelectionElseIfClause */
   try {
/*@egen*/
   ( <ELSEIF> "(" Expression() ")" Statement() )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof TermWareException) {
       throw (TermWareException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void IterationStatement() throws TermWareException  : {/*@bgen(jjtree) IterationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTITERATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IterationStatement */
        try {
/*@egen*/
	WhileStatement() 
       |
        DoStatement()
       |
        ForStatement()
       |
        ForEachStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WhileStatement() throws TermWareException  : 
{/*@bgen(jjtree) WhileStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk=null;
}
{/*@bgen(jjtree) WhileStatement */
  try {
/*@egen*/
  tk=<WHILE> "(" Expression() ")" Statement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  { 
    jjtn000.setAttribute("line",createInt(tk.beginLine));
    jjtn000.setAttribute("file",createString(getInFname()));
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DoStatement() throws TermWareException  : 
{/*@bgen(jjtree) DoStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTDOSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk=null;
}
{/*@bgen(jjtree) DoStatement */
 try {
/*@egen*/
 <DO> Statement() <WHILE> "(" Expression() ")" EndOfStatement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  { 
    jjtn000.setAttribute("line",createInt(tk.beginLine));
    jjtn000.setAttribute("file",createString(getInFname()));
  }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     throw (TermWareException)jjte000;
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void ForStatement() throws TermWareException  : 
{/*@bgen(jjtree) ForStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  boolean withE1=false;
  boolean withE2=false;
  boolean withE3=false;
}
{/*@bgen(jjtree) ForStatement */
  try {
/*@egen*/
  <FOR> "(" [ Expression() {withE1=true;}] ";" 
            [ Expression() {withE2=true;}] ";" 
            [ Expression() {withE3=true;}] ")" Statement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  {
   if (!withE1) {
     jjtn000.addTerm(createNil(),0);
   }
   if (!withE2) {
     jjtn000.addTerm(createNil(),1);
   }
   if (!withE3) {
     jjtn000.addTerm(createNil(),2);
   }
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ForEachStatement() throws TermWareException  : 
{/*@bgen(jjtree) ForEachStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTFOREACHSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 boolean withKey = false;
 boolean withExpr = false;
 boolean withRef = false;
}
{/*@bgen(jjtree) ForEachStatement */
  try {
/*@egen*/
  <FOREACH> "(" 
               [Expression() { withExpr=true; } ] 
               <AS> [ "&" {withRef=true;} ]  Variable() 
                  [ "=>" ["&" { withRef=true;} ] Variable() 
                        { withKey=true; }
                  ]
               ")" Statement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (!withExpr) {
       jjtn000.addTerm(createNil(),0);
    }
    if (!withKey) {
       jjtn000.addTerm(createNil(),1);
    }
    jjtn000.addTerm(createBoolean(withRef),3);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void JumpStatement() throws TermWareException  : {/*@bgen(jjtree) JumpStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTJUMPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JumpStatement */
        try {
/*@egen*/
        ContinueStatement()
       |
        BreakStatement()
       |
        ReturnStatement()
       |
        GotoStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void ContinueStatement() throws TermWareException  : 
{/*@bgen(jjtree) ContinueStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTCONTINUESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk=null;
}
{/*@bgen(jjtree) ContinueStatement */
  try {
/*@egen*/
  <CONTINUE> [tk=<INTEGER_LITERAL>] EndOfStatement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  { if (tk!=null) {
      jjtn000.addTerm(createInt(tk.image),0);
    }else{
      jjtn000.addTerm(createNil(),0);
    }
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BreakStatement() throws TermWareException  : 
{/*@bgen(jjtree) BreakStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTBREAKSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk=null;
}
{/*@bgen(jjtree) BreakStatement */
  try {
/*@egen*/
  <BREAK> [tk=<INTEGER_LITERAL>] EndOfStatement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  { if (tk!=null) {
      jjtn000.addTerm(createInt(tk.image),0);
    }else{
      jjtn000.addTerm(createNil(),0);
    }
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ReturnStatement() throws TermWareException  : 
{/*@bgen(jjtree) ReturnStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTRETURNSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 boolean withexpr=false;
}
{/*@bgen(jjtree) ReturnStatement */
  try {
/*@egen*/
  <RETURN> [ Expression() {withexpr=true;}] EndOfStatement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  { if (!withexpr) {
      jjtn000.addTerm(createNil(),0);
    }
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void GotoStatement() throws TermWareException  : 
{/*@bgen(jjtree) GotoStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTGOTOSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk=null;
}
{/*@bgen(jjtree) GotoStatement */
  try {
/*@egen*/
  <GOTO> tk=<IDENTIFIER> EndOfStatement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  { jjtn000.addTerm(createString(tk.image),0); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ParameterList() throws TermWareException  : {/*@bgen(jjtree) ParameterList */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParameterList */
        try {
/*@egen*/
	Parameter() (LOOKAHEAD(2) "," Parameter())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Parameter() throws TermWareException  : 
{/*@bgen(jjtree) Parameter */
 SimpleNode jjtn000 = new SimpleNode(JJTPARAMETER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tkId=null;
 Token tkRef=null;
 boolean withInit=false;
}
{/*@bgen(jjtree) Parameter */
        try {
/*@egen*/
	[tkId=<IDENTIFIER> ] [tkRef="&"] Variable() 
                                  ["=" Expression() {withInit=true;}]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
   if (tkId==null) {
     jjtn000.addTerm(createNil(),0);
   }else{
     jjtn000.addTerm(createIdentifier(tkId.image),0);
   }
   jjtn000.addTerm(createBoolean(tkRef!=null),1);
   if (!withInit) {
     jjtn000.addTerm(createNil(),3);
   }
  }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void ClassDeclaration() throws TermWareException : 
{/*@bgen(jjtree) ClassDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tkAbstract=null;
 Token tkFinal=null;
 Token tkName=null;
 Token tkSuper=null;
 Token tkI=null;
 List<Term> implementsList = new ArrayList<Term>();
}
{/*@bgen(jjtree) ClassDeclaration */
        try {
/*@egen*/
	[tkAbstract=<ABSTRACT> | tkFinal=<FINAL> ] 
          <CLASS> tkName=<IDENTIFIER> 
         [<EXTENDS> tkSuper=<IDENTIFIER>] 
         [<IMPLEMENTS> tkI=<IDENTIFIER> { implementsList.add(
                                             createIdentifier(tkI.image)); }
                      ( "," tkI=<IDENTIFIER>
                         { implementsList.add(createIdentifier(tkI.image)); }
                      ) * ] 
         ClassMembers()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (tkAbstract!=null) {
     jjtn000.addTerm(createAtom("abstract"),0);
    }else if(tkFinal!=null){
     jjtn000.addTerm(createAtom("final"),0);
    }else{
     jjtn000.addTerm(createNil(),0);
    }
    jjtn000.addTerm(createIdentifier(tkName.image),1);
    if (tkSuper!=null) {
      jjtn000.addTerm(createIdentifier(tkSuper.image),2);
    }else{
      jjtn000.addTerm(createNil(),2);
    }
    jjtn000.addTerm(adoptList(implementsList),3);
  }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ClassMembers() throws TermWareException : {/*@bgen(jjtree) ClassMembers */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSMEMBERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassMembers */
        try {
/*@egen*/
	"{" (MemberDeclaration() )* "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MemberDeclaration() throws TermWareException : 
{/*@bgen(jjtree) MemberDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) MemberDeclaration */
        try {
/*@egen*/
	LOOKAHEAD( (<FINAL> | Visibility() | <STATIC> )* <FUNCTION>) 
        MemberFunctionDeclaration()
      |
	LOOKAHEAD([Visibility()] <CONST>) 
        MemberConstantDeclaration()
       |
        MemberVariablesDeclaration()
       |
        MemberGlobalsDeclaration()
       |
        MemberAbstractFunctionDeclaration()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MemberFunctionDeclaration() throws TermWareException : 
{/*@bgen(jjtree) MemberFunctionDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTMEMBERFUNCTIONDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tkRef=null;
 Token tkName=null; 
 boolean withPL=false;
}
{/*@bgen(jjtree) MemberFunctionDeclaration */
      try {
/*@egen*/
      MemberFunctionAttributes() <FUNCTION> [tkRef="&"]  tkName=<IDENTIFIER> 
          "(" [ParameterList() { withPL=true; } ] ")" CompoundStatement()/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ 
      {
        if (tkRef!=null) {
          jjtn000.addTerm(createAtom("ref"),1);
        }else{
          jjtn000.addTerm(createNil(),1);
        }
        jjtn000.addTerm(createIdentifier(tkName.image),2);
        if (withPL==false) {
          jjtn000.addTerm(createNil(),3);
        }
      }/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof TermWareException) {
          throw (TermWareException)jjte000;
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void MemberConstantDeclaration() throws TermWareException :
{/*@bgen(jjtree) MemberConstantDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTMEMBERCONSTANTDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 boolean withV=false;
 Token tk=null;
}
{/*@bgen(jjtree) MemberConstantDeclaration */
  try {
/*@egen*/
  [Visibility() {withV=true;}] <CONST> 
          tk=<IDENTIFIER> "=" Expression()  EndOfStatement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  {
    if (!withV) {
      jjtn000.addTerm(createNil(),0);
    }
    jjtn000.addTerm(createIdentifier(tk.image),1);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void MemberVariablesDeclaration() throws TermWareException :
{/*@bgen(jjtree) MemberVariablesDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERVARIABLESDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MemberVariablesDeclaration */
  try {
/*@egen*/
  MemberVariableAttributes() VariableDeclSeq() EndOfStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void VariableDeclSeq() throws TermWareException :
{/*@bgen(jjtree) VariableDeclSeq */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLSEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableDeclSeq */
  try {
/*@egen*/
  VariableDecl() ("," VariableDecl() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void VariableDecl() throws TermWareException :
{/*@bgen(jjtree) VariableDecl */
 SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk;
 boolean withExpr=false;
}
{/*@bgen(jjtree) VariableDecl */
  try {
/*@egen*/
  <DOLLAR> tk=<VAR_NAME> [ "=" Expression() { withExpr=true; } ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { jjtn000.addTerm(createIdentifier(tk.image),0); 
      if (!withExpr) {
        jjtn000.addTerm(createNil(),0); 
      }
    }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void MemberVariableAttributes() throws TermWareException :
{/*@bgen(jjtree) MemberVariableAttributes */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERVARIABLEATTRIBUTES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) MemberVariableAttributes */
  try {
/*@egen*/
  (    <VAR> { jjtn000.addTerm( createAtom("var"), jjtn000.getArity()); }
     | Visibility() 
     | <STATIC>  { jjtn000.addTerm( createAtom("static"), jjtn000.getArity()); }
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void MemberGlobalsDeclaration() throws TermWareException :
{/*@bgen(jjtree) MemberGlobalsDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERGLOBALSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MemberGlobalsDeclaration */
 try {
/*@egen*/
 <GLOBAL> VarList() EndOfStatement()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     throw (TermWareException)jjte000;
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

void VarList() throws TermWareException :
{/*@bgen(jjtree) VarList */
  SimpleNode jjtn000 = new SimpleNode(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarList */
  try {
/*@egen*/
  Variable() ("," Variable())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void MemberAbstractFunctionDeclaration() throws TermWareException : 
{/*@bgen(jjtree) MemberAbstractFunctionDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTMEMBERABSTRACTFUNCTIONDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tkRef = null;
 Token tkId = null;
 boolean withPL = false;
}
{/*@bgen(jjtree) MemberAbstractFunctionDeclaration */
        try {
/*@egen*/
	<ABSTRACT> MemberFunctionAttributes() 
          <FUNCTION> [tkRef="&"] tkId=<IDENTIFIER> 
            "(" [ParameterList() {withPL=true;}] ")" EndOfStatement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.addTerm(createBoolean(tkRef!=null),1);
    jjtn000.addTerm(createIdentifier(tkId.image),2);
    if (!withPL) {
      jjtn000.addTerm(createNil(),3);
    }
  }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MemberFunctionAttributes() throws TermWareException : 
{/*@bgen(jjtree) MemberFunctionAttributes */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERFUNCTIONATTRIBUTES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) MemberFunctionAttributes */
  try {
/*@egen*/
  ( <FINAL>  { jjtn000.addTerm(createAtom("final"),jjtn000.getArity()); }
    | Visibility() 
    | <STATIC> { jjtn000.addTerm(createAtom("static"),jjtn000.getArity()); }
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}


void InterfaceDeclaration() throws TermWareException : 
{/*@bgen(jjtree) InterfaceDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTINTERFACEDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tkId=null;
 List<Term> extendsList = new ArrayList<Term>();
 Token tkn1=null; 
 Token tkn2=null; 
}
{/*@bgen(jjtree) InterfaceDeclaration */
        try {
/*@egen*/
	<INTERFACE> tkId=<IDENTIFIER> 
          [<EXTENDS> tkn1=<IDENTIFIER> 
                   { extendsList.add(createIdentifier(tkn1.image)); }
                   ("," tkn2=<IDENTIFIER> 
                      { extendsList.add(createIdentifier(tkn2.image)); }
                   )* ] 
         InterfaceMembers()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.addTerm(createIdentifier(tkId.image),0);
    if (extendsList.size()==0) {
      jjtn000.addTerm(createNil(),1);
    } else {
      jjtn000.addTerm(adoptList(extendsList),1);
    }
  }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void InterfaceMembers() throws TermWareException : {/*@bgen(jjtree) InterfaceMembers */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERFACEMEMBERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InterfaceMembers */
        try {
/*@egen*/
	"{" ( InterfaceMember() )* "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void InterfaceMember() throws TermWareException : {/*@bgen(jjtree) InterfaceMember */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERFACEMEMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InterfaceMember */
      try {
/*@egen*/
      LOOKAHEAD((<ABSTRACT>|<PUBLIC>)* <FUNCTION>)
      InterfaceMethodDeclaration()
/*
  // I know nothing about this future in PHP
  //  Official documentation also know nothing, so,
  //  we will think that this is bug.
      |
	<DOLLAR> <VAR_NAME> ("," <DOLLAR> <VAR_NAME>)* 
*/
      |
	LOOKAHEAD([Visibility()] <CONST>) 
        MemberConstantDeclaration()/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof TermWareException) {
          throw (TermWareException)jjte000;
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
        }
      }
/*@egen*/
}

void InterfaceMethodDeclaration() throws TermWareException : 
{/*@bgen(jjtree) InterfaceMethodDeclaration */
 SimpleNode jjtn000 = new SimpleNode(JJTINTERFACEMETHODDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tkRef=null;
 Token tkId=null;
 boolean  withPL=false;
 boolean  withBody=false;
}
{/*@bgen(jjtree) InterfaceMethodDeclaration */
 try {
/*@egen*/
 (<ABSTRACT> | <PUBLIC>)* <FUNCTION> [tkRef="&"]  tkId=<IDENTIFIER> 
          "(" [ParameterList()  { withPL=true; }] ")" 
                                            ["{" "}" { withBody=true; }]
           EndOfStatement()/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {
  jjtn000.addTerm(createBoolean(tkRef!=null),0); 
  jjtn000.addTerm(createIdentifier(tkId.image),1); 
  if (!withPL) {
    jjtn000.addTerm(createNil(),2); 
  }
  jjtn000.addTerm(createBoolean(withBody),3); 
 }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     throw (TermWareException)jjte000;
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void IncludeStatement() throws TermWareException : 
{/*@bgen(jjtree) IncludeStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTINCLUDESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token refTk=null;
 Token wordTk=null;
}
{/*@bgen(jjtree) IncludeStatement */
        try {
/*@egen*/
	[refTk="@"] ( 
           wordTk=<INCLUDE> 
          | 
           wordTk=<INCLUDE_ONCE> 
          | 
           wordTk=<REQUIRE> 
          | 
           wordTk=<REQUIRE_ONCE>
         ) (LOOKAHEAD(2) "(" Expression() ")" | Expression() ) EndOfStatement()/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
     if (refTk==null) {
       jjtn000.addTerm(createBoolean(false),0);
     } else {
       jjtn000.addTerm(createBoolean(true),0);
     }
     jjtn000.addTerm(createAtom(wordTk.image),1);
   }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void EchoStatement() throws TermWareException : 
{/*@bgen(jjtree) EchoStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTECHOSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tkEcho=null;
 Token tkPrint=null;
}
{/*@bgen(jjtree) EchoStatement */
  try {
/*@egen*/
  (tkEcho=<ECHO> | tkPrint=<PRINT> ) ArgumentExpressionList() EndOfStatement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
   Term at = createAtom(tkEcho!=null ? "echo" : "print");
   jjtn000.addTerm(at,0);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NamespaceStatement() throws TermWareException : 
{/*@bgen(jjtree) NamespaceStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTNAMESPACESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) NamespaceStatement */
  try {
/*@egen*/
  <NAMESPACE> QualifiedName() EndOfStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void QualifiedName() throws TermWareException:
{/*@bgen(jjtree) QualifiedName */
 SimpleNode jjtn000 = new SimpleNode(JJTQUALIFIEDNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk=null;
 Token tk1 = null;
 int n=0;
}
{/*@bgen(jjtree) QualifiedName */
  try {
/*@egen*/
  tk=<IDENTIFIER> ("\\" tk1=<IDENTIFIER> 
                    { jjtn000.addTerm(createIdentifier(tk1.image),n); 
                      ++n;
                    }
                  ) */*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.addTerm(createIdentifier(tk.image),0); 
    jjtn000.setAttribute("file",createString(getInFname()));
    jjtn000.setAttribute("line",createInt(tk.beginLine));
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void UseStatement() throws TermWareException : 
{/*@bgen(jjtree) UseStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTUSESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk;
}
{/*@bgen(jjtree) UseStatement */
 try {
/*@egen*/
 tk=<USE> UsePairs() EndOfStatement()/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {
   jjtn000.setAttribute("file",createString(getInFname()));
   jjtn000.setAttribute("line",createInt(tk.beginLine));
 }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     throw (TermWareException)jjte000;
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void UsePairs() throws TermWareException : 
{/*@bgen(jjtree) UsePairs */
  SimpleNode jjtn000 = new SimpleNode(JJTUSEPAIRS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) UsePairs */
  try {
/*@egen*/
  UsePair() ( "," UsePair() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void UsePair() throws TermWareException : 
{/*@bgen(jjtree) UsePair */
 SimpleNode jjtn000 = new SimpleNode(JJTUSEPAIR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk=null;
}
{/*@bgen(jjtree) UsePair */
  try {
/*@egen*/
  QualifiedName() [<AS> tk=<IDENTIFIER> ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (tk!=null) {
      jjtn000.addTerm(createIdentifier(tk.image),1);
    }else{
      jjtn000.addTerm(createNil(),1);
    }
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DeclareStatement() throws TermWareException : 
{/*@bgen(jjtree) DeclareStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk=null;
}
{/*@bgen(jjtree) DeclareStatement */
  try {
/*@egen*/
  tk=<DECLARE> "(" AssignmentExpression()  ")" Statement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
   jjtn000.setAttribute("file",createString(getInFname()));
   jjtn000.setAttribute("line",createInt(tk.beginLine));
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Expression() throws TermWareException : {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
         try {
/*@egen*/
	 LogicalTextOrExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof TermWareException) {
             throw (TermWareException)jjte000;
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}


void LogicalTextOrExpression() throws TermWareException :{/*@bgen(jjtree) LogicalTextOrExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICALTEXTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LogicalTextOrExpression */
        try {
/*@egen*/
	LogicalTextXorExpression() [LOOKAHEAD(2) <OR> LogicalTextOrExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LogicalTextXorExpression() throws TermWareException : {/*@bgen(jjtree) LogicalTextXorExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICALTEXTXOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LogicalTextXorExpression */
        try {
/*@egen*/
	LogicalTextAndExpression() [LOOKAHEAD(2) <XOR> LogicalTextXorExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LogicalTextAndExpression() throws TermWareException : {/*@bgen(jjtree) LogicalTextAndExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICALTEXTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LogicalTextAndExpression */
        try {
/*@egen*/
	AssignmentExpression() [LOOKAHEAD(2) <AND> LogicalTextAndExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AssignmentExpression() throws TermWareException : {/*@bgen(jjtree) AssignmentExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssignmentExpression */
        try {
/*@egen*/
	ConditionalExpression() [LOOKAHEAD(2) AssignmentOperator() Expression()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AssignmentOperator() throws TermWareException : 
{/*@bgen(jjtree) AssignmentOperator */
 SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTOPERATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk;
}
{/*@bgen(jjtree) AssignmentOperator */
        try {
/*@egen*/
	( tk="=" 
         | tk="+=" 
         | tk="-=" 
         | tk="*=" 
         | tk="/=" 
         | tk=".=" 
         | tk="%=" 
         | tk="&=" 
         | tk="|=" 
         | tk="^=" 
         | tk="<<=" 
         | tk=">>=" )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   { jjtn000.addTerm(createString(tk.image),0); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ConditionalExpression() throws TermWareException : {/*@bgen(jjtree) ConditionalExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConditionalExpression */
        try {
/*@egen*/
	Logical_Or_Expression() [LOOKAHEAD(2) "?" Expression() ":" Expression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Logical_Or_Expression() throws TermWareException : {/*@bgen(jjtree) Logical_Or_Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL_OR_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Logical_Or_Expression */
        try {
/*@egen*/
	Logical_And_Expression() [LOOKAHEAD(2) "||" Logical_Or_Expression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Logical_And_Expression() throws TermWareException : {/*@bgen(jjtree) Logical_And_Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL_AND_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Logical_And_Expression */
        try {
/*@egen*/
	BitwiseOrExpression() [LOOKAHEAD(2) "&&" Logical_And_Expression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BitwiseOrExpression() throws TermWareException : {/*@bgen(jjtree) BitwiseOrExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBITWISEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BitwiseOrExpression */
        try {
/*@egen*/
	BitwiseXorExpression() [LOOKAHEAD(2) "|" BitwiseOrExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BitwiseXorExpression() throws TermWareException : {/*@bgen(jjtree) BitwiseXorExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBITWISEXOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BitwiseXorExpression */
        try {
/*@egen*/
	BitwiseAndExpression() [LOOKAHEAD(2) "^" BitwiseXorExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BitwiseAndExpression() throws TermWareException : {/*@bgen(jjtree) BitwiseAndExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBITWISEANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BitwiseAndExpression */
        try {
/*@egen*/
	EqualityExpression() [LOOKAHEAD(2) "&" BitwiseAndExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void EqualityExpression() throws TermWareException : 
{/*@bgen(jjtree) EqualityExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTEQUALITYEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk=null;
}
{/*@bgen(jjtree) EqualityExpression */
  try {
/*@egen*/
  RelationalExpression() 
    [LOOKAHEAD(2) ( tk="==" | tk="!=" | tk="===" | tk="!==" ) 
        EqualityExpression() ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (tk!=null) jjtn000.addTerm(createString(tk.image),1);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RelationalExpression() throws TermWareException : 
{/*@bgen(jjtree) RelationalExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTRELATIONALEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk=null;
}
{/*@bgen(jjtree) RelationalExpression */
  try {
/*@egen*/
  ShiftExpression() 
    [LOOKAHEAD(2) ( tk="<" | tk=">" | tk="<=" | tk=">=" ) 
           RelationalExpression() ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (tk!=null) jjtn000.addTerm(createString(tk.image),1);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ShiftExpression() throws TermWareException : 
{/*@bgen(jjtree) ShiftExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTSHIFTEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk=null;
}
{/*@bgen(jjtree) ShiftExpression */
        try {
/*@egen*/
	AdditiveExpression() [LOOKAHEAD(2) ( tk="<<" | tk=">>" ) ShiftExpression() ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (tk!=null) jjtn000.addTerm(createString(tk.image),1);
  }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AdditiveExpression() throws TermWareException : 
{/*@bgen(jjtree) AdditiveExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk=null;
}
{/*@bgen(jjtree) AdditiveExpression */
        try {
/*@egen*/
	MultiplicativeExpression() 
           [LOOKAHEAD(2) ( tk="+" | tk="-" | tk="." ) AdditiveExpression() ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { if (tk!=null) {
        jjtn000.addTerm(createString(tk.image),1);
      }
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MultiplicativeExpression() throws TermWareException : 
{/*@bgen(jjtree) MultiplicativeExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk=null;
}
{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/
  CastExpression() 
     [LOOKAHEAD(2) ( tk="*" | tk="/" | tk="%" ) 
              MultiplicativeExpression() ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (tk!=null) jjtn000.addTerm(createString(tk.image),1);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CastExpression() throws TermWareException : 
{/*@bgen(jjtree) CastExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tk=null;
}
{/*@bgen(jjtree) CastExpression */
  try {
/*@egen*/
  [ LOOKAHEAD("(" <VARTYPE> ")") "(" tk=<VARTYPE> ")" ] UnaryExpression()/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {
   if (tk!=null) jjtn000.addTerm(createAtom(tk.image),1);
 }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void UnaryExpression() throws TermWareException : 
{/*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tk=null;
}
{/*@bgen(jjtree) UnaryExpression */
    try {
/*@egen*/
    (tk="&" | tk="-" | tk="~" | tk="!") UnaryExpression()/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/
       { jjtn000.addTerm(createString(tk.image),0); }
    |
     PrefixIncDecExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof TermWareException) {
        throw (TermWareException)jjte000;
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PrefixIncDecExpression() throws TermWareException : 
{/*@bgen(jjtree) PrefixIncDecExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPREFIXINCDECEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tk=null;
}
{/*@bgen(jjtree) PrefixIncDecExpression */
        try {
/*@egen*/
	( tk="++" | tk="--" )  PrefixIncDecExpression()/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ 
          { jjtn000.addTerm(createString(tk.image),0); }
	|
          LOOKAHEAD(2)
          PostfixIncDecExpression0()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void PostfixIncDecExpression0() throws TermWareException : 
{/*@bgen(jjtree) PostfixIncDecExpression0 */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXINCDECEXPRESSION0);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) PostfixIncDecExpression0 */
    try {
/*@egen*/
    InstanceOfExpression() [LOOKAHEAD(2) IncDecSuffix() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof TermWareException) {
        throw (TermWareException)jjte000;
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IncDecSuffix() throws TermWareException : 
{/*@bgen(jjtree) IncDecSuffix */
 SimpleNode jjtn000 = new SimpleNode(JJTINCDECSUFFIX);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk=null;
}
{/*@bgen(jjtree) IncDecSuffix */
  try {
/*@egen*/
  ( ( tk="++" | tk="--" )
   { jjtn000.addTerm(createString(tk.image),jjtn000.getArity()); }
  )+/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void InstanceOfExpression() throws TermWareException  : {/*@bgen(jjtree) InstanceOfExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTANCEOFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InstanceOfExpression */
        try {
/*@egen*/
	PostfixExpression() [LOOKAHEAD(2) <INSTANCEOF>  Expression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void PostfixExpression() throws TermWareException : 
{/*@bgen(jjtree) PostfixExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) PostfixExpression */
  try {
/*@egen*/
  PrimaryExpression()
                       ( 
                               PostfixExpressionMethodCallSuffix() 
                        |
                          LOOKAHEAD("->")
                               PostfixExpressionMemberSelectorSuffix() 
            /* TODO: There is a problem here.  Variable members
	           can have reserved names since they are preceded
		by a $, but the $ is ommitted here and this
                parser will complain.  If you have declared:
			private $array
		you can have:
   			$this->array
		which is fine with PHP,
		but will generate an error in this parser */
                        |
                          LOOKAHEAD("::")
                          PostfixExpressionScopeResolutionSuffix() 
                        |
                          LOOKAHEAD("[")
                          PostfixExpressionArrayIndexSuffix()
                        |
                          LOOKAHEAD("{")
                          PostfixExpressionCurlyBracketsSuffix() 
		 )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PostfixExpressionMethodCallSuffix() throws TermWareException : {/*@bgen(jjtree) PostfixExpressionMethodCallSuffix */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXEXPRESSIONMETHODCALLSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PostfixExpressionMethodCallSuffix */
 try {
/*@egen*/
 "("  ArgumentExpressionList() ")"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     throw (TermWareException)jjte000;
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

void PostfixExpressionMemberSelectorSuffix() throws TermWareException : {/*@bgen(jjtree) PostfixExpressionMemberSelectorSuffix */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXEXPRESSIONMEMBERSELECTORSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PostfixExpressionMemberSelectorSuffix */
 try {
/*@egen*/
 "->"  PostfixExpression()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     throw (TermWareException)jjte000;
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

void PostfixExpressionScopeResolutionSuffix() throws TermWareException : 
{/*@bgen(jjtree) PostfixExpressionScopeResolutionSuffix */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXEXPRESSIONSCOPERESOLUTIONSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PostfixExpressionScopeResolutionSuffix */
  try {
/*@egen*/
  "::" PostfixExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void PostfixExpressionArrayIndexSuffix() throws TermWareException : 
{/*@bgen(jjtree) PostfixExpressionArrayIndexSuffix */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXEXPRESSIONARRAYINDEXSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PostfixExpressionArrayIndexSuffix */
  try {
/*@egen*/
  "[" [ Expression()] "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void PostfixExpressionCurlyBracketsSuffix() throws TermWareException : 
{/*@bgen(jjtree) PostfixExpressionCurlyBracketsSuffix */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXEXPRESSIONCURLYBRACKETSSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PostfixExpressionCurlyBracketsSuffix */
  try {
/*@egen*/
  "{" Expression() "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PrimaryExpression() throws TermWareException : 
{/*@bgen(jjtree) PrimaryExpression */
 SimpleNode jjtn000 = new SimpleNode(JJTPRIMARYEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 boolean withRef=false;
}
{/*@bgen(jjtree) PrimaryExpression */
  try {
/*@egen*/
  (
	LOOKAHEAD(2) ["@" {withRef=true;}]  Variable()/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ 
          { if (withRef) { jjtn000.addTerm(createAtom("IgnoreErrors"),0); } }
       |
	["@" { withRef=true;} ] Constant()/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ 
          { if (withRef) { jjtn000.addTerm(createAtom("IgnoreErrors"),0); } }
       |
        LOOKAHEAD(3)
	InBracesExpression()
       |
	ClassInstantiation() 
       |
	Array()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void InBracesExpression() throws TermWareException :
{/*@bgen(jjtree) InBracesExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTINBRACESEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InBracesExpression */
        try {
/*@egen*/
	"(" Expression() ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}


void Array() throws TermWareException : {/*@bgen(jjtree) Array */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Array */
  try {
/*@egen*/
  <ARRAY> "(" [ArrayKeyOrValue()] ( "," ArrayKeyOrValue() )* ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArrayKeyOrValue() throws TermWareException : 
{/*@bgen(jjtree) ArrayKeyOrValue */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYKEYORVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayKeyOrValue */
  try {
/*@egen*/
  Expression() ["=>" Expression() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void ClassInstantiation() throws TermWareException : {/*@bgen(jjtree) ClassInstantiation */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSINSTANTIATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassInstantiation */
  try {
/*@egen*/
  AllocationExpression()
 |
  CloneExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AllocationExpression() throws TermWareException : 
{/*@bgen(jjtree) AllocationExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTALLOCATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tk;
  boolean withArguments=false;
}
{/*@bgen(jjtree) AllocationExpression */
 try {
/*@egen*/
 <NEW>  tk=<IDENTIFIER> 
       [LOOKAHEAD(3) "(" ArgumentExpressionList() ")" { withArguments=true; }]/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/ 
 {
  jjtn000.addTerm(createIdentifier(tk.image),0);
  if (!withArguments) {
    jjtn000.addTerm(createNil(),1);
  }
 }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof TermWareException) {
     throw (TermWareException)jjte000;
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


void CloneExpression() throws TermWareException : {/*@bgen(jjtree) CloneExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCLONEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CloneExpression */
  try {
/*@egen*/
  <CLONE> Variable()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof TermWareException) {
      throw (TermWareException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Variable() throws TermWareException: 
{/*@bgen(jjtree) Variable */
 SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 int nDollars=1;
 Token tk;
}
{/*@bgen(jjtree) Variable */
        try {
/*@egen*/
	<DOLLAR> (<DOLLAR1> { ++nDollars; })* tk=<VAR_NAME>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
         { 
           jjtn000.addTerm(createInt(nDollars),0);
           jjtn000.addTerm(createString(tk.image),1);
         }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void ArgumentExpressionList() throws TermWareException : {/*@bgen(jjtree) ArgumentExpressionList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentExpressionList */
        try {
/*@egen*/
	[Expression()] ( "," Expression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Constant() throws TermWareException: 
{/*@bgen(jjtree) Constant */
 SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk; 
}
{/*@bgen(jjtree) Constant */
   try {
/*@egen*/
   tk=<INTEGER_LITERAL>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/  
                    { jjtn000.addTerm(createInt(tk.image),0); }
  | tk=<FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ 
                    { jjtn000.addTerm(createFloat(tk.image),0); }
  | String() 
  | tk=<PREDEFINED_CONSTANT>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ 
                    { jjtn000.addTerm(createIdentifier(tk.image),0); }
  | tk=<IDENTIFIER>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/
                    { jjtn000.addTerm(createIdentifier(tk.image),0); }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof TermWareException) {
       throw (TermWareException)jjte000;
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void String() throws TermWareException : 
{/*@bgen(jjtree) String */
 SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk1;
 Token tk2;
 String s;
}
{/*@bgen(jjtree) String */
        try {
/*@egen*/
	DoubleStringLiteral() 
      |
	tk1=<SINGLE_STRING_LITERAL_START> tk2=<SINGLE_STRING_LITERAL_END>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/
           {
             s=getSpecialToken(tk2);
             jjtn000.addTerm(createTerm("SingleStringLiteral",
                             tk2.image.substring(0,tk2.image.length()-1)),0);
           }
      |
	<HEREDOC_START>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof TermWareException) {
            throw (TermWareException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DoubleStringLiteral()  throws TermWareException : 
{/*@bgen(jjtree) DoubleStringLiteral */
 SimpleNode jjtn000 = new SimpleNode(JJTDOUBLESTRINGLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tkBegin=null;
 Token tkEnd=null;
 Token tkVBegin=null;
 Token tkVEnd=null;
 Token tkVNo=null;
 int nVars=0;
 List<Term> sterms=new ArrayList<Term>();
}
{/*@bgen(jjtree) DoubleStringLiteral */
   try {
/*@egen*/
   tkBegin=<DOUBLE_STRING_LITERAL_START>
     (
	LOOKAHEAD(2) 
           tkVBegin=<DSL_SIMPLE_VAR_START> tkVEnd=<DSL_SIMPLE_STRING_VAR_END>
           {
            if (tkVBegin.specialToken!=null) {
              String s= getSpecialToken(tkVBegin);
              sterms.add(createTerm("string",s));
            }
           }
        |	
           (
              (
	       	tkVBegin=<DSL_SIMPLE_VAR_START>
	 	(
                  tkVEnd=<DSL_SIMPLE_VAR_END>
	         |			
                  tkVNo=<DSL_SIMPLE_VAR_WASNT>
		)
	       |		
                tkVBegin=<DSL_COMPLEX_VAR_START> 
                            tkVEnd=<DSL_COMPLEX_VAR_END>
              )
              {
                ++nVars;
                if (tkVBegin.specialToken!=null) {
                  String s= getSpecialToken(tkVBegin);
                  sterms.add(createTerm("string",s));
                }
                if (tkVNo==null) {
                 if (tkVBegin.image.endsWith("${")) {
                   if (tkVBegin.image.length() > 2) {
                    String s = tkVBegin.image.substring(0,tkVBegin.image.length()-2);
                    sterms.add(createTerm("string",s));
                   }
                   String varName = tkVEnd.image.substring(0,
                                                 tkVEnd.image.length()-1);
                   Term t = createTerm("var",varName);
                   sterms.add(t);
                 }else{
                  if (tkVBegin.image.length() > 1) {
                    String s = tkVBegin.image.substring(0,tkVBegin.image.length()-1);
                    sterms.add(createTerm("string",s));
                  }
                  Term t = createTerm("var",tkVEnd.image);
                  sterms.add(t);  
                 }
                }else{
                 if (tkVBegin.image.length() > 1) {
                    String s = tkVBegin.image.substring(0,tkVBegin.image.length()-1);
                    sterms.add(createTerm("string",s));
                 }
                 Term t = createTerm("string",tkVNo.image);
                 sterms.add(t);  
                }
               }
	  )* 
          tkEnd=<DOUBLE_STRING_LITERAL_END>
          {
            if (!tkBegin.image.equals("\"")) {
             Term t = createTerm("string",tkBegin.image.substring(1));
             sterms.add(0,t);
            }
            if (!tkEnd.image.equals("\"")) {
             Term t = createTerm("string",
                             tkEnd.image.substring(0,tkEnd.image.length()-1));
             sterms.add(t);
            }
           }
      )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { 
      //System.err.println("addTerm must be called");
      jjtn000.addTerm(adoptList(sterms),0); 
    }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Visibility()  : 
{/*@bgen(jjtree) Visibility */
 SimpleNode jjtn000 = new SimpleNode(JJTVISIBILITY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token tk;
}
{/*@bgen(jjtree) Visibility */
        try {
/*@egen*/
	(tk=<PUBLIC> | tk=<PRIVATE> | tk=<PROTECTED>)/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
         { jjtn000.addTerm(createAtom(tk.image),0); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


