/* Generated By:JJTree&JavaCC: Do not edit this line. JJTDotParser.java */
package ua.gradsoft.parsers.dot.jjt;

import java.io.*;
import ua.gradsoft.termware.*;
import ua.gradsoft.parsers.dot.DotNode;
//import ua.gradsoft.parsers.dot.ParserHelper;

/**
 * Grammar to parse graphwiz dot grammar
 * @author Ruslan Shevchenko  
 */
public class JJTDotParser/*@bgen(jjtree)*/implements JJTDotParserTreeConstants, JJTDotParserConstants {/*@bgen(jjtree)*/
  protected JJTJJTDotParserState jjtree = new JJTJJTDotParserState();
   public  String getInFname()
     { return inFname; }

   public  void   setInFname(String inFname)
     { this.inFname=inFname; }

   private  String inFname="unknown";


   public SimpleNode getRootNode()
   {
     return (SimpleNode)jjtree.rootNode();
   }

  public static void main(String args[]) {
    JJTDotParser parser;
    if (args.length == 0) {
      System.out.println("JJT Dot Parser:  Reading from standard input . . .");
      parser = new JJTDotParser(System.in);
    } else if (args.length == 1) {
      System.out.println("JJT Dot Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new JJTDotParser(new java.io.FileInputStream(args[0]));
        parser.setInFname(args[0]);
      } catch (java.io.FileNotFoundException e) {
        System.out.println("JJT Dot Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("JJT Dot Parser:  Usage is one of:");
      System.out.println("         java JJTDotParser < inputfile");
      System.out.println("OR");
      System.out.println("         java JJTDotParser inputfile");
      return;
    }
    try {
      parser.dotGraph();
      System.out.println("JJT Dot Parser:  Dot program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("JJT Dot Parser:  Encountered errors during parse.");
    }
  }


    private final String getSpecialToken(Token tk)
    {
      String s="";
      while(tk.specialToken != null) {
         s=tk.specialToken.image+s;
         tk=tk.specialToken;
      }
      return s;
    }

    private final void setComment(DotNode node, Token tk)
    {
     if (tk!=null) {
         if (tk.specialToken!=null) {
           String comment=getSpecialToken(tk);
           node.setAttribute("original_comment",comment);
         }
     }
    }


  Term cons(Term x1,Term x2)
  {
   try {
    return TermWare.getInstance().getTermFactory().createTerm("cons",x1,x2);
   }catch(TermWareException ex){
     throw new TermWareRuntimeException(ex);
   }
  }

  Term createAtom(String name)
  {
   return TermWare.getInstance().getTermFactory().createAtom(name);
  }

  Term createNil()
  {
   return TermWare.getInstance().getTermFactory().createNil();
  }

  Term createInt(int x)
  {
   return TermWare.getInstance().getTermFactory().createInt(x);
  }

  Term createChar(char x)
  {
   return TermWare.getInstance().getTermFactory().createChar(x);
  }



  Term createString(String x)
  {
   return TermWare.getInstance().getTermFactory().createString(x);
  }

  Term createIntegerOrLong(String x) throws ParseException
  {
   try {
     Term retval=null;
     if (x.endsWith("L")||x.endsWith("l")) {
         try {
           retval=TermWare.getInstance().getTermFactory().createLong(Long.decode(x.substring(0, x.length()-1)));
         }catch(NumberFormatException ex){
           // it can be just too big, becouse literals can be unsigned, while decode does not handle unsogned,
           //  bigger then MAX
           // Here we will handle one case, which exists in JDK sources. (java/lang/Long.java)
           if (x.length()>2) {
             char last=x.charAt(x.length()-2);
             long l = Long.decode(x.substring(0,x.length()-2));
             char x0 = x.charAt(0);
             char x1 = x.charAt(1);
             if (x0=='0') {
               if (x1=='x'||x1=='X') {
                 // hex
                 int l1=Character.digit(last,16);
                 l=((l<<8)+l1);
               }else{
                 // oct
                 int l1=Character.digit(last,8);
                 l=((l<<4)+l1);
               }
             }
             retval=TermWare.getInstance().getTermFactory().createLong(l);
           }else{
             throw ex;
           }
         }
     }else{
         long l = Long.decode(x);
         retval=TermWare.getInstance().getTermFactory().createInt((int)l);
     }
     return retval;
   }catch(NumberFormatException ex){
      throw new ParseException("Can't read IntegerLiteral "+ex.getMessage()+"(s="+x+") "+" in file "+inFname);
   }
  }

  Term createDoubleOrFloat(String x)
  {
   Term retval=null;
   if (x.endsWith("F")||x.endsWith("f")) {
      retval=TermWare.getInstance().getTermFactory().createFloat(Float.valueOf(x.substring(0, x.length()-1)));
   }else{
      retval=TermWare.getInstance().getTermFactory().createDouble(Double.valueOf(x));
   }
   return retval;
  }

  Term createFloatOrDouble(String x)
  {
   return createDoubleOrFloat(x);
  }

  Term createBoolean(boolean x)
  {
   return TermWare.getInstance().getTermFactory().createBoolean(x);
  }

  Term createTerm(String name,Term x) throws TermWareException
  {
   return TermWare.getInstance().getTermFactory().createTerm(name,x);
  }

  Term createTerm(String name,Term x1, Term x2) throws TermWareException
  {
   return TermWare.getInstance().getTermFactory().createTerm(name,x1,x2);
  }

/*****************************************
 * THE DOT LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public void dotGraph() throws ParseException {
 /*@bgen(jjtree) dotGraph */
  SimpleNode jjtn000 = new SimpleNode(JJTDOTGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tkStrict=null;
  Token tkDigraph=null;
  Token tkGraph=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRICT:
        tkStrict = jj_consume_token(STRICT);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGRAPH:
        tkDigraph = jj_consume_token(DIGRAPH);
        break;
      case GRAPH:
        tkGraph = jj_consume_token(GRAPH);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      id();
      jj_consume_token(LBRACE);
      dotStmtList();
      jj_consume_token(RBRACE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (tkStrict!=null) {
       jjtn000.addTerm(createBoolean(true),0);
    }else{
      jjtn000.addTerm(createBoolean(false),0);
    }
    if (tkDigraph!=null) {
      jjtn000.addTerm(createAtom("digraph"),1);
    }else{
      jjtn000.addTerm(createAtom("graph"),1);
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void dotStmtList() throws ParseException {
 /*@bgen(jjtree) dotStmtList */
 SimpleNode jjtn000 = new SimpleNode(JJTDOTSTMTLIST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      stmt();
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
        jj_consume_token(SEMICOLON);
        stmt();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void stmt() throws ParseException {
 /*@bgen(jjtree) stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
      case NODE:
      case EDGE:
        dotAttrStmt();
        break;
      case SUBGRAPH:
      case LBRACE:
        subgraphOrEdgeSubgraphStmt();
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_2(2147483647)) {
          dotAttributeAssignment();
        } else if (jj_2_3(2)) {
          nodeOrEdgeStmt();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void nodeOrEdgeStmt() throws ParseException {
 /*@bgen(jjtree) nodeOrEdgeStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTNODEOREDGESTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      dotNodeId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case GRAPG_EDGE:
      case DIGRAPG_EDGE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          attrList();
          break;
        case GRAPG_EDGE:
        case DIGRAPG_EDGE:
          edgeStmtTail();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void subgraphOrEdgeSubgraphStmt() throws ParseException {
 /*@bgen(jjtree) subgraphOrEdgeSubgraphStmt */
  SimpleNode jjtn000 = new SimpleNode(JJTSUBGRAPHOREDGESUBGRAPHSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      dotSubgraph();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPG_EDGE:
      case DIGRAPG_EDGE:
        edgeStmtTail();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void dotAttrStmt() throws ParseException {
 /*@bgen(jjtree) dotAttrStmt */
 SimpleNode jjtn000 = new SimpleNode(JJTDOTATTRSTMT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk1=null;
 Token tk2=null;
 Token tk3=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
        tk1 = jj_consume_token(GRAPH);
        break;
      case NODE:
        tk2 = jj_consume_token(NODE);
        break;
      case EDGE:
        tk3 = jj_consume_token(EDGE);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      attrList();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    String kind=null;
    if (tk1!=null) {
       kind="graph";
    }else if(tk2!=null) {
       kind="node";
    }else if(tk3!=null) {
       kind="edge";
    }else{
       {if (true) throw new RuntimeException("impossible");}
    }
    jjtn000.addTerm(createAtom(kind),0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void attrList() throws ParseException {
 /*@bgen(jjtree) attrList */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        jj_consume_token(LBRACKET);
        attrAssignmentsList();
        jj_consume_token(RBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_2;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void attrAssignmentsList() throws ParseException {
 /*@bgen(jjtree) attrAssignmentsList */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRASSIGNMENTSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case IDENTIFIER:
        dotAttributeAssignment();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_3;
          }
          jj_consume_token(COMMA);
          dotAttributeAssignment();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void dotAttributeAssignment() throws ParseException {
 /*@bgen(jjtree) dotAttributeAssignment */
 SimpleNode jjtn000 = new SimpleNode(JJTDOTATTRIBUTEASSIGNMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tkli = null;
 Token tklf = null;
    try {
      id();
      jj_consume_token(EQ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case IDENTIFIER:
        id();
        break;
      case INTEGER_LITERAL:
        tkli = jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        tklf = jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      case LBRACEBRACE:
        dotCompoundRecord();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (tkli!=null) {
      jjtn000.addTerm(createIntegerOrLong(tkli.image),1);
    }else if (tklf!=null) {
      jjtn000.addTerm(createFloatOrDouble(tklf.image),1);
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void dotNodeId() throws ParseException {
 /*@bgen(jjtree) dotNodeId */
  SimpleNode jjtn000 = new SimpleNode(JJTDOTNODEID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      id();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
      case 45:
        port();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void port() throws ParseException {
 /*@bgen(jjtree) port */
 SimpleNode jjtn000 = new SimpleNode(JJTPORT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);boolean l = false;
 boolean la = false;
 boolean a = false;
 boolean al = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        portLocation();
                     l=true; la=true;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT:
          portAngle();
                   a=true;
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        break;
      case AT:
        portAngle();
                 a=true; al=true;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 45:
          portLocation();
                       l=true;
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   if (la) {
     if (!a) {
       jjtn000.addTerm(createNil(),1);
     }
   }else if(al){
     if (l) {
       Term tl = jjtn000.getSubtermAt(1);
       Term ta = jjtn000.getSubtermAt(0);
       jjtn000.setSubtermAt(0,tl);
       jjtn000.setSubtermAt(1,ta);
     }else{
       jjtn000.addTerm(createNil(),0);
     }
   }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void portLocation() throws ParseException {
 /*@bgen(jjtree) portLocation */
  SimpleNode jjtn000 = new SimpleNode(JJTPORTLOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case IDENTIFIER:
        id();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        id();
        jj_consume_token(COMMA);
        id();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void portAngle() throws ParseException {
 /*@bgen(jjtree) portAngle */
  SimpleNode jjtn000 = new SimpleNode(JJTPORTANGLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(AT);
      id();
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void edgeStmtTail() throws ParseException {
 /*@bgen(jjtree) edgeStmtTail */
  SimpleNode jjtn000 = new SimpleNode(JJTEDGESTMTTAIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      edgeRHS();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        attrList();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void id() throws ParseException {
 /*@bgen(jjtree) id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        tk = jj_consume_token(IDENTIFIER);
        break;
      case STRING_LITERAL:
        tk = jj_consume_token(STRING_LITERAL);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
     jjtn000.addTerm(createString(tk.image),0);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void edgeRHS() throws ParseException {
 /*@bgen(jjtree) edgeRHS */
  SimpleNode jjtn000 = new SimpleNode(JJTEDGERHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      edgeOp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case IDENTIFIER:
        dotNodeId();
        break;
      case SUBGRAPH:
      case LBRACE:
        dotSubgraph();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPG_EDGE:
      case DIGRAPG_EDGE:
        edgeRHS();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void edgeOp() throws ParseException {
 /*@bgen(jjtree) edgeOp */
  SimpleNode jjtn000 = new SimpleNode(JJTEDGEOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGRAPG_EDGE:
        jj_consume_token(DIGRAPG_EDGE);
        break;
      case GRAPG_EDGE:
        jj_consume_token(GRAPG_EDGE);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void dotSubgraph() throws ParseException {
 /*@bgen(jjtree) dotSubgraph */
  SimpleNode jjtn000 = new SimpleNode(JJTDOTSUBGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUBGRAPH:
        jj_consume_token(SUBGRAPH);
        id();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          jj_consume_token(LBRACE);
          dotStmtList();
          jj_consume_token(RBRACE);
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        break;
      case LBRACE:
        jj_consume_token(LBRACE);
        dotStmtList();
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void dotCompoundRecord() throws ParseException {
 /*@bgen(jjtree) dotCompoundRecord */
  SimpleNode jjtn000 = new SimpleNode(JJTDOTCOMPOUNDRECORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACEBRACE);
      dotRecord();
      jj_consume_token(RBRACEBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void dotRecord() throws ParseException {
 /*@bgen(jjtree) dotRecord */
  SimpleNode jjtn000 = new SimpleNode(JJTDOTRECORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      dotRecordElement();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 46:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_4;
        }
        jj_consume_token(46);
        dotRecordElement();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void dotRecordElement() throws ParseException {
 /*@bgen(jjtree) dotRecordElement */
 SimpleNode jjtn000 = new SimpleNode(JJTDOTRECORDELEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token tk;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        tk = jj_consume_token(STRING_LITERAL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.addTerm(createString(tk.image),0);
        break;
      case LBRACE:
        dotRecordV();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void dotRecordV() throws ParseException {
 /*@bgen(jjtree) dotRecordV */
  SimpleNode jjtn000 = new SimpleNode(JJTDOTRECORDV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      dotRecord();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(AT)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_3R_6()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(SUBGRAPH)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(45)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_6()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_3R_11()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    if (jj_3R_27()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_22()) return true;
    return false;
  }

  public JJTDotParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x8000,0x6000,0x0,0x72000,0x0,0x0,0x0,0x62000,0x0,0x0,0xc000000,0xc880000,0x0,0x0,0x0,0x0,0x4c000000,0x0,0xc000000,0xc010000,0x0,0x0,0x0,0x10000,0x0,0x4000000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x40,0x1,0x1810,0x1810,0x1800,0x0,0x10,0x80,0x0,0x4,0x2200,0x200,0x2000,0x2200,0x0,0x10,0x0,0x1,0x1800,0x1800,0x1,0x1,0x4000,0x1,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public JJTDotParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public JJTDotParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JJTDotParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JJTDotParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JJTDotParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public JJTDotParser(JJTDotParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(JJTDotParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[47];
    for (int i = 0; i < 47; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
