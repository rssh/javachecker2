options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC = false;
  BUILD_NODE_FILES = false;
  NODE_EXTENDS = "ua.gradsoft.parsers.dot.DotNode";
//  DEBUG_PARSER = true;
//  NODE_SCOPE_HOOK = true;
//  MULTI = true;
}

PARSER_BEGIN(JJTDotParser)

package ua.gradsoft.parsers.dot.jjt;

import java.io.*;
import ua.gradsoft.termware.*;
import ua.gradsoft.parsers.dot.DotNode;
//import ua.gradsoft.parsers.dot.ParserHelper;

/**
 * Grammar to parse graphwiz dot grammar
 * @author Ruslan Shevchenko  
 */
public class JJTDotParser
{

   public  String getInFname()
     { return inFname; }

   public  void   setInFname(String inFname)
     { this.inFname=inFname; }
  
   private  String inFname="unknown";


   public SimpleNode getRootNode()
   {
     return (SimpleNode)jjtree.rootNode();
   }

  public static void main(String args[]) {
    JJTDotParser parser;
    if (args.length == 0) {
      System.out.println("JJT Dot Parser:  Reading from standard input . . .");
      parser = new JJTDotParser(System.in);
    } else if (args.length == 1) {
      System.out.println("JJT Dot Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new JJTDotParser(new java.io.FileInputStream(args[0]));
        parser.setInFname(args[0]);
      } catch (java.io.FileNotFoundException e) {
        System.out.println("JJT Dot Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("JJT Dot Parser:  Usage is one of:");
      System.out.println("         java JJTDotParser < inputfile");
      System.out.println("OR");
      System.out.println("         java JJTDotParser inputfile");
      return;
    }
    try {
      parser.dotGraph();
      System.out.println("JJT Dot Parser:  Dot program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("JJT Dot Parser:  Encountered errors during parse.");
    }
  }


    private final String getSpecialToken(Token tk)
    {
      String s="";
      while(tk.specialToken != null) {
         s=tk.specialToken.image+s;
         tk=tk.specialToken;
      }
      return s;
    }

    private final void setComment(DotNode node, Token tk) 
    {
     if (tk!=null) {
         if (tk.specialToken!=null) {
           String comment=getSpecialToken(tk);                
           node.setAttribute("original_comment",comment);
         }
     }
    }


  Term cons(Term x1,Term x2) 
  {
   try {
    return TermWare.getInstance().getTermFactory().createTerm("cons",x1,x2);
   }catch(TermWareException ex){
     throw new TermWareRuntimeException(ex);
   }
  }

  Term createAtom(String name)
  {
   return TermWare.getInstance().getTermFactory().createAtom(name);
  }

  Term createNil()
  {
   return TermWare.getInstance().getTermFactory().createNil();
  }

  Term createInt(int x)
  {
   return TermWare.getInstance().getTermFactory().createInt(x);
  }

  Term createChar(char x)
  {
   return TermWare.getInstance().getTermFactory().createChar(x);
  }



  Term createString(String x)
  {
   return TermWare.getInstance().getTermFactory().createString(x);
  }

  Term createIntegerOrLong(String x) throws ParseException
  {
   try {
     Term retval=null;
     if (x.endsWith("L")||x.endsWith("l")) {
         try {
           retval=TermWare.getInstance().getTermFactory().createLong(Long.decode(x.substring(0, x.length()-1)));
         }catch(NumberFormatException ex){
           // it can be just too big, becouse literals can be unsigned, while decode does not handle unsogned,
           //  bigger then MAX
           // Here we will handle one case, which exists in JDK sources. (java/lang/Long.java)
           if (x.length()>2) {
             char last=x.charAt(x.length()-2);
             long l = Long.decode(x.substring(0,x.length()-2));
             char x0 = x.charAt(0);
             char x1 = x.charAt(1);
             if (x0=='0') {
               if (x1=='x'||x1=='X') {
                 // hex
                 int l1=Character.digit(last,16);
                 l=((l<<8)+l1);
               }else{
                 // oct
                 int l1=Character.digit(last,8);
                 l=((l<<4)+l1);
               }
             }
             retval=TermWare.getInstance().getTermFactory().createLong(l);
           }else{
             throw ex;
           }
         }
     }else{            
         long l = Long.decode(x);
         retval=TermWare.getInstance().getTermFactory().createInt((int)l);
     }
     return retval;
   }catch(NumberFormatException ex){
      throw new ParseException("Can't read IntegerLiteral "+ex.getMessage()+"(s="+x+") "+" in file "+inFname);
   }
  }

  Term createDoubleOrFloat(String x)
  {
   Term retval=null;
   if (x.endsWith("F")||x.endsWith("f")) {
      retval=TermWare.getInstance().getTermFactory().createFloat(Float.valueOf(x.substring(0, x.length()-1)));
   }else{
      retval=TermWare.getInstance().getTermFactory().createDouble(Double.valueOf(x));
   }
   return retval;
  }

  Term createFloatOrDouble(String x)
  {
   return createDoubleOrFloat(x);
  }

  Term createBoolean(boolean x)
  {
   return TermWare.getInstance().getTermFactory().createBoolean(x);
  }

  Term createTerm(String name,Term x) throws TermWareException
  {
   return TermWare.getInstance().getTermFactory().createTerm(name,x);
  }

  Term createTerm(String name,Term x1, Term x2) throws TermWareException
  {
   return TermWare.getInstance().getTermFactory().createTerm(name,x1,x2);
  }

}

PARSER_END(JJTDotParser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < GRAPH: "graph" >
| < DIGRAPH: "digraph" >
| < STRICT: "strict" >
| < SUBGRAPH: "subgraph" >
| < NODE: "node" >
| < EDGE: "edge" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
      <HEX_LITERAL> "." (["0"-"9","a"-"f","A"-"F"])* (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["p","P"])? (["+","-"])? (["0"-"9"])+ 
              | ["p","P"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACEBRACE: "{{" >
| < RBRACEBRACE: "}}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
| < EQ: "=" >
| < GRAPG_EDGE:"--" >
| < DIGRAPG_EDGE:"->" >
}


/*****************************************
 * THE DOT LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

void dotGraph() :
{
  Token tkStrict=null;
  Token tkDigraph=null;
  Token tkGraph=null;
}
{
  [ tkStrict="strict" ]  ( tkDigraph="digraph" | tkGraph="graph" ) id() "{" dotStmtList() "}"
  {
    if (tkStrict!=null) {
       jjtThis.addTerm(createBoolean(true),0);
    }else{
      jjtThis.addTerm(createBoolean(false),0);
    }
    if (tkDigraph!=null) {
      jjtThis.addTerm(createAtom("digraph"),1);
    }else{
      jjtThis.addTerm(createAtom("graph"),1);
    }
  }
}

void dotStmtList():
{
 Token tk;
}
{
  stmt() (LOOKAHEAD(2) ";" stmt() )* [ ";" ]
}


void stmt():
{
}
{
  dotAttrStmt() 
  | 
   subgraphOrEdgeSubgraphStmt() 
  | 
   LOOKAHEAD(id() "=")
   dotAttributeAssignment()
  |
   LOOKAHEAD(2)
   nodeOrEdgeStmt() 
}

void nodeOrEdgeStmt():
{
}
{
  dotNodeId() [ attrList() | edgeStmtTail() ]
}


void subgraphOrEdgeSubgraphStmt():
{
}
{
  dotSubgraph() [ edgeStmtTail() ]
}

void dotAttrStmt():
{
 Token tk1=null;
 Token tk2=null;
 Token tk3=null;
}
{
  (tk1="graph"|tk2="node"|tk3="edge") attrList()
  {
    String kind=null;
    if (tk1!=null) {
       kind="graph";
    }else if(tk2!=null) {
       kind="node";
    }else if(tk3!=null) {
       kind="edge";
    }else{
       throw new RuntimeException("impossible");
    }
    jjtThis.addTerm(createAtom(kind),0);
  }
}

void attrList():
{
}
{
  ( "[" attrAssignmentsList() "]")+
}

void attrAssignmentsList():
{
}
{
  [ dotAttributeAssignment() ( "," dotAttributeAssignment() )* ]
}

void dotAttributeAssignment():
{
 Token tkli = null;
 Token tklf = null;
}
{
  id() "=" ( id() | tkli=<INTEGER_LITERAL> | tklf=<FLOATING_POINT_LITERAL> | dotCompoundRecord())
  {
    if (tkli!=null) {
      jjtThis.addTerm(createIntegerOrLong(tkli.image),1);
    }else if (tklf!=null) {
      jjtThis.addTerm(createFloatOrDouble(tklf.image),1);
    }
  }
}


void dotNodeId():
{
}
{
  id() [ port() ]
}

void port():
{
 boolean l = false;
 boolean la = false;
 boolean a = false;
 boolean al = false;
}
{
 (
  (
    portLocation() { l=true; la=true; }
    [ portAngle() {a=true;} ] 
  ) 
   | 
  (portAngle() { a=true; al=true; }
    [ portLocation() { l=true; } ]
  )
 )
 {
   if (la) {
     if (!a) {
       jjtThis.addTerm(createNil(),1);
     }
   }else if(al){
     if (l) {
       Term tl = jjtThis.getSubtermAt(1);
       Term ta = jjtThis.getSubtermAt(0);
       jjtThis.setSubtermAt(0,tl);
       jjtThis.setSubtermAt(1,ta);
     }else{
       jjtThis.addTerm(createNil(),0);
     }
   }
 }
}

void portLocation():
{
}
{
 ":" ( id() | "(" id() "," id() ")" )
}

void portAngle():
{
}
{
 "@" id()
}

void edgeStmtTail():
{
}
{
   edgeRHS() [ attrList() ]
}



void id() :
{
  Token tk=null;
}
{
  (tk=<IDENTIFIER>| tk=<STRING_LITERAL> )
  {    
     jjtThis.addTerm(createString(tk.image),0);    
  }
}


void edgeRHS() :
{
}
{
  edgeOp() ( dotNodeId() | dotSubgraph()) [ edgeRHS() ]
}


void edgeOp() :
{
}
{
 "->"|"--"
}

void dotSubgraph() :
{
}
{
  "subgraph" id() [ "{" dotStmtList() "}" ]
 |
  "{" dotStmtList() "}" 
}

void dotCompoundRecord():
{
}
{
  "{{" dotRecord()  "}}"  
}

void dotRecord():
{
}
{
  dotRecordElement() ( "|" dotRecordElement() )*
}

void dotRecordElement():
{
 Token tk;
}
{
  tk=<STRING_LITERAL>
    { jjtThis.addTerm(createString(tk.image),0); }
  |
  dotRecordV()
}

void dotRecordV():
{
}
{
  "{" dotRecord() "}"
}

