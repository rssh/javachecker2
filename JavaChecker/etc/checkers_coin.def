Checkers(
[
 define(StringInSwitch,coin,"string in switch",
        BT_TYPE_RULESET,
        ruleset(
          IfStatement(MethodCall($x,Identifier("equals"),
                                   Arguments([StringLiteral($y)])),
                      $block1,
           IfStatement(MethodCall($x,Identifier("equals"),
                                   Arguments([StringLiteral($z)])),
                      $block2,
                      $block3
                      ))
              -> true [ violationDiscovered(StringInSwitch,"string in switch",
                        x($block1,$block2,$block3)) ],

        # also String literals can be first in if-s
          IfStatement(MethodCall(StringLiteral($l1),Identifier("equals"),
                                                     Arguments([$x])),
                      $block1,
          IfStatement(MethodCall(StringLiteral($l2),Identifier("equals"),
                                                     Arguments([$x])),
                      $block2,
                      $block3
                     ))
              -> true [ violationDiscovered(StringInSwitch,"string in switch",
                        x($block1,$block2,$block3)) ]
        ),
        false
  ),
 
 #@Show(false)
 define(AllIfs,coin,"all ifs",
        BT_TYPE_RULESET,
        ruleset(
          IfStatement($x,$y,$z)
                -> true [ violationDiscovered(AllIfs, "all ifs",$x) ]
         ),
         false
 ),

 #@Show(false)
 define(AllCEs,coin,"all conditional expressions",
        BT_TYPE_RULESET,
        ruleset(
          ConditionalExpression($x,$y,$z)
             -> true [ violationDiscovered(AllCEs, "condition expression",
                          s($x,$y,$z)) ],
          $x [ x!=true ] -> true
         ),
         false
 ),
 
 

 define(InstanceOfSwitch,coin,"instanceof switch",
        FT_TYPE_RULESET,
        ruleset(
          IfStatement(InstanceOfExpression($x,$c1),
           $block1,
           IfStatement(InstanceOfExpression($x,$c2),
            $blok2,
            $block3
          ))
           -> true [ violationDiscovered(InstanceOfSwitch,
                         "instanceof switch",$block1) ]
         ),
         false
 ),

 #@Show(false)
 define(ByteLiteral,coin,"byte literal",
        FT_TYPE_RULESET,
        ruleset(
         CastExpression(byte,IntegerLiteral($x)) -> true
                    [ violationDiscovered(ByteLiteral, "byte literal", $x) ],
         CastExpression(byte,CharacterLiteral($x)) -> true
                     [ violationDiscovered(ByteLiteral, "byte literal", $x) ]
        ),false),

 #@Show(false)
 define(AllIntegerLiteral,coin,"all integer literals",
        FT_TYPE_RULESET,
        ruleset(
         IntegerLiteral($x) -> true
         [ violationDiscovered(AllIntegerLiteral, "all integer literals", $x) ]
        ),false),

 #@Show(false)
 define(BigIntegerLiteral,coin,"big integer literals(undescores)",
        FT_TYPE_RULESET,
        ruleset(
         IntegerLiteral($x) 
           [ ($x > 100000) || ($x < -100000) ] -> true
                              [ violationDiscovered(BigIntegerLiteral, 
                                     "big integer literals(undescores)", $x) ]
                              !-> false
        ),false),


 define(MultiCatch,coin,"multi catch",
        FT_TYPE_RULESET,
        ruleset(
         cons(Catch($fp1,$block),cons(Catch($fp2,$block),$z)) -> true
                    [ violationDiscovered(MultiCatch, "multi catch", $fp1) ]
        ),false),

 #@Show(false)
 define(AllCatchs,coin,"all catchs",
        FT_TYPE_RULESET,
        ruleset(
         cons(Catch($fp1,$block),$x) -> true
                    [ violationDiscovered(AllCatchs, "all catchs", $fp1) ]
        ),false),

 define(CatchInFinally,coin,"catch in finally",
        BT_TYPE_RULESET,
        ruleset(
         import(general,apply),
         TryStatement($block1,$catchs,$finally) -> FindCatch($finally),
         FindCatch($block) -> 
           CHECK(FindSubterm.find(Catch($a,$b),$block),$block),
         CHECK(false,$block) -> false,
         CHECK(true,$block) -> true
                    [  violationDiscovered(CatchInFinally,"catch in finally",
                                           $block) ]
        ),false),

 define(LoopWithRemove,coin,"loop with remove",
        BT_TYPE_RULESET,
        ruleset(
         import(general,apply),
         WhileStatement(
           MethodCall($x,Identifier("hasNext"),Arguments([])),
           $block
         ) -> FindRemove($x,$block) ,

         ForStatement(
            TraditionalForLoopHead($forinit, 
               MethodCall($x,Identifier("hasNext"),Arguments([])),
               NIL
            ), $block) -> FindRemove($x,$block), 

         FindRemove($x,$block) -> 
           CHECK(FindSubterm.find(
                   MethodCall($x,Identifier("remove"),Arguments([])),
                   $block),$block),
                       
           CHECK(false,$block) -> false,
           CHECK(true,$block) -> true
                    [  violationDiscovered(LoopWithRemove,"loop with remove",
                                           $block) ],

            p($x) -> $x [ println($x) ]

        ),false),



 define(ObjectSwitch,coin,"object switch",
        FT_TYPE_RULESET,
        ruleset(
          IfStatement(InstanceOfExpression($x,$c1),
           $block1,
           IfStatement(InstanceOfExpression($x,$c2),
            $blok2,
            $block3
          ))
           -> true [ violationDiscovered(ObjectSwitch,
                         "object switch",$block1) ],
          IfStatement(EqualityExpression($x,$op1,$c1),
           $block1,
           IfStatement(EqualityExpression($x,$op1,$c2),
            $blok2,
            $block3
          ))
           -> true [ violationDiscovered(ObjectSwitch,
                         "object switch",$block1) ],
          IfStatement(MethodCall($x,$method1,$args1),
           $block1,
           IfStatement(MethodCall($x,$method2,$args2),
            $blok2,
            $block3
          ))
           -> true [ violationDiscovered(ObjectSwitch,
                         "object switch",$block1) ]
         ),
         false
 ),

 define(RethrowClause,coin,"rethrow clause",
        FT_TYPE_RULESET,
        ruleset(
         Catch($fp1,Block([ThrowStatement($x)])) -> true
                 [ violationDiscovered(RethrowClause, "rethrow clause", $fp1) ]
        ),false),

 #@Show(false) 
 define(WideningSemantics,coin,"widening operator (semantics)",
        MODEL_RULESET,
        ruleset(
         import(general,apply),
         import(List,car),
         import(List,cdr),
         AndExpressionModel($x,IntegerLiteral(255),$ctx)
             [ $ctx.sameTypes(
               car($ctx.getExpressionModel().getSubExpressions()).getType(),
               $ctx.resolveTypeTerm(byte)) ]  -> true
            [ violationDiscovered(WideningSemantics, 
                              "widening operator (semantics)", $x) ]
                                              !-> false,
         AndExpressionModel(IntegerLiteral(255),$x,$ctx)
            [ $ctx.sameTypes(
                car(cdr($ctx.getExpressionModel().getSubExpressions()))
                                                                  .getType(),
                $ctx.resolveTypeTerm(byte)) ]  -> true
              [ violationDiscovered(WideningSemantics, 
                              "widening operator (semantics)", $x) ]
                                              !-> false
        ),false),


 define(AllBitAnds,coin,"all bit ands",
        BT_TYPE_RULESET,
        ruleset(
         AndExpression($x,$y) -> true 
              [ violationDiscovered(AllBitAnds, "all bit ands", A($x,$y)) ]
        ),false),

 define(ForsWithNext,coin,"for with limit like it.next()",
        BT_TYPE_RULESET,
        ruleset(
         ForStatement(
            TraditionalForLoopHead($forinit, 
               MethodCall($x,Identifier("hasNext"),Arguments([])),
               NIL
            ), $block) -> true
              [ violationDiscovered(ForsWithNext, 
                        "for loop, limited by it.next", A($x,$block)) ]
        ),false),
       
 define(AllTraditionalFors,coin,"all traditional fors",
        FT_TYPE_RULESET,
        ruleset(
         ForStatement(
            TraditionalForLoopHead($x, $y, $z),
            $block   )              ->  $block
              [ violationDiscovered(AllTraditionalFors, 
                                    "traditional for", A($x,$y,$z)) ]
        ),false),

 define(ForAroundSizeOrLength,coin,"for loop from 0 to size or length",
        FT_TYPE_RULESET,
        ruleset(
          
         # let LengthOrSize will be uniform 
         Name([$x,Identifier("length")]) -> LengthOrSize($x),
         FieldAccess([$x,Identifier("length")]) -> LengthOrSize($x),
         MethodCall($x,Identifier("size"),Arguments([])) -> LengthOrSize($x),

         # also PreIncrement and PostIncrement are same in ForUpdate statements
         StatementExpression(PreIncrementExpression($x)) -> Increment($x),
         StatementExpression($x,"++") -> Increment($x),

         ForInit(LocalVariableDeclaration($im,int,
                    [VariableDeclarator(
                       VariableDeclaratorId($index,0),
                        IntegerLiteral(0)
                     )]
                 )) -> ZeroForInit($index),

         ForInit(StatementExpressionList([
              StatementExpression($index,"=",IntegerLiteral(0))
                ])) -> ZeroForInit($index),


         ForStatement(
            TraditionalForLoopHead(
               ZeroForInit($index),
               RelationalExpression($index,"<",LengthOrSize($x)), 
               ForUpdate(StatementExpressionList(
                [Increment($index)]
               ))),
            $block   )              -> $block 
              [ violationDiscovered(ForAroundSizeOrLength, 
                          "for loop from 0 to size or length()",
                          s($index,$block)) ]

        ),false),

 define(StringBuilderOrBufferAppend,coin,
        "simplicified StringBuilder/Buffer syntax",
        MODEL_RULESET,
        ruleset(
          import(general,apply),
          MethodCallModel($obj,Identifier("append"),$arguments,$mm,$ctx)
             [ 
              $ctx.subtypeOrSame(
               $mm.getTypeModel(),
               $ctx.resolveFullClassName("java.lang.StringBuilder")
              )
             ] -> true
              [ violationDiscovered(StringBuilderOrBufferAppend, 
                               "call of StringBuilder.append",
                                s($obj,$arguments,$ctx)) ]
            |
             [
              $ctx.subtypeOrSame(
               $mm.getTypeModel(),
               $ctx.resolveFullClassName("java.lang.StringBuffer")
              )
             ] -> true
              [ violationDiscovered(StringBuilderOrBufferAppend, 
                               "call of StringBuffer.append",
                                s($obj,$arguments,$ctx)) ]
             !-> false
        ),false),

 define(CollectionGetOrSet,coin,
        "simplicified collection element access",
        MODEL_RULESET,
        ruleset(
          MethodCallModel($obj,Identifier("get"),$arguments,$mm,$ctx)
             [ 
              $ctx.subtypeOrSame(
                $mm.getTypeModel(),
                $ctx.resolveFullClassName("java.util.Collection")
              )
             ] -> true
              [ violationDiscovered(CollectionGetOrSet, 
                                  "call of Collection.get",
                                s($obj,$arguments,$ctx)) ]
             !-> false,

          MethodCallModel($obj,Identifier("set"),$arguments,$mm,$ctx)
             [ 
              $ctx.subtypeOrSame(
                $mm.getTypeModel(),
                $ctx.resolveFullClassName("java.util.List")
              )
             ] -> true
              [ violationDiscovered(CollectionGetOrSet, 
                                    "call of List.set",
                                    s($obj,$arguments,$ctx)) ]
             !-> false,

          MethodCallModel($obj,Identifier("put"),$arguments,$mm,$ctx)
             [ 
              $ctx.subtypeOrSame(
                $mm.getTypeModel(),
                $ctx.resolveFullClassName("java.util.Map")
              )
             ] -> true
              [ violationDiscovered(CollectionGetOrSet, 
                                    "call of Map.put",
                                    s($obj,$arguments,$ctx)) ]
             !-> false

        ),false),

 #@Show(false)
 define(AllVariableInitializers,coin,"all variable initializers",
        FT_TYPE_RULESET,
        ruleset(
          VariableDeclarator($x) -> false,
          VariableDeclarator($x,$y) -> true
              [ violationDiscovered(AllVariableInitializers, 
                                    "variable with initializer",
                                    s($x,$y)) ]
        ),false),

 #@Show(false)
 define(AutoInitializers,coin,
        "initializers with type arguments or long type names",
        FT_TYPE_RULESET,
        ruleset(
          import(general,logical_or),

          LocalVariableDeclaration($modifiers, $type, NIL) -> false,

          LocalVariableDeclaration($modifiers, $type, 
                 cons( VariableDeclarator($name,$expr),$rest)) -> 
                           DCL($type,$name,$expr,
                               LocalVariableDeclaration($modifiers, 
                                                       $type, $rest)),

          LocalVariableDeclaration($x,$y,$z) -> false,

          DCL(ClassOrInterfaceType($x),$name,$expr,$w) -> 
                                            DCL_CL($x,$name,$expr,$w),

          DCL(Identifier($x),$name,$expr,$w) -> DCL_CL([Identifier($x)],
                                                            $name,$expr,$w),

          DCL($x,$y,$z,$w) -> false,

          DCL_CL([$x,TypeArguments($y)],$name,$expr,$w) -> $w
              [ violationDiscovered(AutoInitializers, 
                                  "declaration with type arguments",
                                  s($x,$y,$name,$expr)) ],
          
          DCL_CL(cons(Identifier($t),$y),$name,$expr,$w) 
              [ String.length($t) > 6 ] -> $w
                    [ violationDiscovered(AutoInitializers, 
                                  "declaration with long name",
                                   s($t,$y,$name,$expr)) ]
               !-> DCL_CL($y,$name,$expr,$w),

          DCL_CL(NIL,$name,$expr,$w) -> $w,
          DCL_CL($x,$y,$z,$w) -> $w,

          FieldDeclaration($type,
                 cons( VariableDeclarator($name,$expr),$rest)) -> 
                           DCL($type,$name,$expr,
                               FieldDeclaration($type,$rest)),

          FieldDeclaration($type, [] ) -> false,

          FieldDeclaration($x,$y) -> false,

          p($x) -> $x [ println($x) ]

        ),false),

 define(DiamondInitializers,coin,
         "initializers with allocation and type arguments",
        FT_TYPE_RULESET,
        ruleset(
          LocalVariableDeclaration($modifiers, $type, NIL) -> false,

          LocalVariableDeclaration($modifiers, $type, 
                 cons( VariableDeclarator($name,$expr),$rest)) -> 
                        DCL($type,$name,$expr,
                            LocalVariableDeclaration($modifiers, $type, $rest)
                           ),

          LocalVariableDeclaration($modifiers, $type, 
                 cons( VariableDeclarator($name),$rest)) -> 
                          LocalVariableDeclaration($modifiers, $type, $rest),

          FieldDeclaration($type,
                 cons(VariableDeclarator($name,$expr),$rest))
                          ->    DCL($type,$name,$expr,
                                       FieldDeclaration($type,$rest)) ,

          FieldDeclaration($type,
                 cons(VariableDeclarator($name),$rest))
                          ->    FieldDeclaration($type,$rest) ,

          FieldDeclaration($type, []) -> false,

          FieldDeclaration($x,$y) -> false,

          DCL($x,$name,AllocationExpression($type,$ta,$arr,$abody),$w) 
                    -> 
                       CHECK_TA($type,$x,$name,$w),

           DCL($type,$name,$expr,$w) -> $w,

           CHECK_TA(ClassOrInterfaceType($x),$y,$name,$w)
                                        -> CHECK_TA($x,$y,$name,$w),

           CHECK_TA(cons($x,$y),$z,$name,$w) -> CHECK_TA($x,$z,$name,
                                                  CHECK_TA($y,$z,$name,$w)),

           CHECK_TA(TypeArguments($x),$z,$name,$w) -> $w
                    [ violationDiscovered(DiamondInitializers, 
                                  "allocation expression with type arguments",
                                   s($x,$z,$name)) ],

          CHECK_TA($x,$y,$z,$w) -> $w,

          p($x) -> $x [ println($x) ]


        ),false),

 #@Show(false)
 define(AllForEachLoops,coin,"all foreach loops",
        FT_TYPE_RULESET,
        ruleset(
           ForEachLoopHead($x,$y,$z) -> true
                    [ violationDiscovered(AllForEachLoops, 
                                "foreach loop", s($x,$y,$z)) ]
        )
       ,false),
 

 calculate(PercentageOfUnconvertedLoops,"coin",
        "percentage for converted loops",
              (
               1.0 - AllForEachLoops/(AllForEachLoops+
                           ForAroundSizeConvertable+
                           ForAroundLengthConvertable)
              )*100
 ,false),

 define(CollectionLiterals,"coin",
        "collection literals can be applied",
        MODEL_RULESET,
        ruleset(
          import(general,logical_and),
          import(general,apply),
          MethodCallModel($obj,Identifier("asList"),$arguments,$mm,$ctx)
              -> CHECK(is_constants($arguments),asList,s($obj,$arguments,$ctx)),

          is_constants([]) -> true,
          is_constants(cons($x,$y)) -> is_constants($x) && is_constants($y),
          is_constants($x) -> ModelHelper.isConstant($x),

          CHECK(true,asList,$x) -> true
                    [ violationDiscovered(CollectionLiterals, 
                              "possible list initializer", $x) ],

          [StatementExpressionStatement(
            MethodCallModel($obj,Identifier("put"),
                                     [$a11,$a12],$mm,$ctx),$sctx)
           :
           [StatementExpressionStatement(
            MethodCallModel($obj,Identifier("put"),
                                     [$a21,$a22],$mm1,$ctx1),$sctx1)
           :$rest]
          ]  -> CHECK(is_constants([$a11,$a12,$a21,$a22]),asMap,
                                         s($obj,$a11,$a12,$a21,$a22,$ctx)),


          CHECK(true,asMap,$x) -> true
                    [ violationDiscovered(CollectionLiterals, 
                                              "map initializer", $x) ],

          [StatementExpressionStatement(
            MethodCallModel($obj,Identifier("add"),[$a],$mm,$ctx),$sctx)
           :
           [StatementExpressionStatement(
             MethodCallModel($obj1,Identifier("add"),[$a1],$mm1,$ctx1),$sctx1)
           :$rest]
          ]  -> CHECK(is_constants([$a,$a1]),asSetOrList,
                                         s($obj,$a,$a1,$ctx)),

           StatementExpressionStatement($x) -> false,
                                        
          CHECK(true,asSetOrList,$x) -> true
                    [ violationDiscovered(CollectionLiterals, 
                                            "set or list initializer", $x) ],

                
          CHECK(false,$x,$y) -> false

        ),false),

        calculate(NewIntegerLiterals,coin,"New Integer Literals",
                   ByteLiteral+WideningSemantics+BigIntegerLiteral,
                   false),

        calculate(NewIntegerLiterals_percents,"coin", "per all integer literal",
                   (NewIntegerLiterals/AllIntegerLiteral)*100,
                   false),

        calculate(Elvis,"coin", "Elvis and Other Null-Safe Operators",
                    Elvis1+NullSafe,
                    false),
 
        calculate(Elvis_percents,"coin", "per if-s and conditions",
                    Elvis/(AllIfs+AllCEs)*100,
                    false),

        calculate(DiamondInitializers_percents,"coin",
                  "per all variable initializers",
                  (DiamondInitializers/AllVariableInitializers)*100,
                  false),

        calculate(MultiCatch_percents,"coin",
                  "per all catchs",
                  (MultiCatch/AllCatchs)*100,
                  false),
                     
 define(CompoundAssigments,coin, "compound assigment",
        BT_TYPE_RULESET,
        ruleset(
          StatementExpression($x,"=", Expression($y,"=",$z))
               -> true 
                    [ violationDiscovered(CompoundAssigments, 
                               "compound assigment", s($x,$y,$z)) ]
        ),true)


]

);

