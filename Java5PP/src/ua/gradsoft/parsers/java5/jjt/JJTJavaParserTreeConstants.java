/* Generated By:JJTree: Do not edit this line. ./JJTJavaParserTreeConstants.java */

package ua.gradsoft.parsers.java5.jjt;

public interface JJTJavaParserTreeConstants
{
  public int JJTCOMPILATIONUNIT = 0;
  public int JJTPACKAGEDECLARATION = 1;
  public int JJTIMPORTDECLARATION = 2;
  public int JJTMODIFIERS = 3;
  public int JJTTYPEDECLARATION = 4;
  public int JJTCLASSORINTERFACEDECLARATION = 5;
  public int JJTEXTENDSLIST = 6;
  public int JJTIMPLEMENTSLIST = 7;
  public int JJTENUMDECLARATION = 8;
  public int JJTENUMBODY = 9;
  public int JJTENUMCONSTANT = 10;
  public int JJTTYPEPARAMETERS = 11;
  public int JJTTYPEPARAMETER = 12;
  public int JJTTYPEBOUND = 13;
  public int JJTCLASSORINTERFACEBODY = 14;
  public int JJTCLASSORINTERFACEBODYDECLARATION = 15;
  public int JJTFIELDDECLARATION = 16;
  public int JJTVARIABLEDECLARATOR = 17;
  public int JJTVARIABLEDECLARATORID = 18;
  public int JJTVARIABLEINITIALIZER = 19;
  public int JJTARRAYINITIALIZER = 20;
  public int JJTMETHODDECLARATION = 21;
  public int JJTMETHODDECLARATOR = 22;
  public int JJTFORMALPARAMETERS = 23;
  public int JJTFORMALPARAMETER = 24;
  public int JJTCONSTRUCTORDECLARATION = 25;
  public int JJTEXPLICITCONSTRUCTORINVOCATION = 26;
  public int JJTEXPLICITTHISCONSTRUCTORINVOCATION = 27;
  public int JJTEXPLICITSUPERCONSTRUCTORINVOCATION = 28;
  public int JJTINITIALIZER = 29;
  public int JJTTYPE = 30;
  public int JJTREFERENCETYPE = 31;
  public int JJTCLASSORINTERFACETYPE = 32;
  public int JJTTYPEARGUMENTS = 33;
  public int JJTTYPEARGUMENT = 34;
  public int JJTWILDCARDBOUNDS = 35;
  public int JJTPRIMITIVETYPE = 36;
  public int JJTRESULTTYPE = 37;
  public int JJTNAME = 38;
  public int JJTNAMELIST = 39;
  public int JJTEXPRESSION = 40;
  public int JJTASSIGNMENTOPERATOR = 41;
  public int JJTCONDITIONALEXPRESSION = 42;
  public int JJTCONDITIONALOREXPRESSION = 43;
  public int JJTCONDITIONALANDEXPRESSION = 44;
  public int JJTINCLUSIVEOREXPRESSION = 45;
  public int JJTEXCLUSIVEOREXPRESSION = 46;
  public int JJTANDEXPRESSION = 47;
  public int JJTEQUALITYEXPRESSION = 48;
  public int JJTEQUALITYEXPRESSIONOPERAND = 49;
  public int JJTINSTANCEOFEXPRESSION = 50;
  public int JJTRELATIONALEXPRESSION = 51;
  public int JJTRELATIONALEXPRESSIONSUFFIX = 52;
  public int JJTSHIFTEXPRESSION = 53;
  public int JJTSHIFTEXPRESSIONOPERAND = 54;
  public int JJTADDITIVEEXPRESSION = 55;
  public int JJTADDITIVEOPERAND = 56;
  public int JJTMULTIPLICATIVEEXPRESSION = 57;
  public int JJTMULTIPLICATIVEOPERAND = 58;
  public int JJTUNARYEXPRESSION = 59;
  public int JJTPREINCREMENTEXPRESSION = 60;
  public int JJTPREDECREMENTEXPRESSION = 61;
  public int JJTUNARYEXPRESSIONNOTPLUSMINUS = 62;
  public int JJTCASTLOOKAHEAD = 63;
  public int JJTPOSTFIXEXPRESSION = 64;
  public int JJTCASTEXPRESSION = 65;
  public int JJTPRIMARYEXPRESSION = 66;
  public int JJTSUPERPREFIX = 67;
  public int JJTCLASSLITERAL = 68;
  public int JJTIDENTIFIERORFUNCTIONCALL = 69;
  public int JJTMETHODCALL = 70;
  public int JJTPRIMARYSUFFIX = 71;
  public int JJTTHISSELECTOR = 72;
  public int JJTSUPERSELECTOR = 73;
  public int JJTALLOCATIONSELECTOR = 74;
  public int JJTMEMBERSELECTOR = 75;
  public int JJTARRAYINDEXSELECTOR = 76;
  public int JJTLITERAL = 77;
  public int JJTINTEGERLITERAL = 78;
  public int JJTCHARACTERLITERAL = 79;
  public int JJTFLOATINGPOINTLITERAL = 80;
  public int JJTSTRINGLITERAL = 81;
  public int JJTBOOLEANLITERAL = 82;
  public int JJTNULLLITERAL = 83;
  public int JJTARGUMENTS = 84;
  public int JJTARGUMENTLIST = 85;
  public int JJTALLOCATIONEXPRESSION = 86;
  public int JJTARRAYDIMSANDINITS = 87;
  public int JJTARRAYDIMS = 88;
  public int JJTARRAYDIM = 89;
  public int JJTSTATEMENT = 90;
  public int JJTSTATEMENTEXPRESSIONSTATEMENT = 91;
  public int JJTASSERTSTATEMENT = 92;
  public int JJTLABELEDSTATEMENT = 93;
  public int JJTBLOCK = 94;
  public int JJTBLOCKSTATEMENT = 95;
  public int JJTLOCALVARIABLEDECLARATION = 96;
  public int JJTEMPTYSTATEMENT = 97;
  public int JJTSTATEMENTEXPRESSION = 98;
  public int JJTSWITCHSTATEMENT = 99;
  public int JJTSWITCHSTATEMENTLABELBLOCK = 100;
  public int JJTSWITCHLABEL = 101;
  public int JJTIFSTATEMENT = 102;
  public int JJTWHILESTATEMENT = 103;
  public int JJTDOSTATEMENT = 104;
  public int JJTFORSTATEMENT = 105;
  public int JJTFOREACHLOOPHEAD = 106;
  public int JJTTRADITIONALFORLOOPHEAD = 107;
  public int JJTFORINIT = 108;
  public int JJTSTATEMENTEXPRESSIONLIST = 109;
  public int JJTFORUPDATE = 110;
  public int JJTBREAKSTATEMENT = 111;
  public int JJTCONTINUESTATEMENT = 112;
  public int JJTRETURNSTATEMENT = 113;
  public int JJTTHROWSTATEMENT = 114;
  public int JJTSYNCHRONIZEDSTATEMENT = 115;
  public int JJTTRYSTATEMENT = 116;
  public int JJTCATCHSEQUENCE = 117;
  public int JJTCATCH = 118;
  public int JJTRUNSIGNEDSHIFT = 119;
  public int JJTRSIGNEDSHIFT = 120;
  public int JJTANNOTATIONS = 121;
  public int JJTANNOTATION = 122;
  public int JJTNORMALANNOTATION = 123;
  public int JJTMARKERANNOTATION = 124;
  public int JJTSINGLEMEMBERANNOTATION = 125;
  public int JJTMEMBERVALUEPAIRS = 126;
  public int JJTMEMBERVALUEPAIR = 127;
  public int JJTMEMBERVALUE = 128;
  public int JJTMEMBERVALUEARRAYINITIALIZER = 129;
  public int JJTANNOTATIONTYPEDECLARATION = 130;
  public int JJTANNOTATIONTYPEBODY = 131;
  public int JJTANNOTATIONTYPEMEMBERDECLARATION = 132;
  public int JJTDEFAULTVALUE = 133;
  public int JJTIDENTIFIER = 134;


  public String[] jjtNodeName = {
    "CompilationUnit",
    "PackageDeclaration",
    "ImportDeclaration",
    "Modifiers",
    "TypeDeclaration",
    "ClassOrInterfaceDeclaration",
    "ExtendsList",
    "ImplementsList",
    "EnumDeclaration",
    "EnumBody",
    "EnumConstant",
    "TypeParameters",
    "TypeParameter",
    "TypeBound",
    "ClassOrInterfaceBody",
    "ClassOrInterfaceBodyDeclaration",
    "FieldDeclaration",
    "VariableDeclarator",
    "VariableDeclaratorId",
    "VariableInitializer",
    "ArrayInitializer",
    "MethodDeclaration",
    "MethodDeclarator",
    "FormalParameters",
    "FormalParameter",
    "ConstructorDeclaration",
    "ExplicitConstructorInvocation",
    "ExplicitThisConstructorInvocation",
    "ExplicitSuperConstructorInvocation",
    "Initializer",
    "Type",
    "ReferenceType",
    "ClassOrInterfaceType",
    "TypeArguments",
    "TypeArgument",
    "WildcardBounds",
    "PrimitiveType",
    "ResultType",
    "Name",
    "NameList",
    "Expression",
    "AssignmentOperator",
    "ConditionalExpression",
    "ConditionalOrExpression",
    "ConditionalAndExpression",
    "InclusiveOrExpression",
    "ExclusiveOrExpression",
    "AndExpression",
    "EqualityExpression",
    "EqualityExpressionOperand",
    "InstanceOfExpression",
    "RelationalExpression",
    "RelationalExpressionSuffix",
    "ShiftExpression",
    "ShiftExpressionOperand",
    "AdditiveExpression",
    "AdditiveOperand",
    "MultiplicativeExpression",
    "MultiplicativeOperand",
    "UnaryExpression",
    "PreIncrementExpression",
    "PreDecrementExpression",
    "UnaryExpressionNotPlusMinus",
    "CastLookahead",
    "PostfixExpression",
    "CastExpression",
    "PrimaryExpression",
    "SuperPrefix",
    "ClassLiteral",
    "IdentifierOrFunctionCall",
    "MethodCall",
    "PrimarySuffix",
    "ThisSelector",
    "SuperSelector",
    "AllocationSelector",
    "MemberSelector",
    "ArrayIndexSelector",
    "Literal",
    "IntegerLiteral",
    "CharacterLiteral",
    "FloatingPointLiteral",
    "StringLiteral",
    "BooleanLiteral",
    "NullLiteral",
    "Arguments",
    "ArgumentList",
    "AllocationExpression",
    "ArrayDimsAndInits",
    "ArrayDims",
    "ArrayDim",
    "Statement",
    "StatementExpressionStatement",
    "AssertStatement",
    "LabeledStatement",
    "Block",
    "BlockStatement",
    "LocalVariableDeclaration",
    "EmptyStatement",
    "StatementExpression",
    "SwitchStatement",
    "SwitchStatementLabelBlock",
    "SwitchLabel",
    "IfStatement",
    "WhileStatement",
    "DoStatement",
    "ForStatement",
    "ForEachLoopHead",
    "TraditionalForLoopHead",
    "ForInit",
    "StatementExpressionList",
    "ForUpdate",
    "BreakStatement",
    "ContinueStatement",
    "ReturnStatement",
    "ThrowStatement",
    "SynchronizedStatement",
    "TryStatement",
    "CatchSequence",
    "Catch",
    "RUNSIGNEDSHIFT",
    "RSIGNEDSHIFT",
    "Annotations",
    "Annotation",
    "NormalAnnotation",
    "MarkerAnnotation",
    "SingleMemberAnnotation",
    "MemberValuePairs",
    "MemberValuePair",
    "MemberValue",
    "MemberValueArrayInitializer",
    "AnnotationTypeDeclaration",
    "AnnotationTypeBody",
    "AnnotationTypeMemberDeclaration",
    "DefaultValue",
    "Identifier",
  };
}
